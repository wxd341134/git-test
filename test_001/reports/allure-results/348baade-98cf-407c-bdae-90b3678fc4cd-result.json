{"name": "test_personal_center_workflow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=134.0.6998.118)\nStacktrace:\n\tGetHandleVerifier [0x005EC7F3+24435]\n\t(No symbol) [0x00572074]\n\t(No symbol) [0x004406E3]\n\t(No symbol) [0x0042FEC0]\n\t(No symbol) [0x0044DFDF]\n\t(No symbol) [0x004B46AF]\n\t(No symbol) [0x004CEB19]\n\t(No symbol) [0x004AD5B6]\n\t(No symbol) [0x0047C54F]\n\t(No symbol) [0x0047D894]\n\tGetHandleVerifier [0x008F70A3+3213347]\n\tGetHandleVerifier [0x0090B0C9+3295305]\n\tGetHandleVerifier [0x0090558C+3271948]\n\tGetHandleVerifier [0x00687360+658144]\n\t(No symbol) [0x0057B27D]\n\t(No symbol) [0x00578208]\n\t(No symbol) [0x005783A9]\n\t(No symbol) [0x0056AAC0]\n\tBaseThreadInitThunk [0x75005D49+25]\n\tRtlInitializeExceptionChain [0x7726CE3B+107]\n\tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]", "trace": "self = <FgAI.test_001.test_UserCenter.TestPersonalCenter object at 0x000001E2CE9B6B20>\n\n    @allure.feature(\"个人中心\")\n    @allure.story(\"完整测试流程\")\n    def test_personal_center_workflow(self):\n        \"\"\"测试个人中心完整流程\"\"\"\n        try:\n            # 登录\n            self.base_page = BasePage(self.driver)\n            self.login_page = LoginPage(self.driver)\n            # 执行登录\n>           self.login_page.login(\"wxdfg\", \"wxd341134@\")\n\ntest_UserCenter.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x000001E2CEA335E0>\nusername = 'wxdfg', password = 'wxd341134@'\n\n    def login(self, username=None, password=None):\n        \"\"\"登录系统\"\"\"\n        # 使用默认值或传入的参数\n        username = username or USERNAME\n        password = password or PASSWORD\n    \n        self.logger.info(f\"开始登录系统，用户名: {username}\")\n    \n        with allure.step(f\"打开登录页面: {BASE_URL}\"):\n            self.driver.get(BASE_URL)\n            time.sleep(1)  # 等待页面加载\n            self.take_screenshot(\"login_page\")\n    \n        # 输入用户名 - 逐个字符输入以模拟真实用户\n        with allure.step(f\"输入用户名: {username}\"):\n            self.logger.info(\"开始输入用户名...\")\n            element = self.find_element(self.username_input)\n            element.clear()\n            for char in username:\n                element.send_keys(char)\n                time.sleep(0.2)  # 每个字符之间暂停0.2秒\n            time.sleep(0.5)\n    \n        # 输入密码 - 逐个字符输入以模拟真实用户\n        with allure.step(\"输入密码\"):\n            self.logger.info(\"开始输入密码...\")\n            element = self.find_element(self.password_input)\n            element.clear()\n            for char in password:\n                element.send_keys(char)\n                time.sleep(0.2)  # 每个字符之间暂停0.2秒\n            time.sleep(0.5)\n    \n        # 获取验证码图片并等待手动输入\n        with allure.step(\"输入验证码\"):\n            self.find_element(self.captcha_img)\n            self.logger.info(\"请查看浏览器中的验证码图片\")\n            self.take_screenshot(\"captcha_image\")\n    \n            # 使用tkinter对话框获取验证码输入\n            root = tk.Tk()\n            root.withdraw()  # 隐藏主窗口\n    \n            # 将浏览器窗口置顶\n            self.driver.execute_script(\"window.focus();\")\n            time.sleep(0.5)\n    \n            # 显示对话框获取验证码\n            captcha_text = simpledialog.askstring(\"验证码输入\", \"请查看浏览器中的验证码并输入:\")\n    \n            if captcha_text:\n                # 输入验证码 - 逐个字符输入\n                element = self.find_element(self.captcha_input)\n                element.clear()\n                for char in captcha_text:\n                    element.send_keys(char)\n                    time.sleep(0.2)\n                time.sleep(0.5)\n                self.logger.info(f\"验证码已输入: {captcha_text}\")\n            else:\n                self.logger.error(\"未输入验证码，登录失败\")\n>               raise ValueError(\"未输入验证码\")\nE               ValueError: 未输入验证码\n\n..\\pages\\login_page.py:88: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <FgAI.test_001.test_UserCenter.TestPersonalCenter object at 0x000001E2CE9B6B20>\n\n    @allure.feature(\"个人中心\")\n    @allure.story(\"完整测试流程\")\n    def test_personal_center_workflow(self):\n        \"\"\"测试个人中心完整流程\"\"\"\n        try:\n            # 登录\n            self.base_page = BasePage(self.driver)\n            self.login_page = LoginPage(self.driver)\n            # 执行登录\n            self.login_page.login(\"wxdfg\", \"wxd341134@\")\n            logger.info(\"完成登录\")\n            time.sleep(2)  # 等待页面加载完成\n    \n            # 1. 报表统计\n            self.do_report_statistics()\n    \n            # 2. 字体下载\n            self.do_font_download()\n    \n            # 3. 修改密码 (修改密码后系统会自动退出)\n            self.do_change_password()\n    \n            # 4. 直接使用新密码登录\n            self.do_verify_new_password()\n    \n        except Exception as e:\n            logger.error(f\"个人中心测试流程失败: {str(e)}\")\n>           allure.attach(self.driver.get_screenshot_as_png(), \"失败截图\", allure.attachment_type.PNG)\n\ntest_UserCenter.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E2CE90AEB0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7726CE3B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=134.0.6998.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x005EC7F3+24435]\nE       \t(No symbol) [0x00572074]\nE       \t(No symbol) [0x004406E3]\nE       \t(No symbol) [0x0042FEC0]\nE       \t(No symbol) [0x0044DFDF]\nE       \t(No symbol) [0x004B46AF]\nE       \t(No symbol) [0x004CEB19]\nE       \t(No symbol) [0x004AD5B6]\nE       \t(No symbol) [0x0047C54F]\nE       \t(No symbol) [0x0047D894]\nE       \tGetHandleVerifier [0x008F70A3+3213347]\nE       \tGetHandleVerifier [0x0090B0C9+3295305]\nE       \tGetHandleVerifier [0x0090558C+3271948]\nE       \tGetHandleVerifier [0x00687360+658144]\nE       \t(No symbol) [0x0057B27D]\nE       \t(No symbol) [0x00578208]\nE       \t(No symbol) [0x005783A9]\nE       \t(No symbol) [0x0056AAC0]\nE       \tBaseThreadInitThunk [0x75005D49+25]\nE       \tRtlInitializeExceptionChain [0x7726CE3B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "测试个人中心完整流程", "steps": [{"name": "打开登录页面: http://192.168.2.176:86/#/case/index", "status": "passed", "attachments": [{"name": "login_page", "source": "5ba1ded1-fb7c-42e8-8612-463e334e314a-attachment.png", "type": "image/png"}], "start": 1742890623807, "stop": 1742890625738}, {"name": "输入用户名: wxdfg", "status": "passed", "start": 1742890625738, "stop": 1742890627435}, {"name": "输入密码", "status": "passed", "start": 1742890627436, "stop": 1742890630281}, {"name": "输入验证码", "status": "broken", "statusDetails": {"message": "ValueError: 未输入验证码\n", "trace": "  File \"E:\\AutoTest\\FgAI\\pages\\login_page.py\", line 88, in login\n    raise ValueError(\"未输入验证码\")\n"}, "attachments": [{"name": "captcha_image", "source": "0c843db2-4ade-4c7f-8962-b1e0ce513281-attachment.png", "type": "image/png"}], "start": 1742890630281, "stop": 1742894536430}], "attachments": [{"name": "log", "source": "49ce3110-8ab9-4912-ae8e-a4e8daef8df9-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "387c632c-3d65-46ca-a419-e9458ce4478a-attachment.txt", "type": "text/plain"}], "start": 1742890623806, "stop": 1742894536441, "uuid": "8b0e5a65-8ac8-4e59-9b40-7e19190e5f24", "historyId": "1411408b10fd896b372e133dea5137f8", "testCaseId": "1411408b10fd896b372e133dea5137f8", "fullName": "test_001.test_UserCenter.TestPersonalCenter#test_personal_center_workflow", "labels": [{"name": "feature", "value": "个人中心"}, {"name": "story", "value": "完整测试流程"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_UserCenter"}, {"name": "subSuite", "value": "TestPersonalCenter"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "24448-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_UserCenter"}]}