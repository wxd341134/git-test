{"name": "卷宗上传流程测试", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF66C14DF85+26693]\n\t(No symbol) [0x00007FF66C0AEAD0]\n\t(No symbol) [0x00007FF66BF38FFC]\n\t(No symbol) [0x00007FF66BF7F69F]\n\t(No symbol) [0x00007FF66BFB77B2]\n\t(No symbol) [0x00007FF66BFB210E]\n\t(No symbol) [0x00007FF66BFB11B9]\n\t(No symbol) [0x00007FF66BF055E5]\n\tGetHandleVerifier [0x00007FF66C4A436D+3525677]\n\tGetHandleVerifier [0x00007FF66C4B7F3B+3606523]\n\tGetHandleVerifier [0x00007FF66C4ACEE3+3561379]\n\tGetHandleVerifier [0x00007FF66C217C0A+853194]\n\t(No symbol) [0x00007FF66C0B990F]\n\t(No symbol) [0x00007FF66BF041FF]\n\tGetHandleVerifier [0x00007FF66C5225D8+4042392]\n\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\n\tRtlUserThreadStart [0x00007FF9825514FC+44]", "trace": "self = <pages.login_page.LoginPage object at 0x000001F737CB95B0>\nusername = 'wxdfg', password = 'wxd341134@'\n\n    def login(self, username=\"wxdfg\", password=\"wxd341134@\"):\n        \"\"\"执行登录操作\"\"\"\n        try:\n            # 打开登录页面\n            self.open_login_page()\n    \n            # 输入用户名\n            logger.info(f\"开始输入用户名: {username}\")\n            try:\n>               username_element = self.wait.until(\n                    EC.element_to_be_clickable(self.username_input)\n                )\n\n..\\pages\\login_page.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:633: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F737C83D00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...07FF66C0A4D89]\\\\n\\\\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF9825514FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=135.0.7049.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66C14DF85+26693]\nE       \t(No symbol) [0x00007FF66C0AEAD0]\nE       \t(No symbol) [0x00007FF66BF391CA]\nE       \t(No symbol) [0x00007FF66BF24FB5]\nE       \t(No symbol) [0x00007FF66BF49CD4]\nE       \t(No symbol) [0x00007FF66BFBF78F]\nE       \t(No symbol) [0x00007FF66BFDF975]\nE       \t(No symbol) [0x00007FF66BFB76C3]\nE       \t(No symbol) [0x00007FF66BF80490]\nE       \t(No symbol) [0x00007FF66BF81743]\nE       \tGetHandleVerifier [0x00007FF66C4A436D+3525677]\nE       \tGetHandleVerifier [0x00007FF66C4B7F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF66C4ACEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF66C217C0A+853194]\nE       \t(No symbol) [0x00007FF66C0B990F]\nE       \t(No symbol) [0x00007FF66C0B5674]\nE       \t(No symbol) [0x00007FF66C0B5816]\nE       \t(No symbol) [0x00007FF66C0A4D89]\nE       \tBaseThreadInitThunk [0x00007FF98108E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF9825514FC+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pages.login_page.LoginPage object at 0x000001F737CB95B0>\nusername = 'wxdfg', password = 'wxd341134@'\n\n    def login(self, username=\"wxdfg\", password=\"wxd341134@\"):\n        \"\"\"执行登录操作\"\"\"\n        try:\n            # 打开登录页面\n            self.open_login_page()\n    \n            # 输入用户名\n            logger.info(f\"开始输入用户名: {username}\")\n            try:\n                username_element = self.wait.until(\n                    EC.element_to_be_clickable(self.username_input)\n                )\n                username_element.clear()\n                username_element.send_keys(username)\n                logger.info(\"用户名输入完成\")\n            except Exception as e:\n>               self.handle_error(f\"用户名输入失败: {str(e)}\")\n\n..\\pages\\login_page.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x000001F737CB95B0>\nerror_msg = '用户名输入失败: Message: invalid session id: session deleted as the browser has closed the connection\\nfrom disconnected: no...l) [0x00007FF66C0A4D89]\\n\\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\\n\\tRtlUserThreadStart [0x00007FF9825514FC+44]\\n'\ntake_screenshot = True\n\n    def handle_error(self, error_msg, take_screenshot=True):\n        \"\"\"统一的错误处理方法\"\"\"\n        logger.error(error_msg)\n        if take_screenshot:\n            try:\n                allure.attach(\n                    self.driver.get_screenshot_as_png(),\n                    name=\"error_screenshot\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n            except:\n                logger.error(\"无法截图\")\n        # 关闭浏览器\n        try:\n            DriverManager.quit_driver()\n        except Exception as e:\n            logger.error(f\"关闭浏览器失败: {str(e)}\")\n>       raise Exception(error_msg)\nE       Exception: 用户名输入失败: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=135.0.7049.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66C14DF85+26693]\nE       \t(No symbol) [0x00007FF66C0AEAD0]\nE       \t(No symbol) [0x00007FF66BF391CA]\nE       \t(No symbol) [0x00007FF66BF24FB5]\nE       \t(No symbol) [0x00007FF66BF49CD4]\nE       \t(No symbol) [0x00007FF66BFBF78F]\nE       \t(No symbol) [0x00007FF66BFDF975]\nE       \t(No symbol) [0x00007FF66BFB76C3]\nE       \t(No symbol) [0x00007FF66BF80490]\nE       \t(No symbol) [0x00007FF66BF81743]\nE       \tGetHandleVerifier [0x00007FF66C4A436D+3525677]\nE       \tGetHandleVerifier [0x00007FF66C4B7F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF66C4ACEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF66C217C0A+853194]\nE       \t(No symbol) [0x00007FF66C0B990F]\nE       \t(No symbol) [0x00007FF66C0B5674]\nE       \t(No symbol) [0x00007FF66C0B5816]\nE       \t(No symbol) [0x00007FF66C0A4D89]\nE       \tBaseThreadInitThunk [0x00007FF98108E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF9825514FC+44]\n\n..\\pages\\login_page.py:59: Exception\n\nDuring handling of the above exception, another exception occurred:\n\ncls = <class 'FgAI.test_001.test_DossierUp.TestDossierUpload'>\n\n    @classmethod\n    def setup_class(cls):\n        \"\"\"类级别的初始化\"\"\"\n        logger.info(\"初始化测试类...\")\n        cls.driver = DriverManager.get_driver()  # 使用DriverManager获取driver实例\n        cls.wait = WebDriverWait(cls.driver, 10)\n        cls.login_page = LoginPage(cls.driver)\n    \n        try:\n            # 执行登录\n>           cls.login_page.login(\"wxdfg\", \"wxd341134@\")\n\nbase_test.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\login_page.py:182: in login\n    self.handle_error(f\"登录过程失败: {str(e)}\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x000001F737CB95B0>\nerror_msg = '登录过程失败: 用户名输入失败: Message: invalid session id: session deleted as the browser has closed the connection\\nfrom disconne...l) [0x00007FF66C0A4D89]\\n\\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\\n\\tRtlUserThreadStart [0x00007FF9825514FC+44]\\n'\ntake_screenshot = True\n\n    def handle_error(self, error_msg, take_screenshot=True):\n        \"\"\"统一的错误处理方法\"\"\"\n        logger.error(error_msg)\n        if take_screenshot:\n            try:\n                allure.attach(\n                    self.driver.get_screenshot_as_png(),\n                    name=\"error_screenshot\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n            except:\n                logger.error(\"无法截图\")\n        # 关闭浏览器\n        try:\n            DriverManager.quit_driver()\n        except Exception as e:\n            logger.error(f\"关闭浏览器失败: {str(e)}\")\n>       raise Exception(error_msg)\nE       Exception: 登录过程失败: 用户名输入失败: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=135.0.7049.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66C14DF85+26693]\nE       \t(No symbol) [0x00007FF66C0AEAD0]\nE       \t(No symbol) [0x00007FF66BF391CA]\nE       \t(No symbol) [0x00007FF66BF24FB5]\nE       \t(No symbol) [0x00007FF66BF49CD4]\nE       \t(No symbol) [0x00007FF66BFBF78F]\nE       \t(No symbol) [0x00007FF66BFDF975]\nE       \t(No symbol) [0x00007FF66BFB76C3]\nE       \t(No symbol) [0x00007FF66BF80490]\nE       \t(No symbol) [0x00007FF66BF81743]\nE       \tGetHandleVerifier [0x00007FF66C4A436D+3525677]\nE       \tGetHandleVerifier [0x00007FF66C4B7F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF66C4ACEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF66C217C0A+853194]\nE       \t(No symbol) [0x00007FF66C0B990F]\nE       \t(No symbol) [0x00007FF66C0B5674]\nE       \t(No symbol) [0x00007FF66C0B5816]\nE       \t(No symbol) [0x00007FF66C0A4D89]\nE       \tBaseThreadInitThunk [0x00007FF98108E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF9825514FC+44]\n\n..\\pages\\login_page.py:59: Exception\n\nDuring handling of the above exception, another exception occurred:\n\ncls = <class 'FgAI.test_001.test_DossierUp.TestDossierUpload'>\n\n    @classmethod\n    def setup_class(cls):\n        \"\"\"类级别的初始化\"\"\"\n        logger.info(\"初始化测试类...\")\n        cls.driver = DriverManager.get_driver()  # 使用DriverManager获取driver实例\n        cls.wait = WebDriverWait(cls.driver, 10)\n        cls.login_page = LoginPage(cls.driver)\n    \n        try:\n            # 执行登录\n            cls.login_page.login(\"wxdfg\", \"wxd341134@\")\n            logger.info(\"登录成功\")\n        except Exception as e:\n            logger.error(f\"登录失败: {str(e)}\")\n            if hasattr(cls, 'driver'):\n                allure.attach(\n>                   cls.driver.get_screenshot_as_png(),\n                    \"登录失败截图\",\n                    allure.attachment_type.PNG\n                )\n\nbase_test.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F737C83D00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...225D8+4042392]\\\\n\\\\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF9825514FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66C14DF85+26693]\nE       \t(No symbol) [0x00007FF66C0AEAD0]\nE       \t(No symbol) [0x00007FF66BF38FFC]\nE       \t(No symbol) [0x00007FF66BF7F69F]\nE       \t(No symbol) [0x00007FF66BFB77B2]\nE       \t(No symbol) [0x00007FF66BFB210E]\nE       \t(No symbol) [0x00007FF66BFB11B9]\nE       \t(No symbol) [0x00007FF66BF055E5]\nE       \tGetHandleVerifier [0x00007FF66C4A436D+3525677]\nE       \tGetHandleVerifier [0x00007FF66C4B7F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF66C4ACEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF66C217C0A+853194]\nE       \t(No symbol) [0x00007FF66C0B990F]\nE       \t(No symbol) [0x00007FF66BF041FF]\nE       \tGetHandleVerifier [0x00007FF66C5225D8+4042392]\nE       \tBaseThreadInitThunk [0x00007FF98108E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF9825514FC+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "测试卷宗上传流程", "attachments": [{"name": "log", "source": "85af066f-a5ad-44c4-87d7-61fe39e3923b-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "571abe83-d53e-4c6f-93c9-68205916a047-attachment.txt", "type": "text/plain"}], "start": 1744622048458, "stop": 1744622048458, "uuid": "db196617-f23b-4630-8b9f-81a143d9e7d7", "historyId": "04e90740866834ed8334fcbfad3a7caa", "testCaseId": "04e90740866834ed8334fcbfad3a7caa", "fullName": "test_001.test_DossierUp.TestDossierUpload#test_dossier_upload", "labels": [{"name": "epic", "value": "法官AI系统测试"}, {"name": "story", "value": "卷宗上传"}, {"name": "feature", "value": "卷宗管理"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_DossierUp"}, {"name": "subSuite", "value": "TestDossierUpload"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "15952-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_DossierUp"}]}