{"name": "测试阅卷笔记完整业务流程", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C1FBDF85+26693]\n\t(No symbol) [0x00007FF6C1F1EAD0]\n\t(No symbol) [0x00007FF6C1DA8FFC]\n\t(No symbol) [0x00007FF6C1DEF69F]\n\t(No symbol) [0x00007FF6C1E277B2]\n\t(No symbol) [0x00007FF6C1E2210E]\n\t(No symbol) [0x00007FF6C1E211B9]\n\t(No symbol) [0x00007FF6C1D755E5]\n\tGetHandleVerifier [0x00007FF6C231436D+3525677]\n\tGetHandleVerifier [0x00007FF6C2327F3B+3606523]\n\tGetHandleVerifier [0x00007FF6C231CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6C2087C0A+853194]\n\t(No symbol) [0x00007FF6C1F2990F]\n\t(No symbol) [0x00007FF6C1D741FF]\n\tGetHandleVerifier [0x00007FF6C23925D8+4042392]\n\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\n\tRtlUserThreadStart [0x00007FF9825514FC+44]", "trace": "self = <FgAI.test_001.test_read_notes.TestReadNotes object at 0x000001D43CA9D5B0>\n\n    @allure.story(\"组合功能测试\")\n    @allure.title(\"测试阅卷笔记完整业务流程\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.flaky(reruns=2, reruns_delay=2)\n    def test_complete_workflow(self):\n        \"\"\"\n        测试完整的业务流程：\n        1. 打开阅卷笔记\n        2. 查看判决书\n        3. 查看证据引用\n        4. 执行查找替换\n        5. 导出笔记\n        \"\"\"\n        logger.info(\"开始测试完整业务流程...\")\n        try:\n            with allure.step(\"打开阅卷笔记\"):\n>               self.read_notes.open_reading_notes()\n\ntest_read_notes.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\read_notes_utils.py:65: in open_reading_notes\n    self.safe_click(ReadNotesPage.REVIEW_NOTES_BUTTON, \"阅卷笔记按钮\")\n..\\common\\read_notes_utils.py:47: in safe_click\n    element = self.wait_for_element_clickable(locator, timeout, description)\n..\\common\\read_notes_utils.py:29: in wait_for_element_clickable\n    element = WebDriverWait(self.driver, timeout).until(\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:633: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D43CA85F10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...925D8+4042392]\\\\n\\\\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF9825514FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C1FBDF85+26693]\nE       \t(No symbol) [0x00007FF6C1F1EAD0]\nE       \t(No symbol) [0x00007FF6C1DA8FFC]\nE       \t(No symbol) [0x00007FF6C1DEF69F]\nE       \t(No symbol) [0x00007FF6C1E277B2]\nE       \t(No symbol) [0x00007FF6C1E2210E]\nE       \t(No symbol) [0x00007FF6C1E211B9]\nE       \t(No symbol) [0x00007FF6C1D755E5]\nE       \tGetHandleVerifier [0x00007FF6C231436D+3525677]\nE       \tGetHandleVerifier [0x00007FF6C2327F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF6C231CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF6C2087C0A+853194]\nE       \t(No symbol) [0x00007FF6C1F2990F]\nE       \t(No symbol) [0x00007FF6C1D741FF]\nE       \tGetHandleVerifier [0x00007FF6C23925D8+4042392]\nE       \tBaseThreadInitThunk [0x00007FF98108E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF9825514FC+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "\n        测试完整的业务流程：\n        1. 打开阅卷笔记\n        2. 查看判决书\n        3. 查看证据引用\n        4. 执行查找替换\n        5. 导出笔记\n        ", "steps": [{"name": "打开阅卷笔记", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C1FBDF85+26693]\n\t(No symbol) [0x00007FF6C1F1EAD0]\n\t(No symbol) [0x00007FF6C1DA8FFC]\n\t(No symbol) [0x00007FF6C1DEF69F]\n\t(No symbol) [0x00007FF6C1E277B2]\n\t(No symbol) [0x00007FF6C1E2210E]\n\t(No symbol) [0x00007FF6C1E211B9]\n\t(No symbol) [0x00007FF6C1D755E5]\n\tGetHandleVerifier [0x00007FF6C231436D+3525677]\n\tGetHandleVerifier [0x00007FF6C2327F3B+3606523]\n\tGetHandleVerifier [0x00007FF6C231CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6C2087C0A+853194]\n\t(No symbol) [0x00007FF6C1F2990F]\n\t(No symbol) [0x00007FF6C1D741FF]\n\tGetHandleVerifier [0x00007FF6C23925D8+4042392]\n\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\n\tRtlUserThreadStart [0x00007FF9825514FC+44]\n\n", "trace": "  File \"E:\\AutoTest\\FgAI\\test_001\\test_read_notes.py\", line 181, in test_complete_workflow\n    self.read_notes.open_reading_notes()\n  File \"D:\\Python39\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"E:\\AutoTest\\FgAI\\common\\read_notes_utils.py\", line 65, in open_reading_notes\n    self.safe_click(ReadNotesPage.REVIEW_NOTES_BUTTON, \"阅卷笔记按钮\")\n  File \"E:\\AutoTest\\FgAI\\common\\read_notes_utils.py\", line 47, in safe_click\n    element = self.wait_for_element_clickable(locator, timeout, description)\n  File \"E:\\AutoTest\\FgAI\\common\\read_notes_utils.py\", line 29, in wait_for_element_clickable\n    element = WebDriverWait(self.driver, timeout).until(\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 137, in until\n    value = method(self._driver)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 633, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 898, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "打开阅卷笔记", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C1FBDF85+26693]\n\t(No symbol) [0x00007FF6C1F1EAD0]\n\t(No symbol) [0x00007FF6C1DA8FFC]\n\t(No symbol) [0x00007FF6C1DEF69F]\n\t(No symbol) [0x00007FF6C1E277B2]\n\t(No symbol) [0x00007FF6C1E2210E]\n\t(No symbol) [0x00007FF6C1E211B9]\n\t(No symbol) [0x00007FF6C1D755E5]\n\tGetHandleVerifier [0x00007FF6C231436D+3525677]\n\tGetHandleVerifier [0x00007FF6C2327F3B+3606523]\n\tGetHandleVerifier [0x00007FF6C231CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6C2087C0A+853194]\n\t(No symbol) [0x00007FF6C1F2990F]\n\t(No symbol) [0x00007FF6C1D741FF]\n\tGetHandleVerifier [0x00007FF6C23925D8+4042392]\n\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\n\tRtlUserThreadStart [0x00007FF9825514FC+44]\n\n", "trace": "  File \"D:\\Python39\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"E:\\AutoTest\\FgAI\\common\\read_notes_utils.py\", line 65, in open_reading_notes\n    self.safe_click(ReadNotesPage.REVIEW_NOTES_BUTTON, \"阅卷笔记按钮\")\n  File \"E:\\AutoTest\\FgAI\\common\\read_notes_utils.py\", line 47, in safe_click\n    element = self.wait_for_element_clickable(locator, timeout, description)\n  File \"E:\\AutoTest\\FgAI\\common\\read_notes_utils.py\", line 29, in wait_for_element_clickable\n    element = WebDriverWait(self.driver, timeout).until(\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 137, in until\n    value = method(self._driver)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 633, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 898, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1744710494743, "stop": 1744710494757}], "start": 1744710494743, "stop": 1744710494758}], "attachments": [{"name": "log", "source": "7d924ef9-96f1-4e8c-92d8-27efc09ed105-attachment.txt", "type": "text/plain"}], "start": 1744710494743, "stop": 1744710494759, "uuid": "9e1172b6-944b-4a38-82bb-e9df34b9902e", "historyId": "99152a7fa99863a616f2f68fed419185", "testCaseId": "99152a7fa99863a616f2f68fed419185", "fullName": "test_001.test_read_notes.TestReadNotes#test_complete_workflow", "labels": [{"name": "epic", "value": "案件管理系统"}, {"name": "feature", "value": "阅卷笔记模块"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "组合功能测试"}, {"name": "tag", "value": "flaky(reruns=2, reruns_delay=2)"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_read_notes"}, {"name": "subSuite", "value": "TestReadNotes"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "19244-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_read_notes"}]}