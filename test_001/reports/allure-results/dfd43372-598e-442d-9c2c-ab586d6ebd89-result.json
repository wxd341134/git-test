{"name": "test_personal_center_workflow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 113\nCurrent browser version is 134.0.6998.177 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x01118893+48451]\n\t(No symbol) [0x010AB8A1]\n\t(No symbol) [0x00FB5058]\n\t(No symbol) [0x00FD5D9C]\n\t(No symbol) [0x00FD1AA3]\n\t(No symbol) [0x00FD0019]\n\t(No symbol) [0x01000798]\n\t(No symbol) [0x0100047C]\n\t(No symbol) [0x00FFA0B6]\n\t(No symbol) [0x00FD7E08]\n\t(No symbol) [0x00FD8F2D]\n\tGetHandleVerifier [0x01378E3A+2540266]\n\tGetHandleVerifier [0x013B8959+2801161]\n\tGetHandleVerifier [0x013B295C+2776588]\n\tGetHandleVerifier [0x011A2280+612144]\n\t(No symbol) [0x010B4F6C]\n\t(No symbol) [0x010B11D8]\n\t(No symbol) [0x010B12BB]\n\t(No symbol) [0x010A4857]\n\tBaseThreadInitThunk [0x75005D49+25]\n\tRtlInitializeExceptionChain [0x7726CE3B+107]\n\tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]", "trace": "self = <FgAI.test_001.test_UserCenter_new.TestPersonalCenter object at 0x00000198D5E7BA90>\n\n    @pytest.fixture(autouse=True)\n    def setup_teardown(self):\n        \"\"\"每个测试用例执行前后的设置和清理\"\"\"\n        logger.info(\"开始测试用例执行\")\n        # 初始化driver\n>       self.driver = webdriver.Chrome()  # 可根据需要修改浏览器类型\n\nbase_test.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:250: in __init__\n    self.start_session(capabilities)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000198D5E7BB50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7726CE3B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 113\nE       Current browser version is 134.0.6998.177 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x01118893+48451]\nE       \t(No symbol) [0x010AB8A1]\nE       \t(No symbol) [0x00FB5058]\nE       \t(No symbol) [0x00FD5D9C]\nE       \t(No symbol) [0x00FD1AA3]\nE       \t(No symbol) [0x00FD0019]\nE       \t(No symbol) [0x01000798]\nE       \t(No symbol) [0x0100047C]\nE       \t(No symbol) [0x00FFA0B6]\nE       \t(No symbol) [0x00FD7E08]\nE       \t(No symbol) [0x00FD8F2D]\nE       \tGetHandleVerifier [0x01378E3A+2540266]\nE       \tGetHandleVerifier [0x013B8959+2801161]\nE       \tGetHandleVerifier [0x013B295C+2776588]\nE       \tGetHandleVerifier [0x011A2280+612144]\nE       \t(No symbol) [0x010B4F6C]\nE       \t(No symbol) [0x010B11D8]\nE       \t(No symbol) [0x010B12BB]\nE       \t(No symbol) [0x010A4857]\nE       \tBaseThreadInitThunk [0x75005D49+25]\nE       \tRtlInitializeExceptionChain [0x7726CE3B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: SessionNotCreatedException"}, "description": "测试个人中心完整流程", "attachments": [{"name": "log", "source": "5bbddfa3-e566-4139-8d16-5e520a8f1222-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "04f5fa8e-d8b4-42c6-9241-f2ca150b70d0-attachment.txt", "type": "text/plain"}], "start": 1744355426412, "stop": 1744355426412, "uuid": "96729e0f-c422-4dc5-b0c8-47dd423d3be7", "historyId": "28dc62525a20c37c02dec2f81705ae05", "testCaseId": "28dc62525a20c37c02dec2f81705ae05", "fullName": "test_001.test_UserCenter_new.TestPersonalCenter#test_personal_center_workflow", "labels": [{"name": "feature", "value": "个人中心"}, {"name": "story", "value": "完整测试流程"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_UserCenter_new"}, {"name": "subSuite", "value": "TestPersonalCenter"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "33968-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_UserCenter_new"}]}