{"name": "辅助阅卷测试", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF6234ADF85+26693]\n\t(No symbol) [0x00007FF62340EAD0]\n\t(No symbol) [0x00007FF6232991CA]\n\t(No symbol) [0x00007FF6232EF747]\n\t(No symbol) [0x00007FF6232EF97C]\n\t(No symbol) [0x00007FF6233433C7]\n\t(No symbol) [0x00007FF62331792F]\n\t(No symbol) [0x00007FF6233400B8]\n\t(No symbol) [0x00007FF6233176C3]\n\t(No symbol) [0x00007FF6232E0490]\n\t(No symbol) [0x00007FF6232E1743]\n\tGetHandleVerifier [0x00007FF62380436D+3525677]\n\tGetHandleVerifier [0x00007FF623817F3B+3606523]\n\tGetHandleVerifier [0x00007FF62380CEE3+3561379]\n\tGetHandleVerifier [0x00007FF623577C0A+853194]\n\t(No symbol) [0x00007FF62341990F]\n\t(No symbol) [0x00007FF623415674]\n\t(No symbol) [0x00007FF623415816]\n\t(No symbol) [0x00007FF623404D89]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]", "trace": "self = <FgAI.test_001.AssistedG.TestAssistedReading object at 0x00000187487034F0>\n\n    @allure.story(\"辅助阅卷流程\")\n    @allure.title(\"辅助阅卷测试\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_assisted_reading(self):\n        \"\"\"测试辅助阅卷流程\"\"\"\n        try:\n            # 1. 登录系统\n            with allure.step(\"登录系统\"):\n                logger.info(\"开始登录系统\")\n                self.login_page.login()\n                time.sleep(2)\n                logger.info(\"登录成功\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"login_success\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取登录成功截图\")\n    \n            # 2. 点击辅助阅卷\n            with allure.step(\"点击辅助阅卷\"):\n                logger.info(\"点击辅助阅卷\")\n                auxiliary_reading = self.wait.until(\n                    EC.element_to_be_clickable(self.auxiliary_reading)\n                )\n                auxiliary_reading.click()\n                time.sleep(2)\n                logger.info(\"步骤1执行成功：点击辅助阅卷\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"auxiliary_reading_clicked\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取辅助阅卷截图\")\n    \n            # 3. 点击庭审笔录1\n            with allure.step(\"点击庭审笔录1\"):\n                logger.info(\"点击庭审笔录1\")\n                court_record = self.wait.until(\n                    EC.element_to_be_clickable(self.court_record)\n                )\n                court_record.click()\n                time.sleep(1)\n                logger.info(\"步骤2执行成功：点击庭审笔录1\")\n    \n            # 4. 点击设为庭审笔录\n            with allure.step(\"点击设为庭审笔录\"):\n                logger.info(\"点击设为庭审笔录\")\n                set_record = self.wait.until(\n                    EC.element_to_be_clickable(self.set_record)\n                )\n                set_record.click()\n                time.sleep(1)\n                logger.info(\"步骤3执行成功：点击设为庭审笔录\")\n    \n            # 5. 输入原告处理意见1\n            with allure.step(\"输入原告处理意见1\"):\n                logger.info(\"输入原告处理意见1\")\n                opinion1 = self.wait.until(\n                    EC.presence_of_element_located(self.opinion1)\n                )\n                opinion1.clear()\n                opinion1.send_keys(\"无意见1\")\n                time.sleep(1)\n                logger.info(\"步骤4执行成功：输入原告处理意见1\")\n    \n            # 6. 输入原告处理意见2\n            with allure.step(\"输入原告处理意见2\"):\n                logger.info(\"输入原告处理意见2\")\n                opinion2 = self.wait.until(\n                    EC.presence_of_element_located(self.opinion2)\n                )\n                opinion2.clear()\n                opinion2.send_keys(\"无意见2\")\n                time.sleep(1)\n                logger.info(\"步骤5执行成功：输入原告处理意见2\")\n    \n            # 7. 点击确定按钮\n            with allure.step(\"点击确定按钮\"):\n                logger.info(\"点击确定按钮\")\n                confirm_button = self.wait.until(\n                    EC.element_to_be_clickable(self.confirm_button)\n                )\n                confirm_button.click()\n                time.sleep(2)\n                logger.info(\"步骤6执行成功：点击确定按钮\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"test_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取完成测试截图\")\n    \n            # 8. 点击取消设置庭审笔录1\n            with allure.step(\"取消设置庭审笔录\"):\n                logger.info(\"点击取消设置庭审笔录\")\n    \n                # 先点击庭审笔录1确保选中\n                court_record = self.wait.until(\n                    EC.element_to_be_clickable(self.court_record)\n                )\n                court_record.click()\n                time.sleep(1)\n    \n                # 找到取消设置按钮并点击\n                try:\n                    # 尝试使用提供的选择器\n                    cancel_set_record = self.wait.until(\n                        EC.element_to_be_clickable(self.cancel_set_record)\n                    )\n                    cancel_set_record.click()\n                except:\n                    # 如果上面的定位失败，尝试备用定位方式\n                    logger.warning(\"无法使用SVG/use定位方式，尝试备用定位\")\n                    try:\n                        cancel_button = self.driver.find_element(\n                            By.XPATH,\n                            \"//span[@class='ant-tree-title']/span[text()='庭审笔录1']/following-sibling::*[1]\"\n                        )\n                        cancel_button.click()\n                    except:\n                        logger.error(\"未能找到取消设置按钮\")\n                        raise\n    \n                time.sleep(1)\n    \n                # 点击确定取消设置\n                logger.info(\"点击确定取消设置\")\n>               confirm_cancel_button = self.wait.until(\n                    EC.element_to_be_clickable(self.confirm_cancel_button)\n                )\n\nAssistedG.py:213: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"04a5f2b8189a332b3e96b5e04f4e15cc\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000018748626940>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6234ADF85+26693]\nE       \t(No symbol) [0x00007FF62340EAD0]\nE       \t(No symbol) [0x00007FF6232991CA]\nE       \t(No symbol) [0x00007FF6232EF747]\nE       \t(No symbol) [0x00007FF6232EF97C]\nE       \t(No symbol) [0x00007FF6233433C7]\nE       \t(No symbol) [0x00007FF62331792F]\nE       \t(No symbol) [0x00007FF6233400B8]\nE       \t(No symbol) [0x00007FF6233176C3]\nE       \t(No symbol) [0x00007FF6232E0490]\nE       \t(No symbol) [0x00007FF6232E1743]\nE       \tGetHandleVerifier [0x00007FF62380436D+3525677]\nE       \tGetHandleVerifier [0x00007FF623817F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF62380CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF623577C0A+853194]\nE       \t(No symbol) [0x00007FF62341990F]\nE       \t(No symbol) [0x00007FF623415674]\nE       \t(No symbol) [0x00007FF623415816]\nE       \t(No symbol) [0x00007FF623404D89]\nE       \tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "description": "测试辅助阅卷流程", "steps": [{"name": "登录系统", "status": "passed", "attachments": [{"name": "login_success", "source": "14e91788-f6a8-4e53-862b-e923aa1ea0c7-attachment.png", "type": "image/png"}], "start": 1743042780176, "stop": 1743042792257}, {"name": "点击辅助阅卷", "status": "passed", "attachments": [{"name": "auxiliary_reading_clicked", "source": "1f41f8ee-6f20-4175-8659-de61be0559e2-attachment.png", "type": "image/png"}], "start": 1743042792258, "stop": 1743042794411}, {"name": "点击庭审笔录1", "status": "passed", "start": 1743042794411, "stop": 1743042795493}, {"name": "点击设为庭审笔录", "status": "passed", "start": 1743042795493, "stop": 1743042796622}, {"name": "输入原告处理意见1", "status": "passed", "start": 1743042796622, "stop": 1743042797737}, {"name": "输入原告处理意见2", "status": "passed", "start": 1743042797737, "stop": 1743042798833}, {"name": "点击确定按钮", "status": "passed", "attachments": [{"name": "test_complete", "source": "03f2b873-2189-46d0-aece-10841d85da6c-attachment.png", "type": "image/png"}], "start": 1743042798833, "stop": 1743042801163}, {"name": "取消设置庭审笔录", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF6234ADF85+26693]\n\t(No symbol) [0x00007FF62340EAD0]\n\t(No symbol) [0x00007FF6232991CA]\n\t(No symbol) [0x00007FF6232EF747]\n\t(No symbol) [0x00007FF6232EF97C]\n\t(No symbol) [0x00007FF6233433C7]\n\t(No symbol) [0x00007FF62331792F]\n\t(No symbol) [0x00007FF6233400B8]\n\t(No symbol) [0x00007FF6233176C3]\n\t(No symbol) [0x00007FF6232E0490]\n\t(No symbol) [0x00007FF6232E1743]\n\tGetHandleVerifier [0x00007FF62380436D+3525677]\n\tGetHandleVerifier [0x00007FF623817F3B+3606523]\n\tGetHandleVerifier [0x00007FF62380CEE3+3561379]\n\tGetHandleVerifier [0x00007FF623577C0A+853194]\n\t(No symbol) [0x00007FF62341990F]\n\t(No symbol) [0x00007FF623415674]\n\t(No symbol) [0x00007FF623415816]\n\t(No symbol) [0x00007FF623404D89]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\n", "trace": "  File \"E:\\AutoTest\\FgAI\\test_001\\AssistedG.py\", line 213, in test_assisted_reading\n    confirm_cancel_button = self.wait.until(\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1743042801163, "stop": 1743042823410}], "attachments": [{"name": "test_failed", "source": "ba21461e-a33f-49c8-9535-fe08326c507d-attachment.png", "type": "image/png"}, {"name": "log", "source": "6d647ec8-e00f-46c4-9a18-c144f016b7ad-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "80da48ca-a5e6-4306-8be3-4ec1475e7ce8-attachment.txt", "type": "text/plain"}], "start": 1743042780176, "stop": 1743042823632, "uuid": "68142563-759b-43ca-8a77-c635912e8060", "historyId": "bcbc7cf4b4f79be87767f13c16480802", "testCaseId": "bcbc7cf4b4f79be87767f13c16480802", "fullName": "test_001.AssistedG.TestAssistedReading#test_assisted_reading", "labels": [{"name": "epic", "value": "FGAI自动化测试"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "辅助阅卷流程"}, {"name": "feature", "value": "辅助阅卷"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "AssistedG"}, {"name": "subSuite", "value": "TestAssistedReading"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "18972-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.AssistedG"}]}