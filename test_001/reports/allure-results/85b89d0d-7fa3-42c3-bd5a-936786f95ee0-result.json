{"name": "测试文本选择和格式化", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: Failed to execute 'surroundContents' on 'Range': The Range has partially selected a non-Text node.\n  (Session info: chrome=135.0.7049.85)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C1FBDF85+26693]\n\t(No symbol) [0x00007FF6C1F1EAD0]\n\t(No symbol) [0x00007FF6C1DA91CA]\n\t(No symbol) [0x00007FF6C1DB0B2C]\n\t(No symbol) [0x00007FF6C1DB3C8C]\n\t(No symbol) [0x00007FF6C1E513F2]\n\t(No symbol) [0x00007FF6C1E278EA]\n\t(No symbol) [0x00007FF6C1E500B8]\n\t(No symbol) [0x00007FF6C1E276C3]\n\t(No symbol) [0x00007FF6C1DF0490]\n\t(No symbol) [0x00007FF6C1DF1743]\n\tGetHandleVerifier [0x00007FF6C231436D+3525677]\n\tGetHandleVerifier [0x00007FF6C2327F3B+3606523]\n\tGetHandleVerifier [0x00007FF6C231CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6C2087C0A+853194]\n\t(No symbol) [0x00007FF6C1F2990F]\n\t(No symbol) [0x00007FF6C1F25674]\n\t(No symbol) [0x00007FF6C1F25816]\n\t(No symbol) [0x00007FF6C1F14D89]\n\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\n\tRtlUserThreadStart [0x00007FF9825514FC+44]", "trace": "self = <FgAI.test_001.test_read_notes.TestReadNotes object at 0x00000248DF2EF6D0>\n\n    @allure.story(\"文本格式化功能\")\n    @allure.title(\"测试文本选择和格式化\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.flaky(reruns=2, reruns_delay=2)\n    def test_format_selected_text(self):\n        \"\"\"\n        测试文本格式化功能：\n        1. 使用JavaScript选中文本\n        2. 更改字体为楷体\n        3. 更改字号为二号\n        4. 设置行高为1.75\n        5. 设置加粗和斜体\n        6. 保存更改\n        7. 清除格式\n        8，再次保存\n        \"\"\"\n        logger.info(\"开始测试文本格式化功能...\")\n        try:\n            with allure.step(\"选中文本并执行格式化\"):\n>               self.read_notes.format_selected_text()\n\ntest_read_notes.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\read_notes_utils.py:379: in format_selected_text\n    self.driver.execute_script(verify_background_script)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:528: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000248DF2EF670>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: Failed to ...07FF6C1F14D89]\\\\n\\\\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF9825514FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: Failed to execute 'surroundContents' on 'Range': The Range has partially selected a non-Text node.\nE         (Session info: chrome=135.0.7049.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C1FBDF85+26693]\nE       \t(No symbol) [0x00007FF6C1F1EAD0]\nE       \t(No symbol) [0x00007FF6C1DA91CA]\nE       \t(No symbol) [0x00007FF6C1DB0B2C]\nE       \t(No symbol) [0x00007FF6C1DB3C8C]\nE       \t(No symbol) [0x00007FF6C1E513F2]\nE       \t(No symbol) [0x00007FF6C1E278EA]\nE       \t(No symbol) [0x00007FF6C1E500B8]\nE       \t(No symbol) [0x00007FF6C1E276C3]\nE       \t(No symbol) [0x00007FF6C1DF0490]\nE       \t(No symbol) [0x00007FF6C1DF1743]\nE       \tGetHandleVerifier [0x00007FF6C231436D+3525677]\nE       \tGetHandleVerifier [0x00007FF6C2327F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF6C231CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF6C2087C0A+853194]\nE       \t(No symbol) [0x00007FF6C1F2990F]\nE       \t(No symbol) [0x00007FF6C1F25674]\nE       \t(No symbol) [0x00007FF6C1F25816]\nE       \t(No symbol) [0x00007FF6C1F14D89]\nE       \tBaseThreadInitThunk [0x00007FF98108E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF9825514FC+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException"}, "description": "\n        测试文本格式化功能：\n        1. 使用JavaScript选中文本\n        2. 更改字体为楷体\n        3. 更改字号为二号\n        4. 设置行高为1.75\n        5. 设置加粗和斜体\n        6. 保存更改\n        7. 清除格式\n        8，再次保存\n        ", "steps": [{"name": "选中文本并执行格式化", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: Failed to execute 'surroundContents' on 'Range': The Range has partially selected a non-Text node.\n  (Session info: chrome=135.0.7049.85)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C1FBDF85+26693]\n\t(No symbol) [0x00007FF6C1F1EAD0]\n\t(No symbol) [0x00007FF6C1DA91CA]\n\t(No symbol) [0x00007FF6C1DB0B2C]\n\t(No symbol) [0x00007FF6C1DB3C8C]\n\t(No symbol) [0x00007FF6C1E513F2]\n\t(No symbol) [0x00007FF6C1E278EA]\n\t(No symbol) [0x00007FF6C1E500B8]\n\t(No symbol) [0x00007FF6C1E276C3]\n\t(No symbol) [0x00007FF6C1DF0490]\n\t(No symbol) [0x00007FF6C1DF1743]\n\tGetHandleVerifier [0x00007FF6C231436D+3525677]\n\tGetHandleVerifier [0x00007FF6C2327F3B+3606523]\n\tGetHandleVerifier [0x00007FF6C231CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6C2087C0A+853194]\n\t(No symbol) [0x00007FF6C1F2990F]\n\t(No symbol) [0x00007FF6C1F25674]\n\t(No symbol) [0x00007FF6C1F25816]\n\t(No symbol) [0x00007FF6C1F14D89]\n\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\n\tRtlUserThreadStart [0x00007FF9825514FC+44]\n\n", "trace": "  File \"E:\\AutoTest\\FgAI\\test_001\\test_read_notes.py\", line 167, in test_format_selected_text\n    self.read_notes.format_selected_text()\n  File \"D:\\Python39\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"E:\\AutoTest\\FgAI\\common\\read_notes_utils.py\", line 379, in format_selected_text\n    self.driver.execute_script(verify_background_script)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 528, in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "执行文本格式化操作", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: Failed to execute 'surroundContents' on 'Range': The Range has partially selected a non-Text node.\n  (Session info: chrome=135.0.7049.85)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C1FBDF85+26693]\n\t(No symbol) [0x00007FF6C1F1EAD0]\n\t(No symbol) [0x00007FF6C1DA91CA]\n\t(No symbol) [0x00007FF6C1DB0B2C]\n\t(No symbol) [0x00007FF6C1DB3C8C]\n\t(No symbol) [0x00007FF6C1E513F2]\n\t(No symbol) [0x00007FF6C1E278EA]\n\t(No symbol) [0x00007FF6C1E500B8]\n\t(No symbol) [0x00007FF6C1E276C3]\n\t(No symbol) [0x00007FF6C1DF0490]\n\t(No symbol) [0x00007FF6C1DF1743]\n\tGetHandleVerifier [0x00007FF6C231436D+3525677]\n\tGetHandleVerifier [0x00007FF6C2327F3B+3606523]\n\tGetHandleVerifier [0x00007FF6C231CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6C2087C0A+853194]\n\t(No symbol) [0x00007FF6C1F2990F]\n\t(No symbol) [0x00007FF6C1F25674]\n\t(No symbol) [0x00007FF6C1F25816]\n\t(No symbol) [0x00007FF6C1F14D89]\n\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\n\tRtlUserThreadStart [0x00007FF9825514FC+44]\n\n", "trace": "  File \"D:\\Python39\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"E:\\AutoTest\\FgAI\\common\\read_notes_utils.py\", line 379, in format_selected_text\n    self.driver.execute_script(verify_background_script)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 528, in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "attachments": [{"name": "操作失败截图", "source": "03e0701d-1619-46ea-b554-5492e9a26449-attachment.png", "type": "image/png"}], "parameters": [{"name": "text_to_select", "value": "'原告欠款560000元'"}], "start": 1744794177744, "stop": 1744794187238}], "start": 1744794177744, "stop": 1744794187286}], "attachments": [{"name": "log", "source": "20919bb6-530b-4a93-a530-e2e06fe14df8-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "090b9bca-622a-413e-8416-5d3fc77783c6-attachment.txt", "type": "text/plain"}], "start": 1744794177743, "stop": 1744794187288, "uuid": "ea71aac0-30e6-424b-b6ac-c6ad641d5133", "historyId": "11ea29f10876ae296900870ecd96a087", "testCaseId": "11ea29f10876ae296900870ecd96a087", "fullName": "test_001.test_read_notes.TestReadNotes#test_format_selected_text", "labels": [{"name": "epic", "value": "案件管理系统"}, {"name": "feature", "value": "阅卷笔记模块"}, {"name": "severity", "value": "normal"}, {"name": "story", "value": "文本格式化功能"}, {"name": "tag", "value": "flaky(reruns=2, reruns_delay=2)"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_read_notes"}, {"name": "subSuite", "value": "TestReadNotes"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "27232-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_read_notes"}]}