{"name": "辅助阅卷测试", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\n\t(No symbol) [0x00007FF6F5F4EAD0]\n\t(No symbol) [0x00007FF6F5DD91CA]\n\t(No symbol) [0x00007FF6F5E2F747]\n\t(No symbol) [0x00007FF6F5E2F97C]\n\t(No symbol) [0x00007FF6F5E833C7]\n\t(No symbol) [0x00007FF6F5E5792F]\n\t(No symbol) [0x00007FF6F5E800B8]\n\t(No symbol) [0x00007FF6F5E576C3]\n\t(No symbol) [0x00007FF6F5E20490]\n\t(No symbol) [0x00007FF6F5E21743]\n\tGetHandleVerifier [0x00007FF6F634436D+3525677]\n\tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\n\tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\n\t(No symbol) [0x00007FF6F5F5990F]\n\t(No symbol) [0x00007FF6F5F55674]\n\t(No symbol) [0x00007FF6F5F55816]\n\t(No symbol) [0x00007FF6F5F44D89]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]", "trace": "self = <FgAI.test_001.AssistedG.TestAssistedReading object at 0x000001F14FAAC970>\n\n    @allure.story(\"辅助阅卷流程\")\n    @allure.title(\"辅助阅卷测试\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_assisted_reading(self):\n        \"\"\"测试辅助阅卷流程\"\"\"\n        try:\n            # 1. 登录系统\n            with allure.step(\"登录系统\"):\n                logger.info(\"开始登录系统\")\n                self.login_page.login()\n                time.sleep(2)\n                logger.info(\"登录成功\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"login_success\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取登录成功截图\")\n    \n            # 2. 点击辅助阅卷\n            with allure.step(\"点击辅助阅卷\"):\n                logger.info(\"点击辅助阅卷\")\n                auxiliary_reading = self.wait.until(\n                    EC.element_to_be_clickable(self.auxiliary_reading)\n                )\n                auxiliary_reading.click()\n                time.sleep(2)\n                logger.info(\"步骤1执行成功：点击辅助阅卷\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"auxiliary_reading_clicked\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取辅助阅卷截图\")\n    \n            # 3. 点击庭审笔录1\n            with allure.step(\"点击庭审笔录1\"):\n                logger.info(\"点击庭审笔录1\")\n                court_record = self.wait.until(\n                    EC.element_to_be_clickable(self.court_record)\n                )\n                court_record.click()\n                time.sleep(2)\n                logger.info(\"步骤2执行成功：点击庭审笔录1\")\n    \n            # 4. 点击设为庭审笔录\n            with allure.step(\"点击设为庭审笔录\"):\n                logger.info(\"点击设为庭审笔录\")\n                set_record = self.wait.until(\n                    EC.element_to_be_clickable(self.set_record)\n                )\n                set_record.click()\n                time.sleep(1)\n                logger.info(\"步骤3执行成功：点击设为庭审笔录\")\n    \n            # 5. 输入原告处理意见1\n            with allure.step(\"输入原告处理意见1\"):\n                logger.info(\"输入原告处理意见1\")\n                opinion1 = self.wait.until(\n                    EC.presence_of_element_located(self.opinion1)\n                )\n                opinion1.clear()\n                opinion1.send_keys(\"无意见1\")\n                time.sleep(1)\n                logger.info(\"步骤4执行成功：输入原告处理意见1\")\n    \n            # 6. 输入原告处理意见2\n            with allure.step(\"输入原告处理意见2\"):\n                logger.info(\"输入原告处理意见2\")\n                opinion2 = self.wait.until(\n                    EC.presence_of_element_located(self.opinion2)\n                )\n                opinion2.clear()\n                opinion2.send_keys(\"无意见2\")\n                time.sleep(1)\n                logger.info(\"步骤5执行成功：输入原告处理意见2\")\n    \n            # 7. 点击确定按钮\n            with allure.step(\"点击确定按钮\"):\n                logger.info(\"点击确定按钮\")\n                confirm_button = self.wait.until(\n                    EC.element_to_be_clickable(self.confirm_button)\n                )\n                confirm_button.click()\n                time.sleep(2)\n                logger.info(\"步骤6执行成功：点击确定按钮\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"test_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取完成测试截图\")\n    \n            # 8. 点击取消设置庭审笔录1\n            # with allure.step(\"取消设置庭审笔录\"):\n            #     logger.info(\"点击取消设置庭审笔录\")\n            #\n            #     # 先点击庭审笔录1确保选中\n            #     court_record = self.wait.until(\n            #         EC.element_to_be_clickable(self.court_record)\n            #     )\n            #     court_record.click()\n            #     time.sleep(1)\n            #\n            #     # 找到取消设置按钮并点击\n            #     try:\n            #         # 尝试使用提供的选择器\n            #         cancel_set_record = self.wait.until(\n            #             EC.element_to_be_clickable(self.cancel_set_record)\n            #         )\n            #         cancel_set_record.click()\n            #     except:\n            #         # 如果上面的定位失败，尝试备用定位方式\n            #         logger.warning(\"无法使用SVG/use定位方式，尝试备用定位\")\n            #         try:\n            #             cancel_button = self.driver.find_element(\n            #                 By.XPATH,\n            #                 \"//span[@class='ant-tree-title']/span[text()='庭审笔录1']/following-sibling::*[1]\"\n            #             )\n            #             cancel_button.click()\n            #         except:\n            #             logger.error(\"未能找到取消设置按钮\")\n            #             raise\n            #\n            #     time.sleep(1)\n            #\n            #     # 点击确定取消设置\n            #     logger.info(\"点击确定取消设置\")\n            #     confirm_cancel_button = self.wait.until(\n            #         EC.element_to_be_clickable(self.confirm_cancel_button)\n            #     )\n            #     confirm_cancel_button.click()\n            #     time.sleep(2)\n            #     logger.info(\"步骤7执行成功：取消设置庭审笔录\")\n            #\n            #     try:\n            #         allure.attach(\n            #             self.driver.get_screenshot_as_png(),\n            #             name=\"cancel_set_record_complete\",\n            #             attachment_type=allure.attachment_type.PNG\n            #         )\n            #     except:\n            #         logger.warning(\"无法获取取消设置截图\")\n    \n            # 9. 点击下载笔录\n            with allure.step(\"下载笔录\"):\n                logger.info(\"点击下载按钮\")\n                download_button = self.wait.until(\n                    EC.element_to_be_clickable(self.download_button)\n                )\n                download_button.click()\n                time.sleep(1)\n    \n                # 选择PDF下载选项\n                logger.info(\"选择PDF下载\")\n                pdf_download_option = self.wait.until(\n                    EC.element_to_be_clickable(self.pdf_download_option)\n                )\n                pdf_download_option.click()\n                time.sleep(3)  # 等待下载开始\n                logger.info(\"步骤8执行成功：下载笔录PDF\")\n    \n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"pdf_download_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取PDF下载截图\")\n    \n            # 10. 添加庭审笔录2为证据\n            with allure.step(\"添加庭审笔录2为证据\"):\n                logger.info(\"点击庭审笔录2\")\n    \n                # 先点击庭审笔录2确保选中\n                try:\n                    court_record2 = self.wait.until(\n                        EC.element_to_be_clickable(self.court_record2)\n                    )\n                    court_record2.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击庭审笔录2\")\n                except:\n                    logger.error(\"未找到庭审笔录2\")\n                    raise\n    \n                # 点击添加为证据按钮\n                logger.info(\"点击添加为证据按钮\")\n                try:\n                    add_evidence_button = self.wait.until(\n                        EC.element_to_be_clickable(self.add_evidence_button)\n                    )\n                    add_evidence_button.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击添加为证据按钮\")\n                except:\n                    logger.error(\"未找到添加为证据按钮\")\n                    raise\n    \n                # 点击目录下拉框\n                logger.info(\"点击目录下拉框\")\n                try:\n                    directory_dropdown = self.wait.until(\n                        EC.element_to_be_clickable(self.directory_dropdown)\n                    )\n                    directory_dropdown.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击目录下拉框\")\n                except:\n                    logger.error(\"未找到目录下拉框\")\n                    raise\n    \n                # 选择\"法院材料\"选项\n                logger.info(\"选择法院材料选项\")\n                try:\n                    court_materials_option = self.wait.until(\n                        EC.element_to_be_clickable(self.court_materials_option)\n                    )\n                    court_materials_option.click()\n                    time.sleep(1)\n                    logger.info(\"成功选择法院材料选项\")\n                except:\n                    logger.error(\"未找到法院材料选项\")\n                    raise\n    \n                # 点击确定按钮\n                logger.info(\"点击确定按钮\")\n                try:\n                    confirm_add_evidence = self.wait.until(\n                        EC.element_to_be_clickable(self.confirm_add_evidence)\n                    )\n                    confirm_add_evidence.click()\n                    time.sleep(2)\n                    logger.info(\"步骤9执行成功：添加庭审笔录2为证据\")\n                except:\n                    logger.error(\"未找到确定按钮\")\n                    raise\n    \n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"add_evidence_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取添加证据截图\")\n    \n            # 11. 选择庭审笔录3并添加为证据\n            with allure.step(\"将庭审笔录3添加为证据\"):\n                logger.info(\"选择庭审笔录3\")\n    \n                # 点击庭审笔录3的复选框\n                try:\n                    court_record3_checkbox = self.wait.until(\n                        EC.element_to_be_clickable(self.court_record3_checkbox)\n                    )\n                    court_record3_checkbox.click()\n                    time.sleep(1)\n                    logger.info(\"成功选中庭审笔录3\")\n                except Exception as e:\n                    logger.error(f\"未能选中庭审笔录3: {str(e)}\")\n                    raise\n    \n                # 点击证据添加按钮\n                logger.info(\"点击证据添加按钮\")\n                try:\n                    evidence_add_button = self.wait.until(\n                        EC.element_to_be_clickable(self.evidence_add_button)\n                    )\n                    evidence_add_button.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击证据添加按钮\")\n                except Exception as e:\n                    logger.error(f\"未能点击证据添加按钮: {str(e)}\")\n                    raise\n    \n                # 点击目录下拉框\n                logger.info(\"点击目录下拉框\")\n                try:\n                    directory_dropdown2 = self.wait.until(\n                        EC.element_to_be_clickable(self.directory_dropdown2)\n                    )\n                    directory_dropdown2.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击目录下拉框\")\n                except Exception as e:\n                    logger.error(f\"未能点击目录下拉框: {str(e)}\")\n                    raise\n    \n                # 选择\"上诉人\"选项\n                logger.info(\"选择上诉人选项\")\n                try:\n                    appellant_option = self.wait.until(\n                        EC.element_to_be_clickable(self.appellant_option)\n                    )\n                    appellant_option.click()\n                    time.sleep(1)\n                    logger.info(\"成功选择上诉人选项\")\n                except Exception as e:\n                    logger.error(f\"未能选择上诉人选项: {str(e)}\")\n                    raise\n    \n                # 点击确定按钮\n                logger.info(\"点击确定按钮\")\n                try:\n                    confirm_evidence_button = self.wait.until(\n                        EC.element_to_be_clickable(self.confirm_evidence_button)\n                    )\n                    confirm_evidence_button.click()\n                    time.sleep(2)\n                    logger.info(\"步骤10执行成功：将庭审笔录3添加为证据\")\n                except Exception as e:\n                    logger.error(f\"未能点击确定按钮: {str(e)}\")\n                    raise\n    \n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"add_record3_evidence_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取添加庭审笔录3为证据的截图\")\n    \n            # 12. 证据引用功能\n            with allure.step(\"证据引用功能\"):\n                logger.info(\"点击证据引用标签页\")\n    \n                # 点击证据引用标签页\n                try:\n                    evidence_reference_tab = self.wait.until(\n                        EC.element_to_be_clickable(self.evidence_reference_tab)\n                    )\n                    evidence_reference_tab.click()\n                    time.sleep(2)\n                    logger.info(\"成功点击证据引用标签页\")\n                except Exception as e:\n                    logger.error(f\"未能点击证据引用标签页: {str(e)}\")\n                    raise\n    \n                # 点击刷新按钮\n                logger.info(\"点击刷新按钮\")\n                try:\n                    refresh_button = self.wait.until(\n                        EC.element_to_be_clickable(self.refresh_button)\n                    )\n                    refresh_button.click()\n                    time.sleep(2)\n                    logger.info(\"成功点击刷新按钮\")\n                except Exception as e:\n                    logger.error(f\"未能点击刷新按钮: {str(e)}\")\n                    raise\n    \n                # 点击查看证据笔录详情\n                logger.info(\"点击查看庭审笔录2详情\")\n                try:\n                    evidence_record_detail = self.wait.until(\n                        EC.element_to_be_clickable(self.evidence_record_detail)\n                    )\n                    evidence_record_detail.click()\n                    time.sleep(2)\n                    logger.info(\"成功点击查看庭审笔录2详情\")\n                except Exception as e:\n                    logger.error(f\"未能点击查看庭审笔录2详情: {str(e)}\")\n                    raise\n    \n                # 点击关闭详情\n                logger.info(\"点击关闭详情\")\n                try:\n                    close_detail_button = self.wait.until(\n                        EC.element_to_be_clickable(self.close_detail_button)\n                    )\n                    close_detail_button.click()\n                    time.sleep(2)\n                    logger.info(\"步骤11执行成功：证据引用功能\")\n                except Exception as e:\n                    logger.error(f\"未能点击关闭详情按钮: {str(e)}\")\n                    raise\n    \n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"evidence_reference_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取证据引用功能截图\")\n    \n            # 13. 双屏阅卷功能\n            with allure.step(\"双屏阅卷功能\"):\n                logger.info(\"选择庭审笔录2和庭审笔录3\")\n    \n                # 点击庭审笔录2前面的选择框\n                try:\n                    record2_checkbox = self.wait.until(\n                        EC.element_to_be_clickable(self.record2_checkbox)\n                    )\n                    record2_checkbox.click()\n                    time.sleep(1)\n                    logger.info(\"成功选中庭审笔录2\")\n                except Exception as e:\n                    logger.error(f\"未能选中庭审笔录2: {str(e)}\")\n                    raise\n    \n                # 点击庭审笔录3前面的选择框\n                try:\n                    record3_checkbox = self.wait.until(\n                        EC.element_to_be_clickable(self.record3_checkbox)\n                    )\n                    record3_checkbox.click()\n                    time.sleep(1)\n                    logger.info(\"成功选中庭审笔录3\")\n                except Exception as e:\n                    logger.error(f\"未能选中庭审笔录3: {str(e)}\")\n                    raise\n    \n                # 点击双屏阅卷按钮\n                logger.info(\"点击双屏阅卷按钮\")\n                try:\n                    dual_screen_reading_button = self.wait.until(\n                        EC.element_to_be_clickable(self.dual_screen_reading_button)\n                    )\n                    dual_screen_reading_button.click()\n                    time.sleep(3)  # 等待双屏阅卷界面加载\n                    logger.info(\"成功点击双屏阅卷按钮\")\n                except Exception as e:\n                    logger.error(f\"未能点击双屏阅卷按钮: {str(e)}\")\n                    raise\n    \n                # 查看双屏阅卷内容\n                logger.info(\"查看双屏阅卷内容\")\n                time.sleep(2)  # 留时间查看内容\n    \n                # 点击关闭双屏阅卷\n                logger.info(\"点击关闭双屏阅卷\")\n                try:\n                    close_dual_screen_button = self.wait.until(\n                        EC.element_to_be_clickable(self.close_dual_screen_button)\n                    )\n                    close_dual_screen_button.click()\n                    time.sleep(2)\n                    logger.info(\"步骤12执行成功：双屏阅卷功能\")\n                except Exception as e:\n                    logger.error(f\"未能关闭双屏阅卷: {str(e)}\")\n                    raise\n    \n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"dual_screen_reading_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取双屏阅卷功能截图\")\n    \n            # 13.5 选择上诉人为第三人\n            with allure.step(\"选择上诉人为第三人\"):\n                logger.info(\"点击上诉人选择器\")\n                try:\n                    # 等待页面稳定\n                    time.sleep(2)\n    \n                    # 找到并点击上诉人选择器\n                    appellant_selector = self.wait.until(\n                        EC.element_to_be_clickable(self.appellant_selector)\n                    )\n    \n                    # 滚动到元素以确保可见\n                    self.driver.execute_script(\"arguments[0].scrollIntoView({block: 'center'});\", appellant_selector)\n                    time.sleep(1)\n    \n                    # 尝试点击上诉人选择器\n                    try:\n                        logger.info(\"尝试点击上诉人选择器\")\n                        appellant_selector.click()\n                    except Exception as e:\n                        logger.warning(f\"标准点击上诉人选择器失败: {str(e)}\")\n                        # 尝试JavaScript点击\n                        self.driver.execute_script(\"arguments[0].click();\", appellant_selector)\n                        logger.info(\"使用JavaScript点击上诉人选择器\")\n    \n                    time.sleep(1)\n    \n                    # 找到并点击第三人选项\n                    logger.info(\"查找并点击第三人选项\")\n                    try:\n                        third_party_option = self.driver.find_element(*self.third_party_option)\n                        third_party_option.click()\n                        logger.info(\"成功点击第三人选项\")\n                    except Exception as e:\n                        logger.warning(f\"找不到第三人选项元素: {str(e)}\")\n    \n                        # 尝试通过下拉列表的通用选择器查找第三人选项\n                        # try:\n                        #     # 查找所有下拉选项\n                        #     options = self.driver.find_elements(By.XPATH, \"//div[@class='ant-select-selection__rendered']/div[@title='第三人']\")\n                        #\n                        #     # 遍历查找包含\"第三人\"的选项\n                        #     for option in options:\n                        #         if \"第三人\" in option.text:\n                        #             logger.info(f\"找到匹配的选项: {option.text}\")\n                        #             option.click()\n                        #             logger.info(\"成功选择第三人选项\")\n                        #             break\n                        # except Exception as e:\n                        #     logger.warning(f\"通过通用选择器查找第三人选项失败: {str(e)}\")\n                        #\n                        #     # 最后尝试直接使用JavaScript选择第三人\n                        #     try:\n                        #         self.driver.execute_script(\"\"\"\n                        #             var options = document.querySelectorAll('li.ant-select-dropdown-menu-item');\n                        #             for (var i = 0; i < options.length; i++) {\n                        #                 if (options[i].textContent.includes('第三人')) {\n                        #                     options[i].click();\n                        #                     break;\n                        #                 }\n                        #             }\n                        #         \"\"\")\n                        #         logger.info(\"通过JavaScript尝试选择第三人选项\")\n                        #     except Exception as e:\n                        #         logger.warning(f\"JavaScript选择第三人选项失败: {str(e)}\")\n    \n                    time.sleep(2)\n                    logger.info(\"步骤13.5执行成功：选择上诉人为第三人\")\n    \n                    # 截图记录当前状态\n                    try:\n                        allure.attach(\n                            self.driver.get_screenshot_as_png(),\n                            name=\"select_third_party_complete\",\n                            attachment_type=allure.attachment_type.PNG\n                        )\n                    except:\n                        logger.warning(\"无法获取选择第三人的截图\")\n    \n                except Exception as e:\n                    logger.warning(f\"选择上诉人为第三人失败，但继续执行: {str(e)}\")\n                    # 记录页面状态以便调试\n                    try:\n                        self.driver.save_screenshot(\"select_third_party_failed.png\")\n                        logger.info(\"已保存选择第三人失败时的截图\")\n                    except:\n                        pass\n                # 点击刷新按钮\n                logger.info(\"点击刷新按钮\")\n                try:\n                    refresh_button = self.wait.until(\n                        EC.element_to_be_clickable(self.refresh_button)\n                    )\n                    refresh_button.click()\n                    time.sleep(2)\n                    logger.info(\"成功点击刷新按钮\")\n                except Exception as e:\n                    logger.error(f\"未能点击刷新按钮: {str(e)}\")\n                    raise\n    \n                # 点击庭审笔录3前面的选择框\n                try:\n>                   record3_checkbox = self.wait.until(\n                        EC.element_to_be_clickable(self.record3_checkbox)\n                    )\n\nAssistedG.py:784: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8ebeb521225f0a40143225983a8ee4b2\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001F14FA26940>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\nE       \t(No symbol) [0x00007FF6F5F4EAD0]\nE       \t(No symbol) [0x00007FF6F5DD91CA]\nE       \t(No symbol) [0x00007FF6F5E2F747]\nE       \t(No symbol) [0x00007FF6F5E2F97C]\nE       \t(No symbol) [0x00007FF6F5E833C7]\nE       \t(No symbol) [0x00007FF6F5E5792F]\nE       \t(No symbol) [0x00007FF6F5E800B8]\nE       \t(No symbol) [0x00007FF6F5E576C3]\nE       \t(No symbol) [0x00007FF6F5E20490]\nE       \t(No symbol) [0x00007FF6F5E21743]\nE       \tGetHandleVerifier [0x00007FF6F634436D+3525677]\nE       \tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\nE       \t(No symbol) [0x00007FF6F5F5990F]\nE       \t(No symbol) [0x00007FF6F5F55674]\nE       \t(No symbol) [0x00007FF6F5F55816]\nE       \t(No symbol) [0x00007FF6F5F44D89]\nE       \tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "description": "测试辅助阅卷流程", "steps": [{"name": "登录系统", "status": "passed", "attachments": [{"name": "login_success", "source": "6220a3f1-4b0e-4eec-84fa-f9bcddbafc12-attachment.png", "type": "image/png"}], "start": 1743073472734, "stop": 1743073484525}, {"name": "点击辅助阅卷", "status": "passed", "attachments": [{"name": "auxiliary_reading_clicked", "source": "2b4319a1-9f36-4e36-b5f0-7f654d45c8e6-attachment.png", "type": "image/png"}], "start": 1743073484525, "stop": 1743073486674}, {"name": "点击庭审笔录1", "status": "passed", "start": 1743073486674, "stop": 1743073488783}, {"name": "点击设为庭审笔录", "status": "passed", "start": 1743073488783, "stop": 1743073489914}, {"name": "输入原告处理意见1", "status": "passed", "start": 1743073489914, "stop": 1743073491012}, {"name": "输入原告处理意见2", "status": "passed", "start": 1743073491012, "stop": 1743073492125}, {"name": "点击确定按钮", "status": "passed", "attachments": [{"name": "test_complete", "source": "ceac4b32-480a-4a9c-8393-952e24aa751c-attachment.png", "type": "image/png"}], "start": 1743073492125, "stop": 1743073494425}, {"name": "下载笔录", "status": "passed", "attachments": [{"name": "pdf_download_complete", "source": "e568d816-3600-48e0-b4df-65d8a4d9800b-attachment.png", "type": "image/png"}], "start": 1743073494425, "stop": 1743073498771}, {"name": "添加庭审笔录2为证据", "status": "passed", "attachments": [{"name": "add_evidence_complete", "source": "4bf9e562-ca4d-43b1-b580-40725c2f1af3-attachment.png", "type": "image/png"}], "start": 1743073498771, "stop": 1743073505403}, {"name": "将庭审笔录3添加为证据", "status": "passed", "attachments": [{"name": "add_record3_evidence_complete", "source": "819fb347-c22f-49ff-9768-f20f4c0fe597-attachment.png", "type": "image/png"}], "start": 1743073505403, "stop": 1743073512026}, {"name": "证据引用功能", "status": "passed", "attachments": [{"name": "evidence_reference_complete", "source": "fa54b90e-c867-4be8-922f-fc3996a24c5e-attachment.png", "type": "image/png"}], "start": 1743073512026, "stop": 1743073520444}, {"name": "双屏阅卷功能", "status": "passed", "attachments": [{"name": "dual_screen_reading_complete", "source": "4cc17309-078b-4739-8f2a-58ee4462f2d9-attachment.png", "type": "image/png"}], "start": 1743073520444, "stop": 1743073529825}, {"name": "选择上诉人为第三人", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\n\t(No symbol) [0x00007FF6F5F4EAD0]\n\t(No symbol) [0x00007FF6F5DD91CA]\n\t(No symbol) [0x00007FF6F5E2F747]\n\t(No symbol) [0x00007FF6F5E2F97C]\n\t(No symbol) [0x00007FF6F5E833C7]\n\t(No symbol) [0x00007FF6F5E5792F]\n\t(No symbol) [0x00007FF6F5E800B8]\n\t(No symbol) [0x00007FF6F5E576C3]\n\t(No symbol) [0x00007FF6F5E20490]\n\t(No symbol) [0x00007FF6F5E21743]\n\tGetHandleVerifier [0x00007FF6F634436D+3525677]\n\tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\n\tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\n\t(No symbol) [0x00007FF6F5F5990F]\n\t(No symbol) [0x00007FF6F5F55674]\n\t(No symbol) [0x00007FF6F5F55816]\n\t(No symbol) [0x00007FF6F5F44D89]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\n", "trace": "  File \"E:\\AutoTest\\FgAI\\test_001\\AssistedG.py\", line 784, in test_assisted_reading\n    record3_checkbox = self.wait.until(\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "attachments": [{"name": "select_third_party_complete", "source": "aae821c3-b223-49a4-a972-dfa03c639344-attachment.png", "type": "image/png"}], "start": 1743073529825, "stop": 1743073548202}], "attachments": [{"name": "test_failed", "source": "0e994c66-51ef-4d1f-892d-25abe03b028e-attachment.png", "type": "image/png"}, {"name": "log", "source": "5b997fbe-8844-4b35-ad53-c63e6319796c-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "fa1fe85b-115a-4632-a331-0da2b788cb7e-attachment.txt", "type": "text/plain"}], "start": 1743073472734, "stop": 1743073548283, "uuid": "8143043a-5881-44ea-a38c-e7f9bf14bf39", "historyId": "bcbc7cf4b4f79be87767f13c16480802", "testCaseId": "bcbc7cf4b4f79be87767f13c16480802", "fullName": "test_001.AssistedG.TestAssistedReading#test_assisted_reading", "labels": [{"name": "story", "value": "辅助阅卷流程"}, {"name": "feature", "value": "辅助阅卷"}, {"name": "epic", "value": "FGAI自动化测试"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "AssistedG"}, {"name": "subSuite", "value": "TestAssistedReading"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "10956-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.AssistedG"}]}