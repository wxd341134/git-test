{"name": "test_personal_center_workflow", "status": "broken", "statusDetails": {"message": "Exception: 登录过程失败: 登录超时，未检测到用户信息", "trace": "self = <pages.login_page.LoginPage object at 0x000002A283A2BB50>\nusername = 'wxdfg', password = 'wxd341134@'\n\n    def login(self, username=\"wxdfg\", password=\"wxd341134@\"):\n        \"\"\"执行登录操作\"\"\"\n        try:\n            # 打开登录页面\n            self.open_login_page()\n    \n            # 输入用户名\n            logger.info(f\"开始输入用户名: {username}\")\n            try:\n                username_element = self.wait.until(\n                    EC.element_to_be_clickable(self.username_input)\n                )\n                username_element.clear()\n                username_element.send_keys(username)\n                logger.info(\"用户名输入完成\")\n            except Exception as e:\n                self.handle_error(f\"用户名输入失败: {str(e)}\")\n    \n            # 输入密码\n            logger.info(\"开始输入密码\")\n            try:\n                password_element = self.wait.until(\n                    EC.element_to_be_clickable(self.password_input)\n                )\n                password_element.clear()\n                password_element.send_keys(password)\n                logger.info(\"密码输入完成\")\n            except Exception as e:\n                self.handle_error(f\"密码输入失败: {str(e)}\")\n    \n            # 处理验证码\n            if not self.wait_for_verify_code():\n                self.handle_error(\"验证码处理失败\")\n    \n            # 点击登录按钮\n            logger.info(\"尝试点击登录按钮\")\n            try:\n                login_button = self.wait.until(\n                    EC.element_to_be_clickable(self.login_button)\n                )\n    \n                try:\n                    login_button.click()\n                except:\n                    self.driver.execute_script(\"arguments[0].click();\", login_button)\n    \n                logger.info(\"登录按钮点击成功\")\n            except Exception as e:\n                self.handle_error(f\"登录按钮点击失败: {str(e)}\")\n    \n            # 等待用户信息元素出现\n            logger.info(\"等待用户信息元素出现\")\n            try:\n>               user_info = WebDriverWait(self.driver, 30).until(\n                    EC.presence_of_element_located(self.user_info)\n                )\n\n..\\pages\\login_page.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"821f60f8c9af1d50f7f5144bdb3ef37b\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000002A2838C69D0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF663CBDF85+26693]\nE       \t(No symbol) [0x00007FF663C1EAD0]\nE       \t(No symbol) [0x00007FF663AA91CA]\nE       \t(No symbol) [0x00007FF663AFF747]\nE       \t(No symbol) [0x00007FF663AFF97C]\nE       \t(No symbol) [0x00007FF663B533C7]\nE       \t(No symbol) [0x00007FF663B2792F]\nE       \t(No symbol) [0x00007FF663B500B8]\nE       \t(No symbol) [0x00007FF663B276C3]\nE       \t(No symbol) [0x00007FF663AF0490]\nE       \t(No symbol) [0x00007FF663AF1743]\nE       \tGetHandleVerifier [0x00007FF66401436D+3525677]\nE       \tGetHandleVerifier [0x00007FF664027F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF66401CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF663D87C0A+853194]\nE       \t(No symbol) [0x00007FF663C2990F]\nE       \t(No symbol) [0x00007FF663C25674]\nE       \t(No symbol) [0x00007FF663C25816]\nE       \t(No symbol) [0x00007FF663C14D89]\nE       \tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pages.login_page.LoginPage object at 0x000002A283A2BB50>\nusername = 'wxdfg', password = 'wxd341134@'\n\n    def login(self, username=\"wxdfg\", password=\"wxd341134@\"):\n        \"\"\"执行登录操作\"\"\"\n        try:\n            # 打开登录页面\n            self.open_login_page()\n    \n            # 输入用户名\n            logger.info(f\"开始输入用户名: {username}\")\n            try:\n                username_element = self.wait.until(\n                    EC.element_to_be_clickable(self.username_input)\n                )\n                username_element.clear()\n                username_element.send_keys(username)\n                logger.info(\"用户名输入完成\")\n            except Exception as e:\n                self.handle_error(f\"用户名输入失败: {str(e)}\")\n    \n            # 输入密码\n            logger.info(\"开始输入密码\")\n            try:\n                password_element = self.wait.until(\n                    EC.element_to_be_clickable(self.password_input)\n                )\n                password_element.clear()\n                password_element.send_keys(password)\n                logger.info(\"密码输入完成\")\n            except Exception as e:\n                self.handle_error(f\"密码输入失败: {str(e)}\")\n    \n            # 处理验证码\n            if not self.wait_for_verify_code():\n                self.handle_error(\"验证码处理失败\")\n    \n            # 点击登录按钮\n            logger.info(\"尝试点击登录按钮\")\n            try:\n                login_button = self.wait.until(\n                    EC.element_to_be_clickable(self.login_button)\n                )\n    \n                try:\n                    login_button.click()\n                except:\n                    self.driver.execute_script(\"arguments[0].click();\", login_button)\n    \n                logger.info(\"登录按钮点击成功\")\n            except Exception as e:\n                self.handle_error(f\"登录按钮点击失败: {str(e)}\")\n    \n            # 等待用户信息元素出现\n            logger.info(\"等待用户信息元素出现\")\n            try:\n                user_info = WebDriverWait(self.driver, 30).until(\n                    EC.presence_of_element_located(self.user_info)\n                )\n                logger.info(\"登录成功，用户信息已检测到\")\n                return True\n            except TimeoutException:\n>               self.handle_error(\"登录超时，未检测到用户信息\")\n\n..\\pages\\login_page.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x000002A283A2BB50>\nerror_msg = '登录超时，未检测到用户信息', take_screenshot = True\n\n    def handle_error(self, error_msg, take_screenshot=True):\n        \"\"\"统一的错误处理方法\"\"\"\n        logger.error(error_msg)\n        if take_screenshot:\n            try:\n                allure.attach(\n                    self.driver.get_screenshot_as_png(),\n                    name=\"error_screenshot\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n            except:\n                logger.error(\"无法截图\")\n        # 关闭浏览器\n        try:\n            DriverManager.quit_driver()\n        except:\n            pass\n>       raise Exception(error_msg)\nE       Exception: 登录超时，未检测到用户信息\n\n..\\pages\\login_page.py:43: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <FgAI.test_001.test_UserCenter.TestPersonalCenter object at 0x000002A2839BAB50>\n\n    @allure.feature(\"个人中心\")\n    @allure.story(\"完整测试流程\")\n    def test_personal_center_workflow(self):\n        \"\"\"测试个人中心完整流程\"\"\"\n        try:\n            # 登录\n            self.base_page = BasePage(self.driver)\n            self.login_page = LoginPage(self.driver)\n            # 执行登录\n>           assert self.login_page.login(\"wxdfg\", \"wxd341134@\"), \"登录失败\"\n\ntest_UserCenter.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\login_page.py:173: in login\n    self.handle_error(f\"登录过程失败: {str(e)}\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x000002A283A2BB50>\nerror_msg = '登录过程失败: 登录超时，未检测到用户信息', take_screenshot = True\n\n    def handle_error(self, error_msg, take_screenshot=True):\n        \"\"\"统一的错误处理方法\"\"\"\n        logger.error(error_msg)\n        if take_screenshot:\n            try:\n                allure.attach(\n                    self.driver.get_screenshot_as_png(),\n                    name=\"error_screenshot\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n            except:\n                logger.error(\"无法截图\")\n        # 关闭浏览器\n        try:\n            DriverManager.quit_driver()\n        except:\n            pass\n>       raise Exception(error_msg)\nE       Exception: 登录过程失败: 登录超时，未检测到用户信息\n\n..\\pages\\login_page.py:43: Exception"}, "description": "测试个人中心完整流程", "attachments": [{"name": "error_screenshot", "source": "b71cc1f4-048b-4b72-8fd8-adde11ee9592-attachment.png", "type": "image/png"}, {"name": "error_screenshot", "source": "0d9b8431-6333-470a-a304-c6872ab21590-attachment.png", "type": "image/png"}, {"name": "失败截图", "source": "b9c17c98-73fc-4b41-bfbd-d323c40657e6-attachment.png", "type": "image/png"}, {"name": "log", "source": "96d0dc90-94a3-4f64-ba7f-6f9223b80f74-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "902558d8-15be-4f85-a8c6-1fca24be606c-attachment.txt", "type": "text/plain"}], "start": 1742968848989, "stop": 1742968890232, "uuid": "dcce5f58-d775-4635-8e88-84d38f126f48", "historyId": "1411408b10fd896b372e133dea5137f8", "testCaseId": "1411408b10fd896b372e133dea5137f8", "fullName": "test_001.test_UserCenter.TestPersonalCenter#test_personal_center_workflow", "labels": [{"name": "story", "value": "完整测试流程"}, {"name": "feature", "value": "个人中心"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_UserCenter"}, {"name": "subSuite", "value": "TestPersonalCenter"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "25512-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_UserCenter"}]}