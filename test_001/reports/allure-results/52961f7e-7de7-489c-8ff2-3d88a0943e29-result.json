{"name": "辅助阅卷测试", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <FgAI.test_001.AssistedG.TestAssistedReading object at 0x00000220F2AE14F0>\n\n    @allure.story(\"辅助阅卷流程\")\n    @allure.title(\"辅助阅卷测试\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_assisted_reading(self):\n        \"\"\"测试辅助阅卷流程\"\"\"\n        try:\n            # 1. 登录系统\n            with allure.step(\"登录系统\"):\n                logger.info(\"开始登录系统\")\n                self.login_page.login()\n                time.sleep(2)\n                logger.info(\"登录成功\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"login_success\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取登录成功截图\")\n    \n            # 2. 点击辅助阅卷\n            with allure.step(\"点击辅助阅卷\"):\n                logger.info(\"点击辅助阅卷\")\n                auxiliary_reading = self.wait.until(\n                    EC.element_to_be_clickable(self.auxiliary_reading)\n                )\n                auxiliary_reading.click()\n                time.sleep(2)\n                logger.info(\"步骤1执行成功：点击辅助阅卷\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"auxiliary_reading_clicked\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取辅助阅卷截图\")\n    \n            # 3. 点击庭审笔录1\n            with allure.step(\"点击庭审笔录1\"):\n                logger.info(\"点击庭审笔录1\")\n                court_record = self.wait.until(\n                    EC.element_to_be_clickable(self.court_record)\n                )\n                court_record.click()\n                time.sleep(2)\n                logger.info(\"步骤2执行成功：点击庭审笔录1\")\n    \n            # 4. 点击设为庭审笔录\n            with allure.step(\"点击设为庭审笔录\"):\n                logger.info(\"点击设为庭审笔录\")\n                set_record = self.wait.until(\n                    EC.element_to_be_clickable(self.set_record)\n                )\n                set_record.click()\n                time.sleep(1)\n                logger.info(\"步骤3执行成功：点击设为庭审笔录\")\n    \n            # 5. 输入原告处理意见1\n            with allure.step(\"输入原告处理意见1\"):\n                logger.info(\"输入原告处理意见1\")\n                opinion1 = self.wait.until(\n                    EC.presence_of_element_located(self.opinion1)\n                )\n                opinion1.clear()\n                opinion1.send_keys(\"无意见1\")\n                time.sleep(1)\n                logger.info(\"步骤4执行成功：输入原告处理意见1\")\n    \n            # 6. 输入原告处理意见2\n            with allure.step(\"输入原告处理意见2\"):\n                logger.info(\"输入原告处理意见2\")\n                opinion2 = self.wait.until(\n                    EC.presence_of_element_located(self.opinion2)\n                )\n                opinion2.clear()\n                opinion2.send_keys(\"无意见2\")\n                time.sleep(1)\n                logger.info(\"步骤5执行成功：输入原告处理意见2\")\n    \n            # 7. 点击确定按钮\n            with allure.step(\"点击确定按钮\"):\n                logger.info(\"点击确定按钮\")\n                confirm_button = self.wait.until(\n                    EC.element_to_be_clickable(self.confirm_button)\n                )\n                confirm_button.click()\n                time.sleep(2)\n                logger.info(\"步骤6执行成功：点击确定按钮\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"test_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取完成测试截图\")\n    \n            # 8. 点击取消设置庭审笔录1\n            # with allure.step(\"取消设置庭审笔录\"):\n            #     logger.info(\"点击取消设置庭审笔录\")\n            #\n            #     # 先点击庭审笔录1确保选中\n            #     court_record = self.wait.until(\n            #         EC.element_to_be_clickable(self.court_record)\n            #     )\n            #     court_record.click()\n            #     time.sleep(1)\n            #\n            #     # 找到取消设置按钮并点击\n            #     try:\n            #         # 尝试使用提供的选择器\n            #         cancel_set_record = self.wait.until(\n            #             EC.element_to_be_clickable(self.cancel_set_record)\n            #         )\n            #         cancel_set_record.click()\n            #     except:\n            #         # 如果上面的定位失败，尝试备用定位方式\n            #         logger.warning(\"无法使用SVG/use定位方式，尝试备用定位\")\n            #         try:\n            #             cancel_button = self.driver.find_element(\n            #                 By.XPATH,\n            #                 \"//span[@class='ant-tree-title']/span[text()='庭审笔录1']/following-sibling::*[1]\"\n            #             )\n            #             cancel_button.click()\n            #         except:\n            #             logger.error(\"未能找到取消设置按钮\")\n            #             raise\n            #\n            #     time.sleep(1)\n            #\n            #     # 点击确定取消设置\n            #     logger.info(\"点击确定取消设置\")\n            #     confirm_cancel_button = self.wait.until(\n            #         EC.element_to_be_clickable(self.confirm_cancel_button)\n            #     )\n            #     confirm_cancel_button.click()\n            #     time.sleep(2)\n            #     logger.info(\"步骤7执行成功：取消设置庭审笔录\")\n            #\n            #     try:\n            #         allure.attach(\n            #             self.driver.get_screenshot_as_png(),\n            #             name=\"cancel_set_record_complete\",\n            #             attachment_type=allure.attachment_type.PNG\n            #         )\n            #     except:\n            #         logger.warning(\"无法获取取消设置截图\")\n    \n            # 9. 点击下载笔录\n            with allure.step(\"下载笔录\"):\n                logger.info(\"点击下载按钮\")\n                download_button = self.wait.until(\n                    EC.element_to_be_clickable(self.download_button)\n                )\n                download_button.click()\n                time.sleep(1)\n    \n                # 选择PDF下载选项\n                logger.info(\"选择PDF下载\")\n                pdf_download_option = self.wait.until(\n                    EC.element_to_be_clickable(self.pdf_download_option)\n                )\n                pdf_download_option.click()\n                time.sleep(3)  # 等待下载开始\n                logger.info(\"步骤8执行成功：下载笔录PDF\")\n    \n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"pdf_download_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取PDF下载截图\")\n    \n            # 10. 添加庭审笔录2为证据\n            with allure.step(\"添加庭审笔录2为证据\"):\n                logger.info(\"点击庭审笔录2\")\n    \n                # 先点击庭审笔录2确保选中\n                try:\n                    court_record2 = self.wait.until(\n                        EC.element_to_be_clickable(self.court_record2)\n                    )\n                    court_record2.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击庭审笔录2\")\n                except:\n                    logger.error(\"未找到庭审笔录2\")\n                    raise\n    \n                # 点击添加为证据按钮\n                logger.info(\"点击添加为证据按钮\")\n                try:\n                    add_evidence_button = self.wait.until(\n                        EC.element_to_be_clickable(self.add_evidence_button)\n                    )\n                    add_evidence_button.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击添加为证据按钮\")\n                except:\n                    logger.error(\"未找到添加为证据按钮\")\n                    raise\n    \n                # 点击目录下拉框\n                logger.info(\"点击目录下拉框\")\n                try:\n                    directory_dropdown = self.wait.until(\n                        EC.element_to_be_clickable(self.directory_dropdown)\n                    )\n                    directory_dropdown.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击目录下拉框\")\n                except:\n                    logger.error(\"未找到目录下拉框\")\n                    raise\n    \n                # 选择\"法院材料\"选项\n                logger.info(\"选择法院材料选项\")\n                try:\n                    court_materials_option = self.wait.until(\n                        EC.element_to_be_clickable(self.court_materials_option)\n                    )\n                    court_materials_option.click()\n                    time.sleep(1)\n                    logger.info(\"成功选择法院材料选项\")\n                except:\n                    logger.error(\"未找到法院材料选项\")\n                    raise\n    \n                # 点击确定按钮\n                logger.info(\"点击确定按钮\")\n                try:\n                    confirm_add_evidence = self.wait.until(\n                        EC.element_to_be_clickable(self.confirm_add_evidence)\n                    )\n                    confirm_add_evidence.click()\n                    time.sleep(2)\n                    logger.info(\"步骤9执行成功：添加庭审笔录2为证据\")\n                except:\n                    logger.error(\"未找到确定按钮\")\n                    raise\n    \n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"add_evidence_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取添加证据截图\")\n    \n            # 11. 选择庭审笔录3并添加为证据\n            with allure.step(\"将庭审笔录3添加为证据\"):\n                logger.info(\"选择庭审笔录3\")\n    \n                # 点击庭审笔录3的复选框\n                try:\n                    court_record3_checkbox = self.wait.until(\n                        EC.element_to_be_clickable(self.court_record3_checkbox)\n                    )\n                    court_record3_checkbox.click()\n                    time.sleep(1)\n                    logger.info(\"成功选中庭审笔录3\")\n                except Exception as e:\n                    logger.error(f\"未能选中庭审笔录3: {str(e)}\")\n                    raise\n    \n                # 点击证据添加按钮\n                logger.info(\"点击证据添加按钮\")\n                try:\n                    evidence_add_button = self.wait.until(\n                        EC.element_to_be_clickable(self.evidence_add_button)\n                    )\n                    evidence_add_button.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击证据添加按钮\")\n                except Exception as e:\n                    logger.error(f\"未能点击证据添加按钮: {str(e)}\")\n                    raise\n    \n                # 点击目录下拉框\n                logger.info(\"点击目录下拉框\")\n                try:\n                    directory_dropdown2 = self.wait.until(\n                        EC.element_to_be_clickable(self.directory_dropdown2)\n                    )\n                    directory_dropdown2.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击目录下拉框\")\n                except Exception as e:\n                    logger.error(f\"未能点击目录下拉框: {str(e)}\")\n                    raise\n    \n                # 选择\"上诉人\"选项\n                logger.info(\"选择上诉人选项\")\n                try:\n                    appellant_option = self.wait.until(\n                        EC.element_to_be_clickable(self.appellant_option)\n                    )\n                    appellant_option.click()\n                    time.sleep(1)\n                    logger.info(\"成功选择上诉人选项\")\n                except Exception as e:\n                    logger.error(f\"未能选择上诉人选项: {str(e)}\")\n                    raise\n    \n                # 点击确定按钮\n                logger.info(\"点击确定按钮\")\n                try:\n                    confirm_evidence_button = self.wait.until(\n                        EC.element_to_be_clickable(self.confirm_evidence_button)\n                    )\n                    confirm_evidence_button.click()\n                    time.sleep(2)\n                    logger.info(\"步骤10执行成功：将庭审笔录3添加为证据\")\n                except Exception as e:\n                    logger.error(f\"未能点击确定按钮: {str(e)}\")\n                    raise\n    \n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"add_record3_evidence_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取添加庭审笔录3为证据的截图\")\n    \n            # 12. 证据引用功能\n            with allure.step(\"证据引用功能\"):\n                logger.info(\"点击证据引用标签页\")\n    \n                # 点击证据引用标签页\n                try:\n                    evidence_reference_tab = self.wait.until(\n                        EC.element_to_be_clickable(self.evidence_reference_tab)\n                    )\n                    evidence_reference_tab.click()\n                    time.sleep(2)\n                    logger.info(\"成功点击证据引用标签页\")\n                except Exception as e:\n                    logger.error(f\"未能点击证据引用标签页: {str(e)}\")\n                    raise\n    \n                # 点击刷新按钮\n                logger.info(\"点击刷新按钮\")\n                try:\n                    refresh_button = self.wait.until(\n                        EC.element_to_be_clickable(self.refresh_button)\n                    )\n                    refresh_button.click()\n                    time.sleep(2)\n                    logger.info(\"成功点击刷新按钮\")\n                except Exception as e:\n                    logger.error(f\"未能点击刷新按钮: {str(e)}\")\n                    raise\n    \n                # 点击查看证据笔录详情\n                logger.info(\"点击查看庭审笔录2详情\")\n                try:\n                    evidence_record_detail = self.wait.until(\n                        EC.element_to_be_clickable(self.evidence_record_detail)\n                    )\n                    evidence_record_detail.click()\n                    time.sleep(2)\n                    logger.info(\"成功点击查看庭审笔录2详情\")\n                except Exception as e:\n                    logger.error(f\"未能点击查看庭审笔录2详情: {str(e)}\")\n                    raise\n    \n                # 点击关闭详情\n                logger.info(\"点击关闭详情\")\n                try:\n                    close_detail_button = self.wait.until(\n                        EC.element_to_be_clickable(self.close_detail_button)\n                    )\n                    close_detail_button.click()\n                    time.sleep(2)\n                    logger.info(\"步骤11执行成功：证据引用功能\")\n                except Exception as e:\n                    logger.error(f\"未能点击关闭详情按钮: {str(e)}\")\n                    raise\n    \n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"evidence_reference_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取证据引用功能截图\")\n    \n            # 13. 双屏阅卷功能\n            with allure.step(\"双屏阅卷功能\"):\n                logger.info(\"选择庭审笔录2和庭审笔录3\")\n    \n                # 点击庭审笔录2前面的选择框\n                try:\n                    record2_checkbox = self.wait.until(\n                        EC.element_to_be_clickable(self.record2_checkbox)\n                    )\n                    record2_checkbox.click()\n                    time.sleep(1)\n                    logger.info(\"成功选中庭审笔录2\")\n                except Exception as e:\n                    logger.error(f\"未能选中庭审笔录2: {str(e)}\")\n                    raise\n    \n                # 点击庭审笔录3前面的选择框\n                try:\n>                   record3_checkbox = self.wait.until(\n                        EC.element_to_be_clickable(self.record3_checkbox)\n                    )\n\nAssistedG.py:572: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"88696a59c226895a27a7b404b55113c9\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000220F2206940>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "description": "测试辅助阅卷流程", "steps": [{"name": "登录系统", "status": "passed", "attachments": [{"name": "login_success", "source": "a1522a8c-6cc0-4b6e-aaa6-0d2d9f8b6701-attachment.png", "type": "image/png"}], "start": 1743060839206, "stop": 1743060850071}, {"name": "点击辅助阅卷", "status": "passed", "attachments": [{"name": "auxiliary_reading_clicked", "source": "88f18708-3e82-4cb1-9c73-fe4167cbbaf9-attachment.png", "type": "image/png"}], "start": 1743060850071, "stop": 1743060852209}, {"name": "点击庭审笔录1", "status": "passed", "start": 1743060852209, "stop": 1743060854294}, {"name": "点击设为庭审笔录", "status": "passed", "start": 1743060854294, "stop": 1743060855370}, {"name": "输入原告处理意见1", "status": "passed", "start": 1743060855370, "stop": 1743060856475}, {"name": "输入原告处理意见2", "status": "passed", "start": 1743060856475, "stop": 1743060857577}, {"name": "点击确定按钮", "status": "passed", "attachments": [{"name": "test_complete", "source": "f976d831-533d-4dfa-9e37-bd45d3211b1b-attachment.png", "type": "image/png"}], "start": 1743060857577, "stop": 1743060859871}, {"name": "下载笔录", "status": "passed", "attachments": [{"name": "pdf_download_complete", "source": "dd024b4d-8e8a-44cf-ac45-682cb5f9bd9e-attachment.png", "type": "image/png"}], "start": 1743060859871, "stop": 1743060864218}, {"name": "添加庭审笔录2为证据", "status": "passed", "attachments": [{"name": "add_evidence_complete", "source": "0d1073c5-a991-4c19-9ab2-1a55d6785fb4-attachment.png", "type": "image/png"}], "start": 1743060864218, "stop": 1743060870871}, {"name": "将庭审笔录3添加为证据", "status": "passed", "attachments": [{"name": "add_record3_evidence_complete", "source": "c7f7e2ae-ae6b-4077-9a16-23d8a8574a53-attachment.png", "type": "image/png"}], "start": 1743060870871, "stop": 1743060877469}, {"name": "证据引用功能", "status": "passed", "attachments": [{"name": "evidence_reference_complete", "source": "2593f9aa-f4d0-41c9-af16-d166254c2c5b-attachment.png", "type": "image/png"}], "start": 1743060877469, "stop": 1743060885899}, {"name": "双屏阅卷功能", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"E:\\AutoTest\\FgAI\\test_001\\AssistedG.py\", line 572, in test_assisted_reading\n    record3_checkbox = self.wait.until(\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1743060885899, "stop": 1743060897422}], "attachments": [{"name": "test_failed", "source": "036f8d3a-3c4e-4740-a693-46a9db22999b-attachment.png", "type": "image/png"}, {"name": "log", "source": "161d1f95-66e9-4eb5-9762-90a60bb3369d-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "773468f0-f9e9-4165-bc31-96e3eebb8a53-attachment.txt", "type": "text/plain"}], "start": 1743060839205, "stop": 1743060897517, "uuid": "01963038-9ade-4331-9135-0a7578a581b0", "historyId": "bcbc7cf4b4f79be87767f13c16480802", "testCaseId": "bcbc7cf4b4f79be87767f13c16480802", "fullName": "test_001.AssistedG.TestAssistedReading#test_assisted_reading", "labels": [{"name": "feature", "value": "辅助阅卷"}, {"name": "epic", "value": "FGAI自动化测试"}, {"name": "story", "value": "辅助阅卷流程"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "AssistedG"}, {"name": "subSuite", "value": "TestAssistedReading"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "24416-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.AssistedG"}]}