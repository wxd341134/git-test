{"name": "辅助阅卷测试", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"ant-btn ant-btn-primary ant-btn-sm\">...</button> is not clickable at point (414, 274). Other element would receive the click: <div role=\"tooltip\" class=\"ant-tooltip-inner\">...</div>\n  (Session info: chrome=134.0.6998.177)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\n\t(No symbol) [0x00007FF6F5F4EAD0]\n\t(No symbol) [0x00007FF6F5DD91CA]\n\t(No symbol) [0x00007FF6F5E375E9]\n\t(No symbol) [0x00007FF6F5E34FA2]\n\t(No symbol) [0x00007FF6F5E32051]\n\t(No symbol) [0x00007FF6F5E30F76]\n\t(No symbol) [0x00007FF6F5E227E4]\n\t(No symbol) [0x00007FF6F5E578EA]\n\t(No symbol) [0x00007FF6F5E22096]\n\t(No symbol) [0x00007FF6F5E57B00]\n\t(No symbol) [0x00007FF6F5E800B8]\n\t(No symbol) [0x00007FF6F5E576C3]\n\t(No symbol) [0x00007FF6F5E20490]\n\t(No symbol) [0x00007FF6F5E21743]\n\tGetHandleVerifier [0x00007FF6F634436D+3525677]\n\tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\n\tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\n\t(No symbol) [0x00007FF6F5F5990F]\n\t(No symbol) [0x00007FF6F5F55674]\n\t(No symbol) [0x00007FF6F5F55816]\n\t(No symbol) [0x00007FF6F5F44D89]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]", "trace": "self = <FgAI.test_001.AssistedG.TestAssistedReading object at 0x00000190CA8E4910>\n\n    @allure.story(\"辅助阅卷流程\")\n    @allure.title(\"辅助阅卷测试\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_assisted_reading(self):\n        \"\"\"测试辅助阅卷流程\"\"\"\n        try:\n            # 1. 登录系统\n            with allure.step(\"登录系统\"):\n                logger.info(\"开始登录系统\")\n                self.login_page.login()\n                time.sleep(2)\n                logger.info(\"登录成功\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"login_success\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取登录成功截图\")\n    \n            # 2. 点击辅助阅卷\n            with allure.step(\"点击辅助阅卷\"):\n                logger.info(\"点击辅助阅卷\")\n                auxiliary_reading = self.wait.until(\n                    EC.element_to_be_clickable(self.auxiliary_reading)\n                )\n                auxiliary_reading.click()\n                time.sleep(2)\n                logger.info(\"步骤1执行成功：点击辅助阅卷\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"auxiliary_reading_clicked\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取辅助阅卷截图\")\n    \n            # 3. 点击庭审笔录1\n            with allure.step(\"点击庭审笔录1\"):\n                logger.info(\"点击庭审笔录1\")\n                court_record = self.wait.until(\n                    EC.element_to_be_clickable(self.court_record)\n                )\n                court_record.click()\n                time.sleep(2)\n                logger.info(\"步骤2执行成功：点击庭审笔录1\")\n    \n            # 4. 点击设为庭审笔录\n            with allure.step(\"点击设为庭审笔录\"):\n                logger.info(\"点击设为庭审笔录\")\n                set_record = self.wait.until(\n                    EC.element_to_be_clickable(self.set_record)\n                )\n                set_record.click()\n                time.sleep(1)\n                logger.info(\"步骤3执行成功：点击设为庭审笔录\")\n    \n            # 5. 输入原告处理意见1\n            with allure.step(\"输入原告处理意见1\"):\n                logger.info(\"输入原告处理意见1\")\n                opinion1 = self.wait.until(\n                    EC.presence_of_element_located(self.opinion1)\n                )\n                opinion1.clear()\n                opinion1.send_keys(\"无意见1\")\n                time.sleep(1)\n                logger.info(\"步骤4执行成功：输入原告处理意见1\")\n    \n            # 6. 输入原告处理意见2\n            with allure.step(\"输入原告处理意见2\"):\n                logger.info(\"输入原告处理意见2\")\n                opinion2 = self.wait.until(\n                    EC.presence_of_element_located(self.opinion2)\n                )\n                opinion2.clear()\n                opinion2.send_keys(\"无意见2\")\n                time.sleep(1)\n                logger.info(\"步骤5执行成功：输入原告处理意见2\")\n    \n            # 7. 点击确定按钮\n            with allure.step(\"点击确定按钮\"):\n                logger.info(\"点击确定按钮\")\n                confirm_button = self.wait.until(\n                    EC.element_to_be_clickable(self.confirm_button)\n                )\n                confirm_button.click()\n                time.sleep(2)\n                logger.info(\"步骤6执行成功：点击确定按钮\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"test_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取完成测试截图\")\n    \n            #8. 点击取消设置庭审笔录1\n            with allure.step(\"取消设置庭审笔录\"):\n                logger.info(\"点击取消设置庭审笔录\")\n    \n                # 先点击庭审笔录1确保选中\n                court_record = self.wait.until(\n                    EC.element_to_be_clickable(self.court_record)\n                )\n                court_record.click()\n                time.sleep(1)\n    \n                # 找到取消设置按钮并点击\n                try:\n                    # 尝试使用提供的选择器\n                    cancel_set_record = self.wait.until(\n                        EC.element_to_be_clickable(self.cancel_set_record)\n                    )\n                    cancel_set_record.click()\n                except:\n                    # 如果上面的定位失败，尝试备用定位方式\n                    logger.warning(\"无法使用SVG/use定位方式，尝试备用定位\")\n                    try:\n                        cancel_button = self.driver.find_element(\n                            By.XPATH,\n                            \"//span[@class='ant-tree-title']/span[text()='庭审笔录1']/following-sibling::*[1]\"\n                        )\n                        cancel_button.click()\n                    except:\n                        logger.error(\"未能找到取消设置按钮\")\n                        raise\n    \n                time.sleep(1)\n    \n                # 点击确定取消设置\n                logger.info(\"点击确定取消设置\")\n                confirm_cancel_button = self.wait.until(\n                    EC.element_to_be_clickable(self.confirm_cancel_button)\n                )\n>               confirm_cancel_button.click()\n\nAssistedG.py:358: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000190CA8E4DC0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6F5F44D89]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"ant-btn ant-btn-primary ant-btn-sm\">...</button> is not clickable at point (414, 274). Other element would receive the click: <div role=\"tooltip\" class=\"ant-tooltip-inner\">...</div>\nE         (Session info: chrome=134.0.6998.177)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\nE       \t(No symbol) [0x00007FF6F5F4EAD0]\nE       \t(No symbol) [0x00007FF6F5DD91CA]\nE       \t(No symbol) [0x00007FF6F5E375E9]\nE       \t(No symbol) [0x00007FF6F5E34FA2]\nE       \t(No symbol) [0x00007FF6F5E32051]\nE       \t(No symbol) [0x00007FF6F5E30F76]\nE       \t(No symbol) [0x00007FF6F5E227E4]\nE       \t(No symbol) [0x00007FF6F5E578EA]\nE       \t(No symbol) [0x00007FF6F5E22096]\nE       \t(No symbol) [0x00007FF6F5E57B00]\nE       \t(No symbol) [0x00007FF6F5E800B8]\nE       \t(No symbol) [0x00007FF6F5E576C3]\nE       \t(No symbol) [0x00007FF6F5E20490]\nE       \t(No symbol) [0x00007FF6F5E21743]\nE       \tGetHandleVerifier [0x00007FF6F634436D+3525677]\nE       \tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\nE       \t(No symbol) [0x00007FF6F5F5990F]\nE       \t(No symbol) [0x00007FF6F5F55674]\nE       \t(No symbol) [0x00007FF6F5F55816]\nE       \t(No symbol) [0x00007FF6F5F44D89]\nE       \tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "description": "测试辅助阅卷流程", "steps": [{"name": "登录系统", "status": "passed", "attachments": [{"name": "login_success", "source": "5a50513a-7756-4cb7-87c5-7cc20b53f7cd-attachment.png", "type": "image/png"}], "start": 1743124833224, "stop": 1743124845389}, {"name": "点击辅助阅卷", "status": "passed", "attachments": [{"name": "auxiliary_reading_clicked", "source": "490f1621-7cc2-40e2-aa83-1afe6050bc17-attachment.png", "type": "image/png"}], "start": 1743124845389, "stop": 1743124847543}, {"name": "点击庭审笔录1", "status": "passed", "start": 1743124847543, "stop": 1743124849610}, {"name": "点击设为庭审笔录", "status": "passed", "start": 1743124849610, "stop": 1743124850707}, {"name": "输入原告处理意见1", "status": "passed", "start": 1743124850707, "stop": 1743124851807}, {"name": "输入原告处理意见2", "status": "passed", "start": 1743124851808, "stop": 1743124852906}, {"name": "点击确定按钮", "status": "passed", "attachments": [{"name": "test_complete", "source": "0eefac50-0aa8-4df8-b25e-e95c9f8248be-attachment.png", "type": "image/png"}], "start": 1743124852906, "stop": 1743124855184}, {"name": "取消设置庭审笔录", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"ant-btn ant-btn-primary ant-btn-sm\">...</button> is not clickable at point (414, 274). Other element would receive the click: <div role=\"tooltip\" class=\"ant-tooltip-inner\">...</div>\n  (Session info: chrome=134.0.6998.177)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\n\t(No symbol) [0x00007FF6F5F4EAD0]\n\t(No symbol) [0x00007FF6F5DD91CA]\n\t(No symbol) [0x00007FF6F5E375E9]\n\t(No symbol) [0x00007FF6F5E34FA2]\n\t(No symbol) [0x00007FF6F5E32051]\n\t(No symbol) [0x00007FF6F5E30F76]\n\t(No symbol) [0x00007FF6F5E227E4]\n\t(No symbol) [0x00007FF6F5E578EA]\n\t(No symbol) [0x00007FF6F5E22096]\n\t(No symbol) [0x00007FF6F5E57B00]\n\t(No symbol) [0x00007FF6F5E800B8]\n\t(No symbol) [0x00007FF6F5E576C3]\n\t(No symbol) [0x00007FF6F5E20490]\n\t(No symbol) [0x00007FF6F5E21743]\n\tGetHandleVerifier [0x00007FF6F634436D+3525677]\n\tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\n\tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\n\t(No symbol) [0x00007FF6F5F5990F]\n\t(No symbol) [0x00007FF6F5F55674]\n\t(No symbol) [0x00007FF6F5F55816]\n\t(No symbol) [0x00007FF6F5F44D89]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\n", "trace": "  File \"E:\\AutoTest\\FgAI\\test_001\\AssistedG.py\", line 358, in test_assisted_reading\n    confirm_cancel_button.click()\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 119, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 572, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1743124855184, "stop": 1743124858444}], "attachments": [{"name": "test_failed", "source": "06afb85b-222a-40ff-9c0e-be1dfaccc3c9-attachment.png", "type": "image/png"}, {"name": "log", "source": "2ebed681-7fbb-483a-90ca-38d8203e12ff-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "dfb9facb-f43c-4645-9c17-dcac2860435d-attachment.txt", "type": "text/plain"}], "start": 1743124833224, "stop": 1743124858693, "uuid": "21e50c5a-2d85-47f6-b4aa-8de5fc2e287a", "historyId": "bcbc7cf4b4f79be87767f13c16480802", "testCaseId": "bcbc7cf4b4f79be87767f13c16480802", "fullName": "test_001.AssistedG.TestAssistedReading#test_assisted_reading", "labels": [{"name": "story", "value": "辅助阅卷流程"}, {"name": "epic", "value": "FGAI自动化测试"}, {"name": "severity", "value": "critical"}, {"name": "feature", "value": "辅助阅卷"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "AssistedG"}, {"name": "subSuite", "value": "TestAssistedReading"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "27040-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.AssistedG"}]}