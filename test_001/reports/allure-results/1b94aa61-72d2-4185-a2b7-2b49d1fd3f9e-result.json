{"name": "辅助阅卷测试", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\n  (Session info: chrome=134.0.6998.177)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\n\t(No symbol) [0x00007FF6F5F4EAD0]\n\t(No symbol) [0x00007FF6F5DD8FFC]\n\t(No symbol) [0x00007FF6F5E24C85]\n\t(No symbol) [0x00007FF6F5E578EA]\n\t(No symbol) [0x00007FF6F5E22096]\n\t(No symbol) [0x00007FF6F5E57B00]\n\t(No symbol) [0x00007FF6F5E800B8]\n\t(No symbol) [0x00007FF6F5E576C3]\n\t(No symbol) [0x00007FF6F5E20490]\n\t(No symbol) [0x00007FF6F5E21743]\n\tGetHandleVerifier [0x00007FF6F634436D+3525677]\n\tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\n\tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\n\t(No symbol) [0x00007FF6F5F5990F]\n\t(No symbol) [0x00007FF6F5F55674]\n\t(No symbol) [0x00007FF6F5F55816]\n\t(No symbol) [0x00007FF6F5F44D89]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]", "trace": "self = <FgAI.test_001.AssistedG.TestAssistedReading object at 0x000001883F44B850>\n\n    @allure.story(\"辅助阅卷流程\")\n    @allure.title(\"辅助阅卷测试\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_assisted_reading(self):\n        \"\"\"测试辅助阅卷流程\"\"\"\n        try:\n            # 1. 登录系统\n            with allure.step(\"登录系统\"):\n                logger.info(\"开始登录系统\")\n                self.login_page.login()\n                time.sleep(2)\n                logger.info(\"登录成功\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"login_success\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取登录成功截图\")\n    \n            # 2. 点击辅助阅卷\n            with allure.step(\"点击辅助阅卷\"):\n                logger.info(\"点击辅助阅卷\")\n                auxiliary_reading = self.wait.until(\n                    EC.element_to_be_clickable(self.auxiliary_reading)\n                )\n                auxiliary_reading.click()\n                time.sleep(2)\n                logger.info(\"步骤1执行成功：点击辅助阅卷\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"auxiliary_reading_clicked\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取辅助阅卷截图\")\n    \n            # 3. 点击庭审笔录1\n            with allure.step(\"点击庭审笔录1\"):\n                logger.info(\"点击庭审笔录1\")\n                court_record = self.wait.until(\n                    EC.element_to_be_clickable(self.court_record)\n                )\n                court_record.click()\n                time.sleep(2)\n                logger.info(\"步骤2执行成功：点击庭审笔录1\")\n    \n            # 4. 点击设为庭审笔录\n            with allure.step(\"点击设为庭审笔录\"):\n                logger.info(\"点击设为庭审笔录\")\n                set_record = self.wait.until(\n                    EC.element_to_be_clickable(self.set_record)\n                )\n                set_record.click()\n                time.sleep(1)\n                logger.info(\"步骤3执行成功：点击设为庭审笔录\")\n    \n            # 5. 输入原告处理意见1\n            with allure.step(\"输入原告处理意见1\"):\n                logger.info(\"输入原告处理意见1\")\n                opinion1 = self.wait.until(\n                    EC.presence_of_element_located(self.opinion1)\n                )\n                opinion1.clear()\n                opinion1.send_keys(\"无意见1\")\n                time.sleep(1)\n                logger.info(\"步骤4执行成功：输入原告处理意见1\")\n    \n            # 6. 输入原告处理意见2\n            with allure.step(\"输入原告处理意见2\"):\n                logger.info(\"输入原告处理意见2\")\n                opinion2 = self.wait.until(\n                    EC.presence_of_element_located(self.opinion2)\n                )\n                opinion2.clear()\n                opinion2.send_keys(\"无意见2\")\n                time.sleep(1)\n                logger.info(\"步骤5执行成功：输入原告处理意见2\")\n    \n            # 7. 点击确定按钮\n            with allure.step(\"点击确定按钮\"):\n                logger.info(\"点击确定按钮\")\n                confirm_button = self.wait.until(\n                    EC.element_to_be_clickable(self.confirm_button)\n                )\n                confirm_button.click()\n                time.sleep(2)\n                logger.info(\"步骤6执行成功：点击确定按钮\")\n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"test_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取完成测试截图\")\n    \n            # 8. 点击取消设置庭审笔录1\n            # with allure.step(\"取消设置庭审笔录\"):\n            #     logger.info(\"点击取消设置庭审笔录\")\n            #\n            #     # 先点击庭审笔录1确保选中\n            #     court_record = self.wait.until(\n            #         EC.element_to_be_clickable(self.court_record)\n            #     )\n            #     court_record.click()\n            #     time.sleep(1)\n            #\n            #     # 找到取消设置按钮并点击\n            #     try:\n            #         # 尝试使用提供的选择器\n            #         cancel_set_record = self.wait.until(\n            #             EC.element_to_be_clickable(self.cancel_set_record)\n            #         )\n            #         cancel_set_record.click()\n            #     except:\n            #         # 如果上面的定位失败，尝试备用定位方式\n            #         logger.warning(\"无法使用SVG/use定位方式，尝试备用定位\")\n            #         try:\n            #             cancel_button = self.driver.find_element(\n            #                 By.XPATH,\n            #                 \"//span[@class='ant-tree-title']/span[text()='庭审笔录1']/following-sibling::*[1]\"\n            #             )\n            #             cancel_button.click()\n            #         except:\n            #             logger.error(\"未能找到取消设置按钮\")\n            #             raise\n            #\n            #     time.sleep(1)\n            #\n            #     # 点击确定取消设置\n            #     logger.info(\"点击确定取消设置\")\n            #     confirm_cancel_button = self.wait.until(\n            #         EC.element_to_be_clickable(self.confirm_cancel_button)\n            #     )\n            #     confirm_cancel_button.click()\n            #     time.sleep(2)\n            #     logger.info(\"步骤7执行成功：取消设置庭审笔录\")\n            #\n            #     try:\n            #         allure.attach(\n            #             self.driver.get_screenshot_as_png(),\n            #             name=\"cancel_set_record_complete\",\n            #             attachment_type=allure.attachment_type.PNG\n            #         )\n            #     except:\n            #         logger.warning(\"无法获取取消设置截图\")\n    \n            # 9. 点击下载笔录\n            with allure.step(\"下载笔录\"):\n                logger.info(\"点击下载按钮\")\n                download_button = self.wait.until(\n                    EC.element_to_be_clickable(self.download_button)\n                )\n                download_button.click()\n                time.sleep(1)\n    \n                # 选择PDF下载选项\n                logger.info(\"选择PDF下载\")\n                pdf_download_option = self.wait.until(\n                    EC.element_to_be_clickable(self.pdf_download_option)\n                )\n                pdf_download_option.click()\n                time.sleep(3)  # 等待下载开始\n                logger.info(\"步骤8执行成功：下载笔录PDF\")\n    \n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"pdf_download_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取PDF下载截图\")\n    \n            # 10. 添加庭审笔录2为证据\n            with allure.step(\"添加庭审笔录2为证据\"):\n                logger.info(\"点击庭审笔录2\")\n    \n                # 先点击庭审笔录2确保选中\n                try:\n                    court_record2 = self.wait.until(\n                        EC.element_to_be_clickable(self.court_record2)\n                    )\n                    court_record2.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击庭审笔录2\")\n                except:\n                    logger.error(\"未找到庭审笔录2\")\n                    raise\n    \n                # 点击添加为证据按钮\n                logger.info(\"点击添加为证据按钮\")\n                try:\n                    add_evidence_button = self.wait.until(\n                        EC.element_to_be_clickable(self.add_evidence_button)\n                    )\n                    add_evidence_button.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击添加为证据按钮\")\n                except:\n                    logger.error(\"未找到添加为证据按钮\")\n                    raise\n    \n                # 点击目录下拉框\n                logger.info(\"点击目录下拉框\")\n                try:\n                    directory_dropdown = self.wait.until(\n                        EC.element_to_be_clickable(self.directory_dropdown)\n                    )\n                    directory_dropdown.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击目录下拉框\")\n                except:\n                    logger.error(\"未找到目录下拉框\")\n                    raise\n    \n                # 选择\"法院材料\"选项\n                logger.info(\"选择法院材料选项\")\n                try:\n                    court_materials_option = self.wait.until(\n                        EC.element_to_be_clickable(self.court_materials_option)\n                    )\n                    court_materials_option.click()\n                    time.sleep(1)\n                    logger.info(\"成功选择法院材料选项\")\n                except:\n                    logger.error(\"未找到法院材料选项\")\n                    raise\n    \n                # 点击确定按钮\n                logger.info(\"点击确定按钮\")\n                try:\n                    confirm_add_evidence = self.wait.until(\n                        EC.element_to_be_clickable(self.confirm_add_evidence)\n                    )\n                    confirm_add_evidence.click()\n                    time.sleep(2)\n                    logger.info(\"步骤9执行成功：添加庭审笔录2为证据\")\n                except:\n                    logger.error(\"未找到确定按钮\")\n                    raise\n    \n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"add_evidence_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取添加证据截图\")\n    \n            # 11. 选择庭审笔录3并添加为证据\n            with allure.step(\"将庭审笔录3添加为证据\"):\n                logger.info(\"选择庭审笔录3\")\n    \n                # 点击庭审笔录3的复选框\n                try:\n                    court_record3_checkbox = self.wait.until(\n                        EC.element_to_be_clickable(self.court_record3_checkbox)\n                    )\n                    court_record3_checkbox.click()\n                    time.sleep(1)\n                    logger.info(\"成功选中庭审笔录3\")\n                except Exception as e:\n                    logger.error(f\"未能选中庭审笔录3: {str(e)}\")\n                    raise\n    \n                # 点击证据添加按钮\n                logger.info(\"点击证据添加按钮\")\n                try:\n                    evidence_add_button = self.wait.until(\n                        EC.element_to_be_clickable(self.evidence_add_button)\n                    )\n                    evidence_add_button.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击证据添加按钮\")\n                except Exception as e:\n                    logger.error(f\"未能点击证据添加按钮: {str(e)}\")\n                    raise\n    \n                # 点击目录下拉框\n                logger.info(\"点击目录下拉框\")\n                try:\n                    directory_dropdown2 = self.wait.until(\n                        EC.element_to_be_clickable(self.directory_dropdown2)\n                    )\n                    directory_dropdown2.click()\n                    time.sleep(1)\n                    logger.info(\"成功点击目录下拉框\")\n                except Exception as e:\n                    logger.error(f\"未能点击目录下拉框: {str(e)}\")\n                    raise\n    \n                # 选择\"上诉人\"选项\n                logger.info(\"选择上诉人选项\")\n                try:\n                    appellant_option = self.wait.until(\n                        EC.element_to_be_clickable(self.appellant_option)\n                    )\n                    appellant_option.click()\n                    time.sleep(1)\n                    logger.info(\"成功选择上诉人选项\")\n                except Exception as e:\n                    logger.error(f\"未能选择上诉人选项: {str(e)}\")\n                    raise\n    \n                # 点击确定按钮\n                logger.info(\"点击确定按钮\")\n                try:\n                    confirm_evidence_button = self.wait.until(\n                        EC.element_to_be_clickable(self.confirm_evidence_button)\n                    )\n                    confirm_evidence_button.click()\n                    time.sleep(2)\n                    logger.info(\"步骤10执行成功：将庭审笔录3添加为证据\")\n                except Exception as e:\n                    logger.error(f\"未能点击确定按钮: {str(e)}\")\n                    raise\n    \n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"add_record3_evidence_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取添加庭审笔录3为证据的截图\")\n    \n            # 12. 证据引用功能\n            with allure.step(\"证据引用功能\"):\n                logger.info(\"点击证据引用标签页\")\n    \n                # 点击证据引用标签页\n                try:\n                    evidence_reference_tab = self.wait.until(\n                        EC.element_to_be_clickable(self.evidence_reference_tab)\n                    )\n                    evidence_reference_tab.click()\n                    time.sleep(2)\n                    logger.info(\"成功点击证据引用标签页\")\n                except Exception as e:\n                    logger.error(f\"未能点击证据引用标签页: {str(e)}\")\n                    raise\n    \n                # 点击刷新按钮\n                logger.info(\"点击刷新按钮\")\n                try:\n                    refresh_button = self.wait.until(\n                        EC.element_to_be_clickable(self.refresh_button)\n                    )\n                    refresh_button.click()\n                    time.sleep(2)\n                    logger.info(\"成功点击刷新按钮\")\n                except Exception as e:\n                    logger.error(f\"未能点击刷新按钮: {str(e)}\")\n                    raise\n    \n                # 点击查看证据笔录详情\n                logger.info(\"点击查看庭审笔录2详情\")\n                try:\n                    evidence_record_detail = self.wait.until(\n                        EC.element_to_be_clickable(self.evidence_record_detail)\n                    )\n                    evidence_record_detail.click()\n                    time.sleep(2)\n                    logger.info(\"成功点击查看庭审笔录2详情\")\n                except Exception as e:\n                    logger.error(f\"未能点击查看庭审笔录2详情: {str(e)}\")\n                    raise\n    \n                # 点击关闭详情\n                logger.info(\"点击关闭详情\")\n                try:\n                    close_detail_button = self.wait.until(\n                        EC.element_to_be_clickable(self.close_detail_button)\n                    )\n                    close_detail_button.click()\n                    time.sleep(2)\n                    logger.info(\"步骤11执行成功：证据引用功能\")\n                except Exception as e:\n                    logger.error(f\"未能点击关闭详情按钮: {str(e)}\")\n                    raise\n    \n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"evidence_reference_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取证据引用功能截图\")\n    \n            # 13. 双屏阅卷功能\n            with allure.step(\"双屏阅卷功能\"):\n                logger.info(\"选择庭审笔录2和庭审笔录3\")\n    \n                # 点击庭审笔录2前面的选择框\n                try:\n                    record2_checkbox = self.wait.until(\n                        EC.element_to_be_clickable(self.record2_checkbox)\n                    )\n                    record2_checkbox.click()\n                    time.sleep(1)\n                    logger.info(\"成功选中庭审笔录2\")\n                except Exception as e:\n                    logger.error(f\"未能选中庭审笔录2: {str(e)}\")\n                    raise\n    \n                # 点击庭审笔录3前面的选择框\n                try:\n                    record3_checkbox = self.wait.until(\n                        EC.element_to_be_clickable(self.record3_checkbox)\n                    )\n                    record3_checkbox.click()\n                    time.sleep(1)\n                    logger.info(\"成功选中庭审笔录3\")\n                except Exception as e:\n                    logger.error(f\"未能选中庭审笔录3: {str(e)}\")\n                    raise\n    \n                # 点击双屏阅卷按钮\n                logger.info(\"点击双屏阅卷按钮\")\n                try:\n                    dual_screen_reading_button = self.wait.until(\n                        EC.element_to_be_clickable(self.dual_screen_reading_button)\n                    )\n                    dual_screen_reading_button.click()\n                    time.sleep(3)  # 等待双屏阅卷界面加载\n                    logger.info(\"成功点击双屏阅卷按钮\")\n                except Exception as e:\n                    logger.error(f\"未能点击双屏阅卷按钮: {str(e)}\")\n                    raise\n    \n                # 查看双屏阅卷内容\n                logger.info(\"查看双屏阅卷内容\")\n                time.sleep(2)  # 留时间查看内容\n    \n                # 点击关闭双屏阅卷\n                logger.info(\"点击关闭双屏阅卷\")\n                try:\n                    close_dual_screen_button = self.wait.until(\n                        EC.element_to_be_clickable(self.close_dual_screen_button)\n                    )\n                    close_dual_screen_button.click()\n                    time.sleep(2)\n                    logger.info(\"步骤12执行成功：双屏阅卷功能\")\n                except Exception as e:\n                    logger.error(f\"未能关闭双屏阅卷: {str(e)}\")\n                    raise\n    \n                try:\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"dual_screen_reading_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                except:\n                    logger.warning(\"无法获取双屏阅卷功能截图\")\n    \n            # 14. 批量修改功能\n            with allure.step(\"批量修改功能\"):\n                logger.info(\"点击批量修改按钮\")\n    \n                # 点击批量修改按钮\n                try:\n                    batch_edit_button = self.wait.until(\n                        EC.element_to_be_clickable(self.batch_edit_button)\n                    )\n                    batch_edit_button.click()\n                    time.sleep(2)\n                    logger.info(\"成功点击批量修改按钮\")\n                except Exception as e:\n                    logger.error(f\"未能点击批量修改按钮: {str(e)}\")\n                    raise\n    \n                # 修改证据名称\n                logger.info(\"修改证据名称\")\n                try:\n                    evidence_name_cell = self.wait.until(\n                        EC.element_to_be_clickable(self.evidence_name_cell)\n                    )\n                    # 使用JavaScript点击和设置值，这种方法通常更可靠\n                    self.driver.execute_script(\"arguments[0].click();\", evidence_name_cell)\n                    time.sleep(1)\n    \n                    # 尝试双击以激活编辑状态\n                    actions = ActionChains(self.driver)\n                    actions.double_click(evidence_name_cell).perform()\n                    time.sleep(1)\n    \n                    # 使用JavaScript清除并设置值\n                    self.driver.execute_script(\"arguments[0].textContent = '';\", evidence_name_cell)\n                    self.driver.execute_script(\"arguments[0].textContent = '庭审笔录2修改';\", evidence_name_cell)\n    \n                    # 模拟回车键\n                    actions.send_keys(\"\\n\").perform()\n                    time.sleep(1)\n                    logger.info(\"成功修改证据名称\")\n                except Exception as e:\n                    # 尝试备用方法\n                    logger.warning(f\"使用标准方法修改证据名称失败: {str(e)}，尝试备用方法\")\n                    try:\n                        # 查找真正可编辑的输入框（可能在点击后出现）\n                        input_field = self.driver.find_element(\n                            By.XPATH,\n                            \"//td[text()='1']/following-sibling::td[1]//input\"\n                        )\n                        input_field.clear()\n                        input_field.send_keys(\"庭审笔录2修改\")\n                        input_field.send_keys(\"\\n\")\n                        time.sleep(1)\n                        logger.info(\"使用备用方法成功修改证据名称\")\n                    except Exception as e2:\n                        logger.error(f\"所有修改证据名称方法都失败: {str(e2)}\")\n                        raise\n    \n                # 选择质证类型\n                logger.info(\"选择质证类型\")\n                try:\n                    evidence_type_cell = self.wait.until(\n                        EC.element_to_be_clickable(self.evidence_type_cell)\n                    )\n                    evidence_type_cell.click()\n                    time.sleep(1)\n    \n                    # 选择\"无异议\"选项\n                    no_objection_option = self.wait.until(\n                        EC.element_to_be_clickable(self.no_objection_option)\n                    )\n                    no_objection_option.click()\n                    time.sleep(1)\n                    logger.info(\"成功选择质证类型为无异议\")\n                except Exception as e:\n                    logger.error(f\"未能选择质证类型: {str(e)}\")\n                    raise\n    \n                # 填写质证意见\n                logger.info(\"填写质证意见\")\n                try:\n                    evidence_opinion_cell = self.wait.until(\n                        EC.element_to_be_clickable(self.evidence_opinion_cell)\n                    )\n                    evidence_opinion_cell.click()\n                    time.sleep(1)\n    \n                    # 输入质证意见\n>                   evidence_opinion_cell.clear()\n\nAssistedG.py:739: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:154: in clear\n    self._execute(Command.CLEAR_ELEMENT)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001883F44BD30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"invalid element state\\\\n  (Session info...07FF6F5F44D89]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\nE         (Session info: chrome=134.0.6998.177)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\nE       \t(No symbol) [0x00007FF6F5F4EAD0]\nE       \t(No symbol) [0x00007FF6F5DD8FFC]\nE       \t(No symbol) [0x00007FF6F5E24C85]\nE       \t(No symbol) [0x00007FF6F5E578EA]\nE       \t(No symbol) [0x00007FF6F5E22096]\nE       \t(No symbol) [0x00007FF6F5E57B00]\nE       \t(No symbol) [0x00007FF6F5E800B8]\nE       \t(No symbol) [0x00007FF6F5E576C3]\nE       \t(No symbol) [0x00007FF6F5E20490]\nE       \t(No symbol) [0x00007FF6F5E21743]\nE       \tGetHandleVerifier [0x00007FF6F634436D+3525677]\nE       \tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\nE       \t(No symbol) [0x00007FF6F5F5990F]\nE       \t(No symbol) [0x00007FF6F5F55674]\nE       \t(No symbol) [0x00007FF6F5F55816]\nE       \t(No symbol) [0x00007FF6F5F44D89]\nE       \tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidElementStateException"}, "description": "测试辅助阅卷流程", "steps": [{"name": "登录系统", "status": "passed", "attachments": [{"name": "login_success", "source": "fa6559fd-abde-4a15-999f-b1e95c53d744-attachment.png", "type": "image/png"}], "start": 1743064626207, "stop": 1743064637695}, {"name": "点击辅助阅卷", "status": "passed", "attachments": [{"name": "auxiliary_reading_clicked", "source": "d68d79ea-1b40-4bcc-b6c1-ab6af9d9948d-attachment.png", "type": "image/png"}], "start": 1743064637695, "stop": 1743064639874}, {"name": "点击庭审笔录1", "status": "passed", "start": 1743064639874, "stop": 1743064641943}, {"name": "点击设为庭审笔录", "status": "passed", "start": 1743064641943, "stop": 1743064643027}, {"name": "输入原告处理意见1", "status": "passed", "start": 1743064643027, "stop": 1743064644125}, {"name": "输入原告处理意见2", "status": "passed", "start": 1743064644125, "stop": 1743064645236}, {"name": "点击确定按钮", "status": "passed", "attachments": [{"name": "test_complete", "source": "76e16bd7-c2d9-4313-95fc-022401fb059a-attachment.png", "type": "image/png"}], "start": 1743064645236, "stop": 1743064647539}, {"name": "下载笔录", "status": "passed", "attachments": [{"name": "pdf_download_complete", "source": "4d36f4e1-41ab-42c7-bb53-ac8f81aed83c-attachment.png", "type": "image/png"}], "start": 1743064647539, "stop": 1743064651882}, {"name": "添加庭审笔录2为证据", "status": "passed", "attachments": [{"name": "add_evidence_complete", "source": "4d11406a-1331-40c8-88a2-466dab49230b-attachment.png", "type": "image/png"}], "start": 1743064651882, "stop": 1743064658448}, {"name": "将庭审笔录3添加为证据", "status": "passed", "attachments": [{"name": "add_record3_evidence_complete", "source": "2a23f7f5-64a1-4f5b-8740-b31bdca909eb-attachment.png", "type": "image/png"}], "start": 1743064658448, "stop": 1743064665034}, {"name": "证据引用功能", "status": "passed", "attachments": [{"name": "evidence_reference_complete", "source": "59e3c193-ec5e-4aad-b976-29da29644124-attachment.png", "type": "image/png"}], "start": 1743064665034, "stop": 1743064673479}, {"name": "双屏阅卷功能", "status": "passed", "attachments": [{"name": "dual_screen_reading_complete", "source": "732782c0-a946-4ace-a44a-c6df1142ec70-attachment.png", "type": "image/png"}], "start": 1743064673479, "stop": 1743064682880}, {"name": "批量修改功能", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\n  (Session info: chrome=134.0.6998.177)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\n\t(No symbol) [0x00007FF6F5F4EAD0]\n\t(No symbol) [0x00007FF6F5DD8FFC]\n\t(No symbol) [0x00007FF6F5E24C85]\n\t(No symbol) [0x00007FF6F5E578EA]\n\t(No symbol) [0x00007FF6F5E22096]\n\t(No symbol) [0x00007FF6F5E57B00]\n\t(No symbol) [0x00007FF6F5E800B8]\n\t(No symbol) [0x00007FF6F5E576C3]\n\t(No symbol) [0x00007FF6F5E20490]\n\t(No symbol) [0x00007FF6F5E21743]\n\tGetHandleVerifier [0x00007FF6F634436D+3525677]\n\tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\n\tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\n\t(No symbol) [0x00007FF6F5F5990F]\n\t(No symbol) [0x00007FF6F5F55674]\n\t(No symbol) [0x00007FF6F5F55816]\n\t(No symbol) [0x00007FF6F5F44D89]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\n", "trace": "  File \"E:\\AutoTest\\FgAI\\test_001\\AssistedG.py\", line 739, in test_assisted_reading\n    evidence_opinion_cell.clear()\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 154, in clear\n    self._execute(Command.CLEAR_ELEMENT)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 572, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1743064682880, "stop": 1743064691593}], "attachments": [{"name": "test_failed", "source": "ffe062cd-89e0-4f46-b8c4-121988038511-attachment.png", "type": "image/png"}, {"name": "log", "source": "f9798504-465f-419e-b133-7a13a4410fd6-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "6f45ab0a-1330-4081-a53e-28be915657d8-attachment.txt", "type": "text/plain"}], "start": 1743064626207, "stop": 1743064691668, "uuid": "8d6114c2-54d6-417e-9c7f-8f4a94fa8d89", "historyId": "bcbc7cf4b4f79be87767f13c16480802", "testCaseId": "bcbc7cf4b4f79be87767f13c16480802", "fullName": "test_001.AssistedG.TestAssistedReading#test_assisted_reading", "labels": [{"name": "epic", "value": "FGAI自动化测试"}, {"name": "story", "value": "辅助阅卷流程"}, {"name": "feature", "value": "辅助阅卷"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "AssistedG"}, {"name": "subSuite", "value": "TestAssistedReading"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "17984-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.AssistedG"}]}