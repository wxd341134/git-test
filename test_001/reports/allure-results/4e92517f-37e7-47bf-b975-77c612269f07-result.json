{"name": "辅助阅卷测试", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\n\t(No symbol) [0x00007FF6F5F4EAD0]\n\t(No symbol) [0x00007FF6F5DD8FFC]\n\t(No symbol) [0x00007FF6F5E1F69F]\n\t(No symbol) [0x00007FF6F5E577B2]\n\t(No symbol) [0x00007FF6F5E5210E]\n\t(No symbol) [0x00007FF6F5E511B9]\n\t(No symbol) [0x00007FF6F5DA55E5]\n\tGetHandleVerifier [0x00007FF6F634436D+3525677]\n\tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\n\tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\n\t(No symbol) [0x00007FF6F5F5990F]\n\t(No symbol) [0x00007FF6F5DA41FF]\n\tGetHandleVerifier [0x00007FF6F63C25D8+4042392]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]", "trace": "self = <FgAI.test_001.AssistedG2.TestAssistedReading object at 0x000001D78F7E5640>\n\n    @allure.story(\"辅助阅卷流程\")\n    @allure.title(\"辅助阅卷测试\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_assisted_reading(self):\n        \"\"\"测试辅助阅卷流程\"\"\"\n        try:\n            # 1. 登录系统\n            with allure.step(\"登录系统\"):\n                logger.info(\"开始登录系统\")\n                self.login_page.login()\n                time.sleep(3)  # 增加登录后的等待时间\n                logger.info(\"登录成功\")\n                self.take_screenshot(\"login_success\")\n    \n            # 2. 点击辅助阅卷\n            with allure.step(\"点击辅助阅卷\"):\n                self.assisted_page.click_auxiliary_reading()\n                self.take_screenshot(\"auxiliary_reading_clicked\")\n    \n            # 3. 点击庭审笔录1\n            with allure.step(\"点击庭审笔录1\"):\n                self.assisted_page.click_court_record1()\n                self.take_screenshot(\"court_record1_clicked\")\n    \n            # 4. 设为庭审笔录和输入处理意见\n            with allure.step(\"设为庭审笔录并输入处理意见\"):\n                (self.assisted_page\n                 .set_as_court_record()\n                 .enter_opinions(\"无意见1\", \"无意见2\")\n                 .confirm_settings())\n                self.take_screenshot(\"set_court_record_complete\")\n    \n            # 5. 取消设置庭审笔录\n            with allure.step(\"取消设置庭审笔录\"):\n                self.assisted_page.cancel_set_record()\n                self.take_screenshot(\"cancel_set_record_complete\")\n    \n            # 6. 下载PDF\n            with allure.step(\"下载笔录PDF\"):\n                self.assisted_page.download_pdf()\n                self.take_screenshot(\"pdf_download_complete\")\n    \n            # 7. 添加庭审笔录2为证据\n            with allure.step(\"添加庭审笔录2为证据\"):\n                self.assisted_page.add_court_record2_as_evidence()\n                self.take_screenshot(\"add_evidence_complete\")\n    \n            # 8. 将庭审笔录3添加为证据\n            with allure.step(\"将庭审笔录3添加为证据\"):\n                self.assisted_page.add_court_record3_as_evidence()\n                self.take_screenshot(\"add_record3_evidence_complete\")\n    \n            # 9. 证据引用功能\n            with allure.step(\"证据引用功能\"):\n                self.assisted_page.check_evidence_reference()\n                self.take_screenshot(\"evidence_reference_complete\")\n    \n            # 10. 双屏阅卷功能\n            with allure.step(\"双屏阅卷功能\"):\n                self.assisted_page.perform_dual_screen_reading()\n                self.take_screenshot(\"dual_screen_reading_complete\")\n    \n            # 11. 选择上诉人为第三人\n            with allure.step(\"选择上诉人为第三人\"):\n                self.assisted_page.select_third_party()\n                self.take_screenshot(\"select_third_party_complete\")\n    \n            # 12. 刷新并取消选中庭审笔录3\n            with allure.step(\"刷新并取消选中庭审笔录3\"):\n>               self.assisted_page.refresh_and_uncheck_record3()\n\nAssistedG2.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\assisted_reading_page.py:394: in refresh_and_uncheck_record3\n    refresh_button = self.wait.until(\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:633: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D78F7E5B20>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...C25D8+4042392]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\nE       \t(No symbol) [0x00007FF6F5F4EAD0]\nE       \t(No symbol) [0x00007FF6F5DD8FFC]\nE       \t(No symbol) [0x00007FF6F5E1F69F]\nE       \t(No symbol) [0x00007FF6F5E577B2]\nE       \t(No symbol) [0x00007FF6F5E5210E]\nE       \t(No symbol) [0x00007FF6F5E511B9]\nE       \t(No symbol) [0x00007FF6F5DA55E5]\nE       \tGetHandleVerifier [0x00007FF6F634436D+3525677]\nE       \tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\nE       \t(No symbol) [0x00007FF6F5F5990F]\nE       \t(No symbol) [0x00007FF6F5DA41FF]\nE       \tGetHandleVerifier [0x00007FF6F63C25D8+4042392]\nE       \tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "测试辅助阅卷流程", "steps": [{"name": "登录系统", "status": "passed", "attachments": [{"name": "login_success", "source": "b69a465b-b4e4-4e41-9cbc-ab224bbbafff-attachment.png", "type": "image/png"}], "start": 1743129771814, "stop": 1743129783457}, {"name": "点击辅助阅卷", "status": "passed", "attachments": [{"name": "auxiliary_reading_clicked", "source": "2c8499d7-72f1-4dd3-963f-3d8cd33539c1-attachment.png", "type": "image/png"}], "start": 1743129783457, "stop": 1743129785615}, {"name": "点击庭审笔录1", "status": "passed", "attachments": [{"name": "court_record1_clicked", "source": "d99dde22-047d-4240-be93-5d2e9495a02b-attachment.png", "type": "image/png"}], "start": 1743129785615, "stop": 1743129787918}, {"name": "设为庭审笔录并输入处理意见", "status": "passed", "attachments": [{"name": "set_court_record_complete", "source": "03b77496-d8de-4a3d-849a-d671832d63d4-attachment.png", "type": "image/png"}], "start": 1743129787918, "stop": 1743129793495}, {"name": "取消设置庭审笔录", "status": "passed", "attachments": [{"name": "cancel_set_record_complete", "source": "5678cbd5-f543-411d-bb90-d51b0db7e083-attachment.png", "type": "image/png"}], "start": 1743129793495, "stop": 1743129802222}, {"name": "下载笔录PDF", "status": "passed", "attachments": [{"name": "pdf_download_complete", "source": "08371dc8-a7e6-4a65-825b-ef9889434959-attachment.png", "type": "image/png"}], "start": 1743129802222, "stop": 1743129806555}, {"name": "添加庭审笔录2为证据", "status": "passed", "attachments": [{"name": "add_evidence_complete", "source": "87321468-e6d2-47ae-bc83-231cddb586cb-attachment.png", "type": "image/png"}], "start": 1743129806555, "stop": 1743129815184}, {"name": "将庭审笔录3添加为证据", "status": "passed", "attachments": [{"name": "add_record3_evidence_complete", "source": "ae93cc3b-f8b5-49a4-9685-6f58172242a1-attachment.png", "type": "image/png"}], "start": 1743129815184, "stop": 1743129821755}, {"name": "证据引用功能", "status": "passed", "attachments": [{"name": "evidence_reference_complete", "source": "80e2cb3f-b0bc-4efb-adc6-438a4e47f0f8-attachment.png", "type": "image/png"}], "start": 1743129821755, "stop": 1743129830222}, {"name": "双屏阅卷功能", "status": "passed", "attachments": [{"name": "dual_screen_reading_complete", "source": "4ac145af-6df3-43b2-833e-5eca9fc78152-attachment.png", "type": "image/png"}], "start": 1743129830222, "stop": 1743129839555}, {"name": "选择上诉人为第三人", "status": "passed", "start": 1743129839555, "stop": 1743129841564}, {"name": "刷新并取消选中庭审笔录3", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\n\t(No symbol) [0x00007FF6F5F4EAD0]\n\t(No symbol) [0x00007FF6F5DD8FFC]\n\t(No symbol) [0x00007FF6F5E1F69F]\n\t(No symbol) [0x00007FF6F5E577B2]\n\t(No symbol) [0x00007FF6F5E5210E]\n\t(No symbol) [0x00007FF6F5E511B9]\n\t(No symbol) [0x00007FF6F5DA55E5]\n\tGetHandleVerifier [0x00007FF6F634436D+3525677]\n\tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\n\tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\n\t(No symbol) [0x00007FF6F5F5990F]\n\t(No symbol) [0x00007FF6F5DA41FF]\n\tGetHandleVerifier [0x00007FF6F63C25D8+4042392]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\n", "trace": "  File \"E:\\AutoTest\\FgAI\\test_001\\AssistedG2.py\", line 107, in test_assisted_reading\n    self.assisted_page.refresh_and_uncheck_record3()\n  File \"E:\\AutoTest\\FgAI\\pages\\assisted_reading_page.py\", line 394, in refresh_and_uncheck_record3\n    refresh_button = self.wait.until(\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 137, in until\n    value = method(self._driver)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 633, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 898, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1743129841564, "stop": 1743129841564}], "start": 1743129771814, "stop": 1743129841569, "uuid": "cb7f26e9-0273-406f-83fc-0fba5d443f4d", "historyId": "2c447ee1694e423ad373f0ae9ae642e6", "testCaseId": "2c447ee1694e423ad373f0ae9ae642e6", "fullName": "test_001.AssistedG2.TestAssistedReading#test_assisted_reading", "labels": [{"name": "severity", "value": "critical"}, {"name": "epic", "value": "FGAI自动化测试"}, {"name": "feature", "value": "辅助阅卷"}, {"name": "story", "value": "辅助阅卷流程"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "AssistedG2"}, {"name": "subSuite", "value": "TestAssistedReading"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "19668-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.AssistedG2"}]}