{"name": "测试案件的添加、修改和删除", "status": "broken", "statusDetails": {"message": "Exception: 创建WebDriver实例失败: __init__() got an unexpected keyword argument 'path'", "trace": "cls = <class 'common.driver_manager.DriverManager'>, headless = True\n\n    @classmethod\n    def get_driver(cls, headless=True):\n        \"\"\"获取或创建WebDriver实例\"\"\"\n        try:\n            # 检查现有driver是否可用\n            if cls._driver:\n                try:\n                    # 验证driver是否有效\n                    cls._driver.current_url\n                    cls._last_used = time.time()\n                    return cls._driver\n                except WebDriverException:\n                    logger.warning(\"检测到无效的WebDriver实例，将重新创建...\")\n                    cls.quit_driver()\n    \n            logger.info(\"开始创建Chrome WebDriver实例...\")\n    \n            # 创建 Chrome 选项\n            chrome_options = Options()\n            chrome_options.add_argument('--no-sandbox')\n            chrome_options.add_argument('--disable-dev-shm-usage')\n            chrome_options.add_argument('--disable-gpu')\n            chrome_options.add_argument('--ignore-certificate-errors')\n    \n            # 启用无头模式（可选）\n            if headless:\n                chrome_options.add_argument('--headless')\n    \n            # 设置下载路径\n            download_path = os.path.join(os.getcwd(), 'downloads')\n            if not os.path.exists(download_path):\n                os.makedirs(download_path)\n    \n            chrome_options.add_experimental_option('prefs', {\n                'download.default_directory': download_path,\n                'download.prompt_for_download': False,\n                'profile.default_content_settings.popups': 0,\n            })\n    \n            logger.info(\"Chrome选项配置完成\")\n    \n            # 使用缓存的 ChromeDriver 路径\n>           chrome_driver_path = ChromeDriverManager(path=\".wdm\").install()\nE           TypeError: __init__() got an unexpected keyword argument 'path'\n\n..\\common\\driver_manager.py:71: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture(scope=\"session\")\n    def driver():\n        \"\"\"提供WebDriver实例\"\"\"\n        try:\n            # 获取driver实例\n>           driver = DriverManager.get_driver()\n\n..\\conftest.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'common.driver_manager.DriverManager'>, headless = True\n\n    @classmethod\n    def get_driver(cls, headless=True):\n        \"\"\"获取或创建WebDriver实例\"\"\"\n        try:\n            # 检查现有driver是否可用\n            if cls._driver:\n                try:\n                    # 验证driver是否有效\n                    cls._driver.current_url\n                    cls._last_used = time.time()\n                    return cls._driver\n                except WebDriverException:\n                    logger.warning(\"检测到无效的WebDriver实例，将重新创建...\")\n                    cls.quit_driver()\n    \n            logger.info(\"开始创建Chrome WebDriver实例...\")\n    \n            # 创建 Chrome 选项\n            chrome_options = Options()\n            chrome_options.add_argument('--no-sandbox')\n            chrome_options.add_argument('--disable-dev-shm-usage')\n            chrome_options.add_argument('--disable-gpu')\n            chrome_options.add_argument('--ignore-certificate-errors')\n    \n            # 启用无头模式（可选）\n            if headless:\n                chrome_options.add_argument('--headless')\n    \n            # 设置下载路径\n            download_path = os.path.join(os.getcwd(), 'downloads')\n            if not os.path.exists(download_path):\n                os.makedirs(download_path)\n    \n            chrome_options.add_experimental_option('prefs', {\n                'download.default_directory': download_path,\n                'download.prompt_for_download': False,\n                'profile.default_content_settings.popups': 0,\n            })\n    \n            logger.info(\"Chrome选项配置完成\")\n    \n            # 使用缓存的 ChromeDriver 路径\n            chrome_driver_path = ChromeDriverManager(path=\".wdm\").install()\n            service = Service(chrome_driver_path)\n            logger.info(\"ChromeDriver 安装/更新成功\")\n    \n            # 创建 WebDriver 实例\n            cls._driver = webdriver.Chrome(service=service, options=chrome_options)\n            cls._driver.implicitly_wait(10)  # 设置隐式等待时间\n            cls._last_used = time.time()\n    \n            # 记录版本信息\n            try:\n                chrome_version = cls._driver.capabilities['browserVersion']\n                chrome_driver_version = cls._driver.capabilities['chrome']['chromedriverVersion'].split(\" \")[0]\n                logger.info(f\"Chrome版本: {chrome_version}\")\n                logger.info(f\"ChromeDriver版本: {chrome_driver_version}\")\n            except Exception as e:\n                logger.warning(f\"无法获取版本信息: {str(e)}\")\n    \n            logger.info(\"成功创建Chrome WebDriver实例\")\n            return cls._driver\n    \n        except Exception as e:\n            error_msg = f\"创建WebDriver实例失败: {str(e)}\"\n            logger.error(error_msg)\n            logger.error(\"系统信息:\")\n            logger.error(f\"Python版本: {sys.version}\")\n            logger.error(f\"Selenium版本: {webdriver.__version__}\")\n            logger.error(f\"操作系统: {os.name}\")\n    \n            cls.quit_driver()\n>           raise Exception(error_msg)\nE           Exception: 创建WebDriver实例失败: __init__() got an unexpected keyword argument 'path'\n\n..\\common\\driver_manager.py:101: Exception"}, "description": "测试案件的添加、修改和删除功能", "attachments": [{"name": "log", "source": "8b3f8266-d726-4d38-bf98-fd95f65617c5-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "e98dd9e4-e4d9-4b7c-9256-2370a5dbb6b7-attachment.txt", "type": "text/plain"}], "start": 1742889976240, "stop": 1742889976240, "uuid": "22ca7967-5b5b-4f39-ba58-79950512b7d5", "historyId": "f35a86ea027d058924d82bec7f30547d", "testCaseId": "f35a86ea027d058924d82bec7f30547d", "fullName": "test_001.test_CaseMg.TestCaseManagement#test_case_crud", "labels": [{"name": "story", "value": "案件增删改功能"}, {"name": "epic", "value": "法官AI系统测试"}, {"name": "feature", "value": "案件管理功能"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_CaseMg"}, {"name": "subSuite", "value": "TestCaseManagement"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "6384-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_CaseMg"}]}