{"name": "test_personal_center_workflow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x005EC7F3+24435]\n\t(No symbol) [0x00572074]\n\t(No symbol) [0x0044055E]\n\t(No symbol) [0x0047B9D8]\n\t(No symbol) [0x004AD676]\n\t(No symbol) [0x004A904C]\n\t(No symbol) [0x004A85C6]\n\t(No symbol) [0x00413245]\n\t(No symbol) [0x0041379E]\n\t(No symbol) [0x00413C1D]\n\tGetHandleVerifier [0x008F70A3+3213347]\n\tGetHandleVerifier [0x0090B0C9+3295305]\n\tGetHandleVerifier [0x0090558C+3271948]\n\tGetHandleVerifier [0x00687360+658144]\n\t(No symbol) [0x0057B27D]\n\t(No symbol) [0x00412F10]\n\t(No symbol) [0x00412ACA]\n\tGetHandleVerifier [0x0097E9AC+3768620]\n\tBaseThreadInitThunk [0x75005D49+25]\n\tRtlInitializeExceptionChain [0x7726CE3B+107]\n\tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]", "trace": "self = <FgAI.test_001.test_UserCenter.TestPersonalCenter object at 0x000001B64D6C2700>\n\n    def do_report_statistics(self):\n        \"\"\"执行报表统计功能\"\"\"\n        with allure.step(\"测试报表统计功能\"):\n            try:\n                # 点击右上角菜单\n                self.click_user_menu()\n    \n                with allure.step(\"点击报表统计选项\"):\n>                   report_option = WebDriverWait(self.driver, 10).until(\n                        EC.element_to_be_clickable((By.XPATH, \"//li[contains(text(),'报表统计')]\"))\n                    )\n\ntest_UserCenter.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:633: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B64D5CB910>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7726CE3B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=134.0.6998.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x005EC7F3+24435]\nE       \t(No symbol) [0x00572074]\nE       \t(No symbol) [0x004406E3]\nE       \t(No symbol) [0x0042FEC0]\nE       \t(No symbol) [0x0044DFDF]\nE       \t(No symbol) [0x004B46AF]\nE       \t(No symbol) [0x004CEB19]\nE       \t(No symbol) [0x004AD5B6]\nE       \t(No symbol) [0x0047C54F]\nE       \t(No symbol) [0x0047D894]\nE       \tGetHandleVerifier [0x008F70A3+3213347]\nE       \tGetHandleVerifier [0x0090B0C9+3295305]\nE       \tGetHandleVerifier [0x0090558C+3271948]\nE       \tGetHandleVerifier [0x00687360+658144]\nE       \t(No symbol) [0x0057B27D]\nE       \t(No symbol) [0x00578208]\nE       \t(No symbol) [0x005783A9]\nE       \t(No symbol) [0x0056AAC0]\nE       \tBaseThreadInitThunk [0x75005D49+25]\nE       \tRtlInitializeExceptionChain [0x7726CE3B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <FgAI.test_001.test_UserCenter.TestPersonalCenter object at 0x000001B64D6C2700>\n\n    @allure.feature(\"个人中心\")\n    @allure.story(\"完整测试流程\")\n    def test_personal_center_workflow(self):\n        \"\"\"测试个人中心完整流程\"\"\"\n        try:\n            # 登录\n            self.base_page = BasePage(self.driver)\n            self.login_page = LoginPage(self.driver)\n            # 执行登录\n            self.login_page.login(\"wxdfg\", \"wxd341134@\")\n            logger.info(\"完成登录\")\n            time.sleep(2)  # 等待页面加载完成\n    \n            # 1. 报表统计\n>           self.do_report_statistics()\n\ntest_UserCenter.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_UserCenter.py:125: in do_report_statistics\n    allure.attach(self.driver.get_screenshot_as_png(), \"失败截图\", allure.attachment_type.PNG)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B64D5CB910>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7726CE3B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x005EC7F3+24435]\nE       \t(No symbol) [0x00572074]\nE       \t(No symbol) [0x0044055E]\nE       \t(No symbol) [0x0047B9D8]\nE       \t(No symbol) [0x004AD676]\nE       \t(No symbol) [0x004A904C]\nE       \t(No symbol) [0x004A85C6]\nE       \t(No symbol) [0x00413245]\nE       \t(No symbol) [0x0041379E]\nE       \t(No symbol) [0x00413C1D]\nE       \tGetHandleVerifier [0x008F70A3+3213347]\nE       \tGetHandleVerifier [0x0090B0C9+3295305]\nE       \tGetHandleVerifier [0x0090558C+3271948]\nE       \tGetHandleVerifier [0x00687360+658144]\nE       \t(No symbol) [0x0057B27D]\nE       \t(No symbol) [0x00412F10]\nE       \t(No symbol) [0x00412ACA]\nE       \tGetHandleVerifier [0x0097E9AC+3768620]\nE       \tBaseThreadInitThunk [0x75005D49+25]\nE       \tRtlInitializeExceptionChain [0x7726CE3B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <FgAI.test_001.test_UserCenter.TestPersonalCenter object at 0x000001B64D6C2700>\n\n    @allure.feature(\"个人中心\")\n    @allure.story(\"完整测试流程\")\n    def test_personal_center_workflow(self):\n        \"\"\"测试个人中心完整流程\"\"\"\n        try:\n            # 登录\n            self.base_page = BasePage(self.driver)\n            self.login_page = LoginPage(self.driver)\n            # 执行登录\n            self.login_page.login(\"wxdfg\", \"wxd341134@\")\n            logger.info(\"完成登录\")\n            time.sleep(2)  # 等待页面加载完成\n    \n            # 1. 报表统计\n            self.do_report_statistics()\n    \n            # 2. 字体下载\n            self.do_font_download()\n    \n            # 3. 修改密码 (修改密码后系统会自动退出)\n            self.do_change_password()\n    \n            # 4. 直接使用新密码登录\n            self.do_verify_new_password()\n    \n        except Exception as e:\n            logger.error(f\"个人中心测试流程失败: {str(e)}\")\n>           allure.attach(self.driver.get_screenshot_as_png(), \"失败截图\", allure.attachment_type.PNG)\n\ntest_UserCenter.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B64D5CB910>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7726CE3B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x005EC7F3+24435]\nE       \t(No symbol) [0x00572074]\nE       \t(No symbol) [0x0044055E]\nE       \t(No symbol) [0x0047B9D8]\nE       \t(No symbol) [0x004AD676]\nE       \t(No symbol) [0x004A904C]\nE       \t(No symbol) [0x004A85C6]\nE       \t(No symbol) [0x00413245]\nE       \t(No symbol) [0x0041379E]\nE       \t(No symbol) [0x00413C1D]\nE       \tGetHandleVerifier [0x008F70A3+3213347]\nE       \tGetHandleVerifier [0x0090B0C9+3295305]\nE       \tGetHandleVerifier [0x0090558C+3271948]\nE       \tGetHandleVerifier [0x00687360+658144]\nE       \t(No symbol) [0x0057B27D]\nE       \t(No symbol) [0x00412F10]\nE       \t(No symbol) [0x00412ACA]\nE       \tGetHandleVerifier [0x0097E9AC+3768620]\nE       \tBaseThreadInitThunk [0x75005D49+25]\nE       \tRtlInitializeExceptionChain [0x7726CE3B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "测试个人中心完整流程", "steps": [{"name": "打开登录页面: http://192.168.2.176:86/#/case/index", "status": "passed", "attachments": [{"name": "login_page", "source": "a0cc3291-13f7-4343-be13-1d762b8e7bfe-attachment.png", "type": "image/png"}], "start": 1742888555481, "stop": 1742888556997}, {"name": "输入用户名: wxdfg", "status": "passed", "start": 1742888556997, "stop": 1742888558719}, {"name": "输入密码", "status": "passed", "start": 1742888558719, "stop": 1742888561547}, {"name": "输入验证码", "status": "passed", "attachments": [{"name": "captcha_image", "source": "6a35aab6-647c-44c0-8464-081cfd2ecc6a-attachment.png", "type": "image/png"}], "start": 1742888561548, "stop": 1742888570076}, {"name": "点击登录按钮", "status": "passed", "attachments": [{"name": "login_success", "source": "ae0abbd6-dd74-4f09-ad41-16aae93906b8-attachment.png", "type": "image/png"}], "start": 1742888570076, "stop": 1742888572228}, {"name": "测试报表统计功能", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x005EC7F3+24435]\n\t(No symbol) [0x00572074]\n\t(No symbol) [0x0044055E]\n\t(No symbol) [0x0047B9D8]\n\t(No symbol) [0x004AD676]\n\t(No symbol) [0x004A904C]\n\t(No symbol) [0x004A85C6]\n\t(No symbol) [0x00413245]\n\t(No symbol) [0x0041379E]\n\t(No symbol) [0x00413C1D]\n\tGetHandleVerifier [0x008F70A3+3213347]\n\tGetHandleVerifier [0x0090B0C9+3295305]\n\tGetHandleVerifier [0x0090558C+3271948]\n\tGetHandleVerifier [0x00687360+658144]\n\t(No symbol) [0x0057B27D]\n\t(No symbol) [0x00412F10]\n\t(No symbol) [0x00412ACA]\n\tGetHandleVerifier [0x0097E9AC+3768620]\n\tBaseThreadInitThunk [0x75005D49+25]\n\tRtlInitializeExceptionChain [0x7726CE3B+107]\n\tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]\n\n", "trace": "  File \"E:\\AutoTest\\FgAI\\test_001\\test_UserCenter.py\", line 125, in do_report_statistics\n    allure.attach(self.driver.get_screenshot_as_png(), \"失败截图\", allure.attachment_type.PNG)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1003, in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1013, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "点击右上角用户菜单", "status": "passed", "start": 1742888574228, "stop": 1742888575324}, {"name": "点击报表统计选项", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=134.0.6998.118)\nStacktrace:\n\tGetHandleVerifier [0x005EC7F3+24435]\n\t(No symbol) [0x00572074]\n\t(No symbol) [0x004406E3]\n\t(No symbol) [0x0042FEC0]\n\t(No symbol) [0x0044DFDF]\n\t(No symbol) [0x004B46AF]\n\t(No symbol) [0x004CEB19]\n\t(No symbol) [0x004AD5B6]\n\t(No symbol) [0x0047C54F]\n\t(No symbol) [0x0047D894]\n\tGetHandleVerifier [0x008F70A3+3213347]\n\tGetHandleVerifier [0x0090B0C9+3295305]\n\tGetHandleVerifier [0x0090558C+3271948]\n\tGetHandleVerifier [0x00687360+658144]\n\t(No symbol) [0x0057B27D]\n\t(No symbol) [0x00578208]\n\t(No symbol) [0x005783A9]\n\t(No symbol) [0x0056AAC0]\n\tBaseThreadInitThunk [0x75005D49+25]\n\tRtlInitializeExceptionChain [0x7726CE3B+107]\n\tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]\n\n", "trace": "  File \"E:\\AutoTest\\FgAI\\test_001\\test_UserCenter.py\", line 84, in do_report_statistics\n    report_option = WebDriverWait(self.driver, 10).until(\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 137, in until\n    value = method(self._driver)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 633, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 898, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1742888575324, "stop": 1742888583740}], "start": 1742888574228, "stop": 1742888583794}], "attachments": [{"name": "log", "source": "1fbfda04-5034-4c30-add0-67cb8b57883a-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "a70bcbd6-7f23-4c8a-b43a-d244bd2af41f-attachment.txt", "type": "text/plain"}], "start": 1742888555481, "stop": 1742888583795, "uuid": "5ecc21e5-16b5-451a-bee0-23e828d81da3", "historyId": "1411408b10fd896b372e133dea5137f8", "testCaseId": "1411408b10fd896b372e133dea5137f8", "fullName": "test_001.test_UserCenter.TestPersonalCenter#test_personal_center_workflow", "labels": [{"name": "story", "value": "完整测试流程"}, {"name": "feature", "value": "个人中心"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_UserCenter"}, {"name": "subSuite", "value": "TestPersonalCenter"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "20552-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_UserCenter"}]}