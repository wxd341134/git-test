{"name": "test_personal_center_workflow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF663CBDF85+26693]\n\t(No symbol) [0x00007FF663C1EAD0]\n\t(No symbol) [0x00007FF663AA8FFC]\n\t(No symbol) [0x00007FF663AEF69F]\n\t(No symbol) [0x00007FF663B277B2]\n\t(No symbol) [0x00007FF663B2210E]\n\t(No symbol) [0x00007FF663B211B9]\n\t(No symbol) [0x00007FF663A755E5]\n\tGetHandleVerifier [0x00007FF66401436D+3525677]\n\tGetHandleVerifier [0x00007FF664027F3B+3606523]\n\tGetHandleVerifier [0x00007FF66401CEE3+3561379]\n\tGetHandleVerifier [0x00007FF663D87C0A+853194]\n\t(No symbol) [0x00007FF663C2990F]\n\t(No symbol) [0x00007FF663A741FF]\n\tGetHandleVerifier [0x00007FF6640925D8+4042392]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]", "trace": "self = <pages.login_page.LoginPage object at 0x0000022372479B80>, timeout = 60\n\n    def wait_for_verify_code(self, timeout=60):\n        \"\"\"等待并处理验证码输入\"\"\"\n        try:\n            # 找到验证码输入框\n            verify_code_element = self.wait.until(\n                EC.presence_of_element_located(self.verify_code_input)\n            )\n    \n            # 高亮验证码输入框\n            self.driver.execute_script(\"\"\"\n                arguments[0].style.border = '2px solid red';\n                arguments[0].style.backgroundColor = '#fff3f3';\n            \"\"\", verify_code_element)\n    \n            logger.info(\"=\"*50)\n            logger.info(\"请在弹出窗口中输入验证码\")\n            logger.info(\"=\"*50)\n    \n            # 获取验证码\n            verify_code = self.get_verify_code_from_user()\n    \n            if verify_code:\n                # 清空输入框\n                verify_code_element.clear()\n                time.sleep(0.5)\n    \n                # 输入验证码\n                verify_code_element.send_keys(verify_code)\n                logger.info(\"验证码已自动填入\")\n    \n                # 恢复输入框样式\n                self.driver.execute_script(\"\"\"\n                    arguments[0].style.border = '';\n                    arguments[0].style.backgroundColor = '';\n                \"\"\", verify_code_element)\n    \n                time.sleep(1)\n                return True\n            else:\n>               self.handle_error(\"验证码输入为空\")\n\n..\\pages\\login_page.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x0000022372479B80>\nerror_msg = '验证码输入为空', take_screenshot = True\n\n    def handle_error(self, error_msg, take_screenshot=True):\n        \"\"\"统一的错误处理方法\"\"\"\n        logger.error(error_msg)\n        if take_screenshot:\n            try:\n                allure.attach(\n                    self.driver.get_screenshot_as_png(),\n                    name=\"error_screenshot\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n            except:\n                logger.error(\"无法截图\")\n        # 关闭浏览器\n        try:\n            DriverManager.quit_driver()\n        except:\n            pass\n>       raise Exception(error_msg)\nE       Exception: 验证码输入为空\n\n..\\pages\\login_page.py:43: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pages.login_page.LoginPage object at 0x0000022372479B80>\nusername = 'wxdfg', password = 'wxd341134@'\n\n    def login(self, username=\"wxdfg\", password=\"wxd341134@\"):\n        \"\"\"执行登录操作\"\"\"\n        try:\n            # 打开登录页面\n            self.open_login_page()\n    \n            # 输入用户名\n            logger.info(f\"开始输入用户名: {username}\")\n            try:\n                username_element = self.wait.until(\n                    EC.element_to_be_clickable(self.username_input)\n                )\n                username_element.clear()\n                username_element.send_keys(username)\n                logger.info(\"用户名输入完成\")\n            except Exception as e:\n                self.handle_error(f\"用户名输入失败: {str(e)}\")\n    \n            # 输入密码\n            logger.info(\"开始输入密码\")\n            try:\n                password_element = self.wait.until(\n                    EC.element_to_be_clickable(self.password_input)\n                )\n                password_element.clear()\n                password_element.send_keys(password)\n                logger.info(\"密码输入完成\")\n            except Exception as e:\n                self.handle_error(f\"密码输入失败: {str(e)}\")\n    \n            # 处理验证码\n>           if not self.wait_for_verify_code():\n\n..\\pages\\login_page.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\login_page.py:108: in wait_for_verify_code\n    self.handle_error(f\"验证码处理失败: {str(e)}\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x0000022372479B80>\nerror_msg = '验证码处理失败: 验证码输入为空', take_screenshot = True\n\n    def handle_error(self, error_msg, take_screenshot=True):\n        \"\"\"统一的错误处理方法\"\"\"\n        logger.error(error_msg)\n        if take_screenshot:\n            try:\n                allure.attach(\n                    self.driver.get_screenshot_as_png(),\n                    name=\"error_screenshot\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n            except:\n                logger.error(\"无法截图\")\n        # 关闭浏览器\n        try:\n            DriverManager.quit_driver()\n        except:\n            pass\n>       raise Exception(error_msg)\nE       Exception: 验证码处理失败: 验证码输入为空\n\n..\\pages\\login_page.py:43: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <FgAI.test_001.test_UserCenter.TestPersonalCenter object at 0x000002237240BB80>\n\n    @allure.feature(\"个人中心\")\n    @allure.story(\"完整测试流程\")\n    def test_personal_center_workflow(self):\n        \"\"\"测试个人中心完整流程\"\"\"\n        try:\n            # 登录\n            self.base_page = BasePage(self.driver)\n            self.login_page = LoginPage(self.driver)\n            # 执行登录\n>           assert self.login_page.login(\"wxdfg\", \"wxd341134@\"), \"登录失败\"\n\ntest_UserCenter.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\login_page.py:173: in login\n    self.handle_error(f\"登录过程失败: {str(e)}\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x0000022372479B80>\nerror_msg = '登录过程失败: 验证码处理失败: 验证码输入为空', take_screenshot = True\n\n    def handle_error(self, error_msg, take_screenshot=True):\n        \"\"\"统一的错误处理方法\"\"\"\n        logger.error(error_msg)\n        if take_screenshot:\n            try:\n                allure.attach(\n                    self.driver.get_screenshot_as_png(),\n                    name=\"error_screenshot\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n            except:\n                logger.error(\"无法截图\")\n        # 关闭浏览器\n        try:\n            DriverManager.quit_driver()\n        except:\n            pass\n>       raise Exception(error_msg)\nE       Exception: 登录过程失败: 验证码处理失败: 验证码输入为空\n\n..\\pages\\login_page.py:43: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <FgAI.test_001.test_UserCenter.TestPersonalCenter object at 0x000002237240BB80>\n\n    @allure.feature(\"个人中心\")\n    @allure.story(\"完整测试流程\")\n    def test_personal_center_workflow(self):\n        \"\"\"测试个人中心完整流程\"\"\"\n        try:\n            # 登录\n            self.base_page = BasePage(self.driver)\n            self.login_page = LoginPage(self.driver)\n            # 执行登录\n            assert self.login_page.login(\"wxdfg\", \"wxd341134@\"), \"登录失败\"\n            logger.info(\"完成登录\")\n            time.sleep(2)  # 等待页面加载完成\n    \n            # 确保登录成功后继续执行后续操作\n            self.click_user_menu()  # 点击用户菜单\n            # 继续执行其他操作\n            self.do_report_statistics()\n            self.do_font_download()\n            self.do_change_password()\n            self.do_verify_new_password()\n    \n        except Exception as e:\n            logger.error(f\"个人中心测试流程失败: {str(e)}\")\n>           allure.attach(self.driver.get_screenshot_as_png(), \"失败截图\", allure.attachment_type.PNG)\n\ntest_UserCenter.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022372479130>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...925D8+4042392]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF663CBDF85+26693]\nE       \t(No symbol) [0x00007FF663C1EAD0]\nE       \t(No symbol) [0x00007FF663AA8FFC]\nE       \t(No symbol) [0x00007FF663AEF69F]\nE       \t(No symbol) [0x00007FF663B277B2]\nE       \t(No symbol) [0x00007FF663B2210E]\nE       \t(No symbol) [0x00007FF663B211B9]\nE       \t(No symbol) [0x00007FF663A755E5]\nE       \tGetHandleVerifier [0x00007FF66401436D+3525677]\nE       \tGetHandleVerifier [0x00007FF664027F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF66401CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF663D87C0A+853194]\nE       \t(No symbol) [0x00007FF663C2990F]\nE       \t(No symbol) [0x00007FF663A741FF]\nE       \tGetHandleVerifier [0x00007FF6640925D8+4042392]\nE       \tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "测试个人中心完整流程", "attachments": [{"name": "log", "source": "ca8444a9-ab16-451d-9234-1f4ea99194f8-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "ccb865d5-3fab-4499-a8fe-d2f59e7fd5ec-attachment.txt", "type": "text/plain"}], "start": 1742969815015, "stop": 1742969820956, "uuid": "e066bb53-689c-40e2-b380-fe8a2ae04fe2", "historyId": "1411408b10fd896b372e133dea5137f8", "testCaseId": "1411408b10fd896b372e133dea5137f8", "fullName": "test_001.test_UserCenter.TestPersonalCenter#test_personal_center_workflow", "labels": [{"name": "story", "value": "完整测试流程"}, {"name": "feature", "value": "个人中心"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_UserCenter"}, {"name": "subSuite", "value": "TestPersonalCenter"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "24736-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_UserCenter"}]}