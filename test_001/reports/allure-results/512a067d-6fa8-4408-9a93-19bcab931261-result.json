{"name": "上传ZIP格式卷宗文件", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=134.0.6998.177)\nStacktrace:\n\tGetHandleVerifier [0x00007FF686B2DF85+26693]\n\t(No symbol) [0x00007FF686A8EAD0]\n\t(No symbol) [0x00007FF6869191CA]\n\t(No symbol) [0x00007FF6868F1763]\n\t(No symbol) [0x00007FF68699F5EE]\n\t(No symbol) [0x00007FF6869BF975]\n\t(No symbol) [0x00007FF6869976C3]\n\t(No symbol) [0x00007FF686960490]\n\t(No symbol) [0x00007FF686961743]\n\tGetHandleVerifier [0x00007FF686E8436D+3525677]\n\tGetHandleVerifier [0x00007FF686E97F3B+3606523]\n\tGetHandleVerifier [0x00007FF686E8CEE3+3561379]\n\tGetHandleVerifier [0x00007FF686BF7C0A+853194]\n\t(No symbol) [0x00007FF686A9990F]\n\t(No symbol) [0x00007FF686A95674]\n\t(No symbol) [0x00007FF686A95816]\n\t(No symbol) [0x00007FF686A84D89]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]", "trace": "self = <FgAI.test_001.test_DossierU.TestDossierUpload object at 0x000001E097D8CFD0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4361e00c408015b16b374de43af2eb87\")>\n\n    @pytest.fixture(scope=\"class\", autouse=True)\n    def setup_class(self, driver):\n        \"\"\"类级别的设置，只在类开始时执行一次\"\"\"\n        self.driver = driver\n        self.wait = WebDriverWait(self.driver, 10)\n        self.login_page = LoginPage(self.driver)\n    \n        # 页面元素定位器\n        self.case_menu = (By.XPATH, \"//span[text()='案件管理']\")\n        self.add_case_button = (By.XPATH, \"//span[text()='新增']\")\n        self.case_name_input = (By.XPATH, \"//input[@placeholder='请输入案件名称']\")\n        self.submit_button = (By.XPATH, \"//span[text()='确 定']/parent::button\")\n        self.search_input = (By.XPATH, \"//input[@placeholder='请输入搜索关键词']\")\n        self.search_button = (By.XPATH, \"//span[text()='搜 索']/parent::button\")\n        self.edit_button = (By.XPATH, \"//span[text()='编辑']\")\n        self.delete_button = (By.XPATH, \"//span[text()='删除']\")\n        self.confirm_delete = (By.XPATH, \"//span[text()='确 定']/parent::button\")\n    \n        try:\n            # 定位到指定案件\n            self.case_number = \"(2025)苏0105民初0001号\"\n            # 等待并点击指定案件的上传卷宗按钮\n>           self._click_upload_button()\n\ntest_DossierU.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_DossierU.py:55: in _click_upload_button\n    upload_button = self.wait.until(EC.element_to_be_clickable((\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:634: in _predicate\n    element = visibility_of(target)(driver)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:260: in _predicate\n    return _element_if_visible(element)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = None, visibility = True\n\n    def _element_if_visible(element: WebElement, visibility: bool = True) -> Union[Literal[False], WebElement]:\n        \"\"\"An expectation for checking that an element, known to be present on the\n        DOM of a page, is of the expected visibility.\n    \n        Parameters:\n        ----------\n        element : WebElement\n            The WebElement to check.\n        visibility : bool\n            The expected visibility of the element.\n    \n        Returns:\n        -------\n        WebElement : The WebElement once it is visible or not visible.\n        \"\"\"\n>       return element if element.is_displayed() == visibility else False\nE       AttributeError: 'NoneType' object has no attribute 'is_displayed'\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:280: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <FgAI.test_001.test_DossierU.TestDossierUpload object at 0x000001E097D8CFD0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4361e00c408015b16b374de43af2eb87\")>\n\n    @pytest.fixture(scope=\"class\", autouse=True)\n    def setup_class(self, driver):\n        \"\"\"类级别的设置，只在类开始时执行一次\"\"\"\n        self.driver = driver\n        self.wait = WebDriverWait(self.driver, 10)\n        self.login_page = LoginPage(self.driver)\n    \n        # 页面元素定位器\n        self.case_menu = (By.XPATH, \"//span[text()='案件管理']\")\n        self.add_case_button = (By.XPATH, \"//span[text()='新增']\")\n        self.case_name_input = (By.XPATH, \"//input[@placeholder='请输入案件名称']\")\n        self.submit_button = (By.XPATH, \"//span[text()='确 定']/parent::button\")\n        self.search_input = (By.XPATH, \"//input[@placeholder='请输入搜索关键词']\")\n        self.search_button = (By.XPATH, \"//span[text()='搜 索']/parent::button\")\n        self.edit_button = (By.XPATH, \"//span[text()='编辑']\")\n        self.delete_button = (By.XPATH, \"//span[text()='删除']\")\n        self.confirm_delete = (By.XPATH, \"//span[text()='确 定']/parent::button\")\n    \n        try:\n            # 定位到指定案件\n            self.case_number = \"(2025)苏0105民初0001号\"\n            # 等待并点击指定案件的上传卷宗按钮\n            self._click_upload_button()\n    \n        except Exception as e:\n            allure.attach(\n>               self.driver.get_screenshot_as_png(),\n                name=\"setup_failed\",\n                attachment_type=allure.attachment_type.PNG\n            )\n\ntest_DossierU.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E098691D00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF686A84D89]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=134.0.6998.177)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF686B2DF85+26693]\nE       \t(No symbol) [0x00007FF686A8EAD0]\nE       \t(No symbol) [0x00007FF6869191CA]\nE       \t(No symbol) [0x00007FF6868F1763]\nE       \t(No symbol) [0x00007FF68699F5EE]\nE       \t(No symbol) [0x00007FF6869BF975]\nE       \t(No symbol) [0x00007FF6869976C3]\nE       \t(No symbol) [0x00007FF686960490]\nE       \t(No symbol) [0x00007FF686961743]\nE       \tGetHandleVerifier [0x00007FF686E8436D+3525677]\nE       \tGetHandleVerifier [0x00007FF686E97F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF686E8CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF686BF7C0A+853194]\nE       \t(No symbol) [0x00007FF686A9990F]\nE       \t(No symbol) [0x00007FF686A95674]\nE       \t(No symbol) [0x00007FF686A95816]\nE       \t(No symbol) [0x00007FF686A84D89]\nE       \tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "description": "测试上传ZIP格式的卷宗文件", "attachments": [{"name": "log", "source": "b0a613a7-b324-452a-a7f9-b1c916c06c9e-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "dc58a5c1-17ac-481a-8159-0b14175a2586-attachment.txt", "type": "text/plain"}], "start": 1742977141632, "stop": 1742977141632, "uuid": "88b727db-81a8-4b79-a3c6-8f43c79d7c1e", "historyId": "7bfc76027bcab22ccf8eee51e2be6881", "testCaseId": "7bfc76027bcab22ccf8eee51e2be6881", "fullName": "test_001.test_DossierU.TestDossierUpload#test_01_upload_zip_file", "labels": [{"name": "epic", "value": "FGAI自动化测试"}, {"name": "story", "value": "卷宗上传"}, {"name": "feature", "value": "卷宗管理"}, {"name": "tag", "value": "run(order=1)"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_DossierU"}, {"name": "subSuite", "value": "TestDossierUpload"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "17316-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_DossierU"}]}