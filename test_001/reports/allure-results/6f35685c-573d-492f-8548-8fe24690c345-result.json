{"name": "卷宗上传流程测试", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"ant-btn ant-btn-primary\">...</button> is not clickable at point (373, 91). Other element would receive the click: <div tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"rcDialogTitle1\" class=\"ant-modal-wrap animate__animated animate__fadeInDownBig\">...</div>\n  (Session info: chrome=134.0.6998.177)\nStacktrace:\n\tGetHandleVerifier [0x00007FF686B2DF85+26693]\n\t(No symbol) [0x00007FF686A8EAD0]\n\t(No symbol) [0x00007FF6869191CA]\n\t(No symbol) [0x00007FF6869775E9]\n\t(No symbol) [0x00007FF686974FA2]\n\t(No symbol) [0x00007FF686972051]\n\t(No symbol) [0x00007FF686970F76]\n\t(No symbol) [0x00007FF6869627E4]\n\t(No symbol) [0x00007FF6869978EA]\n\t(No symbol) [0x00007FF686962096]\n\t(No symbol) [0x00007FF686997B00]\n\t(No symbol) [0x00007FF6869C00B8]\n\t(No symbol) [0x00007FF6869976C3]\n\t(No symbol) [0x00007FF686960490]\n\t(No symbol) [0x00007FF686961743]\n\tGetHandleVerifier [0x00007FF686E8436D+3525677]\n\tGetHandleVerifier [0x00007FF686E97F3B+3606523]\n\tGetHandleVerifier [0x00007FF686E8CEE3+3561379]\n\tGetHandleVerifier [0x00007FF686BF7C0A+853194]\n\t(No symbol) [0x00007FF686A9990F]\n\t(No symbol) [0x00007FF686A95674]\n\t(No symbol) [0x00007FF686A95816]\n\t(No symbol) [0x00007FF686A84D89]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]", "trace": "self = <FgAI.test_001.test_卷宗上传.TestDossierUpload object at 0x000001D0626AA520>\n\n    @allure.title(\"卷宗上传流程测试\")\n    def test_dossier_upload(self):\n        \"\"\"测试卷宗上传流程\"\"\"\n        try:\n            # 1. 登录系统\n            logger.info(\"开始登录系统\")\n            self.login_page.login()\n            time.sleep(2)\n            logger.info(\"登录成功\")\n    \n            # 2. 点击上传卷宗按钮\n            logger.info(\"点击上传卷宗按钮\")\n            upload_button = self.wait.until(EC.element_to_be_clickable(\n                (By.XPATH, \"//td[@title='(2025)苏0105民初0001号'][1]/ancestor::div[contains(@class, 'ant-table-content')]/div[3]/div[2]/div/table/tbody/tr[2]/td[3]/div/div[1]\")\n            ))\n            upload_button.click()\n            time.sleep(2)  # 等待页面加载\n    \n            # 3. 点击上传zip按钮\n            logger.info(\"点击上传zip按钮\")\n            upload_zip_button = self.wait.until(\n                EC.element_to_be_clickable((By.XPATH, \"//div[@class='tree-button-group ant-btn-group']//button[2]\"))\n            )\n            upload_zip_button.click()\n            time.sleep(1)\n    \n            # 4. 上传ZIP文件\n            if self.zip_file_path and os.path.exists(self.zip_file_path):\n                logger.info(f\"上传ZIP文件: {self.zip_file_path}\")\n                file_input = self.wait.until(EC.presence_of_element_located(\n                    (By.CSS_SELECTOR, \"input[type='file']\")\n                ))\n                file_input.send_keys(self.zip_file_path)\n                logger.info(\"ZIP文件已选择\")\n                time.sleep(2)  # 等待上传\n    \n                # 点击确定按钮\n                logger.info(\"点击确定按钮\")\n                confirm_button = self.wait.until(EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[@class='ant-modal-root']//button[2]\")\n                ))\n                confirm_button.click()\n                time.sleep(5)  # 等待上传完成\n            else:\n                logger.warning(\"未找到可用的ZIP文件，跳过ZIP上传步骤\")\n    \n            # 5. 点击上传单个文件按钮\n            logger.info(\"点击上传单个文件按钮\")\n            upload_single_button = self.wait.until(\n                EC.element_to_be_clickable((By.XPATH, \"//div[@class='custom-modal ant-modal-root custom-modal j-modal-box fullscreen custom-modal j-modal-box fullscreen']//button[3]\"))\n            )\n>           upload_single_button.click()\n\ntest_卷宗上传.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D0626AAA00>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF686A84D89]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"ant-btn ant-btn-primary\">...</button> is not clickable at point (373, 91). Other element would receive the click: <div tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"rcDialogTitle1\" class=\"ant-modal-wrap animate__animated animate__fadeInDownBig\">...</div>\nE         (Session info: chrome=134.0.6998.177)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF686B2DF85+26693]\nE       \t(No symbol) [0x00007FF686A8EAD0]\nE       \t(No symbol) [0x00007FF6869191CA]\nE       \t(No symbol) [0x00007FF6869775E9]\nE       \t(No symbol) [0x00007FF686974FA2]\nE       \t(No symbol) [0x00007FF686972051]\nE       \t(No symbol) [0x00007FF686970F76]\nE       \t(No symbol) [0x00007FF6869627E4]\nE       \t(No symbol) [0x00007FF6869978EA]\nE       \t(No symbol) [0x00007FF686962096]\nE       \t(No symbol) [0x00007FF686997B00]\nE       \t(No symbol) [0x00007FF6869C00B8]\nE       \t(No symbol) [0x00007FF6869976C3]\nE       \t(No symbol) [0x00007FF686960490]\nE       \t(No symbol) [0x00007FF686961743]\nE       \tGetHandleVerifier [0x00007FF686E8436D+3525677]\nE       \tGetHandleVerifier [0x00007FF686E97F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF686E8CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF686BF7C0A+853194]\nE       \t(No symbol) [0x00007FF686A9990F]\nE       \t(No symbol) [0x00007FF686A95674]\nE       \t(No symbol) [0x00007FF686A95816]\nE       \t(No symbol) [0x00007FF686A84D89]\nE       \tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "description": "测试卷宗上传流程", "attachments": [{"name": "test_failed", "source": "8091cdb7-4f3b-48e9-9811-02c7d673d83c-attachment.png", "type": "image/png"}, {"name": "log", "source": "7d822f41-791e-4463-8b71-3945c331d072-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "dfe60864-7da3-4f73-a93d-4a330063ad3c-attachment.txt", "type": "text/plain"}], "start": 1742979006747, "stop": 1742979024471, "uuid": "be189216-c8f2-4799-9260-729533213ab7", "historyId": "287a4df057fe7242b5bb89273baa3ab7", "testCaseId": "287a4df057fe7242b5bb89273baa3ab7", "fullName": "test_001.test_卷宗上传.TestDossierUpload#test_dossier_upload", "labels": [{"name": "feature", "value": "卷宗管理"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_卷宗上传"}, {"name": "subSuite", "value": "TestDossierUpload"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "25068-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_卷宗上传"}]}