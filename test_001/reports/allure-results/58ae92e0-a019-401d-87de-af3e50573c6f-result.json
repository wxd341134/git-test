{"name": "test_personal_center_workflow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir\nStacktrace:\n\tGetHandleVerifier [0x0095C7F3+24435]\n\t(No symbol) [0x008E2074]\n\t(No symbol) [0x007B06E3]\n\t(No symbol) [0x007E35E8]\n\t(No symbol) [0x007DF3E9]\n\t(No symbol) [0x00829686]\n\t(No symbol) [0x008290BA]\n\t(No symbol) [0x0081D5B6]\n\t(No symbol) [0x007EC54F]\n\t(No symbol) [0x007ED894]\n\tGetHandleVerifier [0x00C670A3+3213347]\n\tGetHandleVerifier [0x00C7B0C9+3295305]\n\tGetHandleVerifier [0x00C7558C+3271948]\n\tGetHandleVerifier [0x009F7360+658144]\n\t(No symbol) [0x008EB27D]\n\t(No symbol) [0x008E8208]\n\t(No symbol) [0x008E83A9]\n\t(No symbol) [0x008DAAC0]\n\tBaseThreadInitThunk [0x75005D49+25]\n\tRtlInitializeExceptionChain [0x7726CE3B+107]\n\tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]", "trace": "@pytest.fixture(scope=\"session\")\n    def driver():\n        \"\"\"提供WebDriver实例\"\"\"\n        try:\n            # 确保没有残留的Chrome进程\n            if os.name == 'nt':  # Windows\n                os.system('taskkill /f /im chrome.exe')\n                os.system('taskkill /f /im chromedriver.exe')\n                time.sleep(2)\n    \n            # 使用DriverManager获取driver实例\n>           driver = DriverManager.get_driver()\n\n..\\conftest.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\driver_manager.py:45: in get_driver\n    cls._driver = webdriver.Chrome(service=service, options=chrome_options)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:250: in __init__\n    self.start_session(capabilities)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000213114A90A0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: probably user data d...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7726CE3B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0095C7F3+24435]\nE       \t(No symbol) [0x008E2074]\nE       \t(No symbol) [0x007B06E3]\nE       \t(No symbol) [0x007E35E8]\nE       \t(No symbol) [0x007DF3E9]\nE       \t(No symbol) [0x00829686]\nE       \t(No symbol) [0x008290BA]\nE       \t(No symbol) [0x0081D5B6]\nE       \t(No symbol) [0x007EC54F]\nE       \t(No symbol) [0x007ED894]\nE       \tGetHandleVerifier [0x00C670A3+3213347]\nE       \tGetHandleVerifier [0x00C7B0C9+3295305]\nE       \tGetHandleVerifier [0x00C7558C+3271948]\nE       \tGetHandleVerifier [0x009F7360+658144]\nE       \t(No symbol) [0x008EB27D]\nE       \t(No symbol) [0x008E8208]\nE       \t(No symbol) [0x008E83A9]\nE       \t(No symbol) [0x008DAAC0]\nE       \tBaseThreadInitThunk [0x75005D49+25]\nE       \tRtlInitializeExceptionChain [0x7726CE3B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x7726CDC1+561]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: SessionNotCreatedException"}, "description": "测试个人中心完整流程", "attachments": [{"name": "log", "source": "b18c2167-7be0-49de-b03d-a9e42c3a92be-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "60657a16-2e7d-4bea-afa9-a4aed73893c2-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "8f0a3294-23d7-47c9-a444-228fec7b172c-attachment.txt", "type": "text/plain"}], "start": 1742959589597, "stop": 1742959589597, "uuid": "0e3d0677-b550-49a7-88df-769a4f357ab0", "historyId": "1411408b10fd896b372e133dea5137f8", "testCaseId": "1411408b10fd896b372e133dea5137f8", "fullName": "test_001.test_UserCenter.TestPersonalCenter#test_personal_center_workflow", "labels": [{"name": "story", "value": "完整测试流程"}, {"name": "feature", "value": "个人中心"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_UserCenter"}, {"name": "subSuite", "value": "TestPersonalCenter"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "24504-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_UserCenter"}]}