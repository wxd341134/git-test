{"name": "测试文本选择和AI智能问答", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF6C1FBDF85+26693]\n\t(No symbol) [0x00007FF6C1F1EAD0]\n\t(No symbol) [0x00007FF6C1DA91CA]\n\t(No symbol) [0x00007FF6C1DFF747]\n\t(No symbol) [0x00007FF6C1DFF97C]\n\t(No symbol) [0x00007FF6C1E533C7]\n\t(No symbol) [0x00007FF6C1E2792F]\n\t(No symbol) [0x00007FF6C1E500B8]\n\t(No symbol) [0x00007FF6C1E276C3]\n\t(No symbol) [0x00007FF6C1DF0490]\n\t(No symbol) [0x00007FF6C1DF1743]\n\tGetHandleVerifier [0x00007FF6C231436D+3525677]\n\tGetHandleVerifier [0x00007FF6C2327F3B+3606523]\n\tGetHandleVerifier [0x00007FF6C231CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6C2087C0A+853194]\n\t(No symbol) [0x00007FF6C1F2990F]\n\t(No symbol) [0x00007FF6C1F25674]\n\t(No symbol) [0x00007FF6C1F25816]\n\t(No symbol) [0x00007FF6C1F14D89]\n\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\n\tRtlUserThreadStart [0x00007FF9825514FC+44]", "trace": "self = <common.read_notes_utils.ReadNotesUtils object at 0x0000015F7D1C3370>\ntext_to_select = '原告欠款560000元'\n\n    @allure.step(\"选中文本并使用AI智能问答\")\n    def select_text_and_use_ai(self, text_to_select=\"原告欠款560000元\"):\n        \"\"\"\n        选中指定文本并使用AI智能问答功能\n        :param text_to_select: 要选中的文本\n        \"\"\"\n        try:\n            logger.info(f\"开始选中文本并使用AI智能问答: {text_to_select}\")\n    \n            # 切换到iframe\n            self.switch_to_notes_frame()\n    \n            # 查找文本元素\n            text_xpath = f\"//*[contains(text(), '{text_to_select}')]\"\n            text_element = self.wait.until(\n                EC.presence_of_element_located((By.XPATH, text_xpath))\n            )\n    \n            # 使用JavaScript选择文本并触发选择事件\n            script = \"\"\"\n               function getTextNode(element, text) {\n                   if (element.nodeType === 3) {\n                       if (element.textContent.includes(text)) {\n                           return element;\n                       }\n                   }\n                   for (let child of element.childNodes) {\n                       let result = getTextNode(child, text);\n                       if (result) {\n                           return result;\n                       }\n                   }\n                   return null;\n               }\n    \n               function triggerMouseEvent(element, eventType) {\n                   const event = new MouseEvent(eventType, {\n                       view: window,\n                       bubbles: true,\n                       cancelable: true,\n                       buttons: 1\n                   });\n                   element.dispatchEvent(event);\n               }\n    \n               let textNode = getTextNode(arguments[0], arguments[1]);\n               if (textNode) {\n                   let range = document.createRange();\n                   let start = textNode.textContent.indexOf(arguments[1]);\n                   range.setStart(textNode, start);\n                   range.setEnd(textNode, start + arguments[1].length);\n    \n                   let selection = window.getSelection();\n                   selection.removeAllRanges();\n                   selection.addRange(range);\n    \n                   // 触发鼠标事件序列\n                   triggerMouseEvent(arguments[0], 'mousedown');\n                   triggerMouseEvent(arguments[0], 'mousemove');\n                   triggerMouseEvent(arguments[0], 'mouseup');\n                   triggerMouseEvent(arguments[0], 'mouseout');\n    \n                   // 触发选择事件\n                   const selectEvent = new Event('select', {\n                       bubbles: true,\n                       cancelable: true\n                   });\n                   arguments[0].dispatchEvent(selectEvent);\n    \n                   return true;\n               }\n               return false;\n               \"\"\"\n    \n            result = self.driver.execute_script(script, text_element, text_to_select)\n            if result:\n                logger.info(\"成功使用JavaScript选择文本\")\n            else:\n                logger.warning(\"文本选择失败\")\n                raise Exception(\"文本选择失败\")\n    \n            time.sleep(1)  # 等待选择效果和弹出菜单\n    \n            # 切回主文档以操作AI按钮\n            self.switch_to_main_content()\n    \n            # 等待AI智能问答按钮出现并点击\n            try:\n>               ai_button = self.wait.until(\n                    EC.element_to_be_clickable((By.XPATH, \"//button[@title='AI智能问答']\"))\n                )\n\n..\\common\\read_notes_utils.py:333: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"75e6a4f99ada3dc8d2ff51fe7a1553cf\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000015F7D19AB80>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C1FBDF85+26693]\nE       \t(No symbol) [0x00007FF6C1F1EAD0]\nE       \t(No symbol) [0x00007FF6C1DA91CA]\nE       \t(No symbol) [0x00007FF6C1DFF747]\nE       \t(No symbol) [0x00007FF6C1DFF97C]\nE       \t(No symbol) [0x00007FF6C1E533C7]\nE       \t(No symbol) [0x00007FF6C1E2792F]\nE       \t(No symbol) [0x00007FF6C1E500B8]\nE       \t(No symbol) [0x00007FF6C1E276C3]\nE       \t(No symbol) [0x00007FF6C1DF0490]\nE       \t(No symbol) [0x00007FF6C1DF1743]\nE       \tGetHandleVerifier [0x00007FF6C231436D+3525677]\nE       \tGetHandleVerifier [0x00007FF6C2327F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF6C231CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF6C2087C0A+853194]\nE       \t(No symbol) [0x00007FF6C1F2990F]\nE       \t(No symbol) [0x00007FF6C1F25674]\nE       \t(No symbol) [0x00007FF6C1F25816]\nE       \t(No symbol) [0x00007FF6C1F14D89]\nE       \tBaseThreadInitThunk [0x00007FF98108E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF9825514FC+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <FgAI.test_001.test_read_notes.TestReadNotes object at 0x0000015F7D189760>\n\n    @allure.story(\"AI智能问答功能\")\n    @allure.title(\"测试文本选择和AI智能问答\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.flaky(reruns=2, reruns_delay=2)\n    def test_select_text_and_ai_qa(self):\n        \"\"\"\n        测试文本选择和AI智能问答功能：\n        1. 使用JavaScript选中文本\n        2. 点击AI智能问答按钮\n        3. 等待5秒后关闭弹框\n        \"\"\"\n        logger.info(\"开始测试文本选择和AI智能问答功能...\")\n        try:\n            with allure.step(\"选中文本并使用AI智能问答\"):\n>               self.read_notes.select_text_and_use_ai()\n\ntest_read_notes.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\read_notes_utils.py:351: in select_text_and_use_ai\n    ai_button = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"75e6a4f99ada3dc8d2ff51fe7a1553cf\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000015F7D19AAF0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C1FBDF85+26693]\nE       \t(No symbol) [0x00007FF6C1F1EAD0]\nE       \t(No symbol) [0x00007FF6C1DA91CA]\nE       \t(No symbol) [0x00007FF6C1DFF747]\nE       \t(No symbol) [0x00007FF6C1DFF97C]\nE       \t(No symbol) [0x00007FF6C1E533C7]\nE       \t(No symbol) [0x00007FF6C1E2792F]\nE       \t(No symbol) [0x00007FF6C1E500B8]\nE       \t(No symbol) [0x00007FF6C1E276C3]\nE       \t(No symbol) [0x00007FF6C1DF0490]\nE       \t(No symbol) [0x00007FF6C1DF1743]\nE       \tGetHandleVerifier [0x00007FF6C231436D+3525677]\nE       \tGetHandleVerifier [0x00007FF6C2327F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF6C231CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF6C2087C0A+853194]\nE       \t(No symbol) [0x00007FF6C1F2990F]\nE       \t(No symbol) [0x00007FF6C1F25674]\nE       \t(No symbol) [0x00007FF6C1F25816]\nE       \t(No symbol) [0x00007FF6C1F14D89]\nE       \tBaseThreadInitThunk [0x00007FF98108E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF9825514FC+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "description": "\n        测试文本选择和AI智能问答功能：\n        1. 使用JavaScript选中文本\n        2. 点击AI智能问答按钮\n        3. 等待5秒后关闭弹框\n        ", "steps": [{"name": "选中文本并使用AI智能问答", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF6C1FBDF85+26693]\n\t(No symbol) [0x00007FF6C1F1EAD0]\n\t(No symbol) [0x00007FF6C1DA91CA]\n\t(No symbol) [0x00007FF6C1DFF747]\n\t(No symbol) [0x00007FF6C1DFF97C]\n\t(No symbol) [0x00007FF6C1E533C7]\n\t(No symbol) [0x00007FF6C1E2792F]\n\t(No symbol) [0x00007FF6C1E500B8]\n\t(No symbol) [0x00007FF6C1E276C3]\n\t(No symbol) [0x00007FF6C1DF0490]\n\t(No symbol) [0x00007FF6C1DF1743]\n\tGetHandleVerifier [0x00007FF6C231436D+3525677]\n\tGetHandleVerifier [0x00007FF6C2327F3B+3606523]\n\tGetHandleVerifier [0x00007FF6C231CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6C2087C0A+853194]\n\t(No symbol) [0x00007FF6C1F2990F]\n\t(No symbol) [0x00007FF6C1F25674]\n\t(No symbol) [0x00007FF6C1F25816]\n\t(No symbol) [0x00007FF6C1F14D89]\n\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\n\tRtlUserThreadStart [0x00007FF9825514FC+44]\n\n", "trace": "  File \"E:\\AutoTest\\FgAI\\test_001\\test_read_notes.py\", line 162, in test_select_text_and_ai_qa\n    self.read_notes.select_text_and_use_ai()\n  File \"D:\\Python39\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"E:\\AutoTest\\FgAI\\common\\read_notes_utils.py\", line 351, in select_text_and_use_ai\n    ai_button = self.wait.until(\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "steps": [{"name": "选中文本并使用AI智能问答", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF6C1FBDF85+26693]\n\t(No symbol) [0x00007FF6C1F1EAD0]\n\t(No symbol) [0x00007FF6C1DA91CA]\n\t(No symbol) [0x00007FF6C1DFF747]\n\t(No symbol) [0x00007FF6C1DFF97C]\n\t(No symbol) [0x00007FF6C1E533C7]\n\t(No symbol) [0x00007FF6C1E2792F]\n\t(No symbol) [0x00007FF6C1E500B8]\n\t(No symbol) [0x00007FF6C1E276C3]\n\t(No symbol) [0x00007FF6C1DF0490]\n\t(No symbol) [0x00007FF6C1DF1743]\n\tGetHandleVerifier [0x00007FF6C231436D+3525677]\n\tGetHandleVerifier [0x00007FF6C2327F3B+3606523]\n\tGetHandleVerifier [0x00007FF6C231CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6C2087C0A+853194]\n\t(No symbol) [0x00007FF6C1F2990F]\n\t(No symbol) [0x00007FF6C1F25674]\n\t(No symbol) [0x00007FF6C1F25816]\n\t(No symbol) [0x00007FF6C1F14D89]\n\tBaseThreadInitThunk [0x00007FF98108E8D7+23]\n\tRtlUserThreadStart [0x00007FF9825514FC+44]\n\n", "trace": "  File \"D:\\Python39\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"E:\\AutoTest\\FgAI\\common\\read_notes_utils.py\", line 351, in select_text_and_use_ai\n    ai_button = self.wait.until(\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "attachments": [{"name": "操作失败截图", "source": "d2ddc089-d4e2-4c7b-ae22-975690a211c0-attachment.png", "type": "image/png"}], "parameters": [{"name": "text_to_select", "value": "'原告欠款560000元'"}], "start": 1744772469668, "stop": 1744772493027}], "start": 1744772469668, "stop": 1744772493029}], "attachments": [{"name": "log", "source": "8f7a9414-b5f7-4f64-906a-ac671210477f-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "f1e7839a-9f69-4b28-a7bd-3e131cfa35e2-attachment.txt", "type": "text/plain"}], "start": 1744772469667, "stop": 1744772493031, "uuid": "576464dd-833d-4f8b-a288-5d6246f18037", "historyId": "c796760a9521c212faaf66c5877aa85e", "testCaseId": "c796760a9521c212faaf66c5877aa85e", "fullName": "test_001.test_read_notes.TestReadNotes#test_select_text_and_ai_qa", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "阅卷笔记模块"}, {"name": "epic", "value": "案件管理系统"}, {"name": "story", "value": "AI智能问答功能"}, {"name": "tag", "value": "flaky(reruns=2, reruns_delay=2)"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_read_notes"}, {"name": "subSuite", "value": "TestReadNotes"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "1924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_read_notes"}]}