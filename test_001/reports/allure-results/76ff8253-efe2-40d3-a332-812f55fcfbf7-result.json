{"name": "刷新和关闭卷宗管理", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF761B8DF85+26693]\n\t(No symbol) [0x00007FF761AEEAD0]\n\t(No symbol) [0x00007FF761978FFC]\n\t(No symbol) [0x00007FF7619BF69F]\n\t(No symbol) [0x00007FF7619F77B2]\n\t(No symbol) [0x00007FF7619F210E]\n\t(No symbol) [0x00007FF7619F11B9]\n\t(No symbol) [0x00007FF7619455E5]\n\tGetHandleVerifier [0x00007FF761EE436D+3525677]\n\tGetHandleVerifier [0x00007FF761EF7F3B+3606523]\n\tGetHandleVerifier [0x00007FF761EECEE3+3561379]\n\tGetHandleVerifier [0x00007FF761C57C0A+853194]\n\t(No symbol) [0x00007FF761AF990F]\n\t(No symbol) [0x00007FF7619441FF]\n\tGetHandleVerifier [0x00007FF761F625D8+4042392]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]", "trace": "self = <FgAI.test_001.test_DossierU.TestDossierUpload object at 0x0000027FB0169940>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"23bb801cb7b14b4ac922d83ae3d50be6\")>\n\n    @pytest.fixture(autouse=True)\n    def init_driver(self, driver):\n        \"\"\"初始化driver和wait\"\"\"\n        self.driver = driver\n        self.wait = WebDriverWait(self.driver, 10)\n    \n        if not TestDossierUpload._initialized:\n            try:\n                logger.info(\"开始初始化卷宗上传测试环境...\")\n                # 导航到案件列表页面\n                # self.driver.get(\"http://192.168.1.123:8080/case-list\")  # 替换为实际URL\n                time.sleep(2)\n    \n                # 定位到指定案件\n                self.case_number = \"(2025)苏0105民初0001号\"\n>               self._click_upload_button()\n\ntest_DossierU.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_DossierU.py:53: in _click_upload_button\n    upload_button = self.wait.until(EC.element_to_be_clickable((\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:633: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027FB01696D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...625D8+4042392]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF761B8DF85+26693]\nE       \t(No symbol) [0x00007FF761AEEAD0]\nE       \t(No symbol) [0x00007FF761978FFC]\nE       \t(No symbol) [0x00007FF7619BF69F]\nE       \t(No symbol) [0x00007FF7619F77B2]\nE       \t(No symbol) [0x00007FF7619F210E]\nE       \t(No symbol) [0x00007FF7619F11B9]\nE       \t(No symbol) [0x00007FF7619455E5]\nE       \tGetHandleVerifier [0x00007FF761EE436D+3525677]\nE       \tGetHandleVerifier [0x00007FF761EF7F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF761EECEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF761C57C0A+853194]\nE       \t(No symbol) [0x00007FF761AF990F]\nE       \t(No symbol) [0x00007FF7619441FF]\nE       \tGetHandleVerifier [0x00007FF761F625D8+4042392]\nE       \tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <FgAI.test_001.test_DossierU.TestDossierUpload object at 0x0000027FB0169940>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"23bb801cb7b14b4ac922d83ae3d50be6\")>\n\n    @pytest.fixture(autouse=True)\n    def init_driver(self, driver):\n        \"\"\"初始化driver和wait\"\"\"\n        self.driver = driver\n        self.wait = WebDriverWait(self.driver, 10)\n    \n        if not TestDossierUpload._initialized:\n            try:\n                logger.info(\"开始初始化卷宗上传测试环境...\")\n                # 导航到案件列表页面\n                # self.driver.get(\"http://192.168.1.123:8080/case-list\")  # 替换为实际URL\n                time.sleep(2)\n    \n                # 定位到指定案件\n                self.case_number = \"(2025)苏0105民初0001号\"\n                self._click_upload_button()\n    \n                TestDossierUpload._initialized = True\n                logger.info(\"卷宗上传测试环境初始化完成\")\n            except Exception as e:\n                logger.error(f\"初始化失败: {str(e)}\")\n                allure.attach(\n>                   self.driver.get_screenshot_as_png(),\n                    name=\"setup_failed\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n\ntest_DossierU.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027FB01696D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...625D8+4042392]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF761B8DF85+26693]\nE       \t(No symbol) [0x00007FF761AEEAD0]\nE       \t(No symbol) [0x00007FF761978FFC]\nE       \t(No symbol) [0x00007FF7619BF69F]\nE       \t(No symbol) [0x00007FF7619F77B2]\nE       \t(No symbol) [0x00007FF7619F210E]\nE       \t(No symbol) [0x00007FF7619F11B9]\nE       \t(No symbol) [0x00007FF7619455E5]\nE       \tGetHandleVerifier [0x00007FF761EE436D+3525677]\nE       \tGetHandleVerifier [0x00007FF761EF7F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF761EECEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF761C57C0A+853194]\nE       \t(No symbol) [0x00007FF761AF990F]\nE       \t(No symbol) [0x00007FF7619441FF]\nE       \tGetHandleVerifier [0x00007FF761F625D8+4042392]\nE       \tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "测试刷新和关闭功能", "attachments": [{"name": "log", "source": "42af5113-413f-4fdc-b2ba-e6a73ed8b82e-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "ffa364ce-420d-4ef4-b07c-2086137cb790-attachment.txt", "type": "text/plain"}], "start": 1742904198640, "stop": 1742904198640, "uuid": "f8d02c1d-f193-4f97-b036-f6d644180a51", "historyId": "4011de9f94e5e9decbdae4b605715b7e", "testCaseId": "4011de9f94e5e9decbdae4b605715b7e", "fullName": "test_001.test_DossierU.TestDossierUpload#test_03_refresh_and_close", "labels": [{"name": "story", "value": "卷宗管理"}, {"name": "feature", "value": "卷宗管理"}, {"name": "epic", "value": "FGAI自动化测试"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_DossierU"}, {"name": "subSuite", "value": "TestDossierUpload"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "20188-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_DossierU"}]}