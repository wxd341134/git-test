{"name": "测试阅卷笔记完整业务流程", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(10054, '远程主机强迫关闭了一个现有的连接。', None, 10054, None))", "trace": "self = <urllib3.connectionpool.HTTPConnectionPool object at 0x000001C8F2AEB100>\nmethod = 'POST', url = '/session/1dea13f3447fd263f6904b643537e6c3/element'\nbody = '{\"using\": \"xpath\", \"value\": \"//div[@class=\\'ant-table-fixed-right\\']/div[2]//tbody/tr[1]/td[1]/div/i[2]\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.30.0 (python windows)'}\nretries = Retry(total=3, connect=None, read=None, redirect=None, status=None)\nredirect = False, assert_same_host = False, timeout = 120, pool_timeout = None\nrelease_conn = True, chunked = False, body_pos = None\nresponse_kw = {'request_url': 'http://localhost:57650/session/1dea13f3447fd263f6904b643537e6c3/element'}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/session/1dea13f3447fd263f6904b643537e6c3/element', query=None, fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True\nhttp_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n    \n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn and http_tunnel_required:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n>           httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n\nD:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py:703: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py:449: in _make_request\n    six.raise_from(e, None)\nD:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py:444: in _make_request\n    httplib_response = conn.getresponse()\nD:\\Python39\\lib\\http\\client.py:1347: in getresponse\n    response.begin()\nD:\\Python39\\lib\\http\\client.py:307: in begin\n    version, status, reason = self._read_status()\nD:\\Python39\\lib\\http\\client.py:268: in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <socket.SocketIO object at 0x000001C8F3F2C790>\nb = <memory at 0x000001C8F2B0E700>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        while True:\n            try:\n>               return self._sock.recv_into(b)\nE               ConnectionResetError: [WinError 10054] 远程主机强迫关闭了一个现有的连接。\n\nD:\\Python39\\lib\\socket.py:704: ConnectionResetError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <FgAI.test_001.test_read_notes.TestReadNotes object at 0x000001C8F2ABC670>\n\n    @allure.story(\"组合功能测试\")\n    @allure.title(\"测试阅卷笔记完整业务流程\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.flaky(reruns=2, reruns_delay=2)\n    def test_complete_workflow(self):\n        \"\"\"\n        测试完整的业务流程：\n        1. 打开阅卷笔记\n        2. 查看判决书\n        3. 查看证据引用\n        4. 执行查找替换\n        5. 导出笔记\n        \"\"\"\n        logger.info(\"开始测试完整业务流程...\")\n        try:\n            with allure.step(\"打开阅卷笔记\"):\n>               self.read_notes.open_reading_notes()\n\ntest_read_notes.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\read_notes_utils.py:14: in open_reading_notes\n    self.wait.until(EC.element_to_be_clickable(ReadNotesPage.REVIEW_NOTES_BUTTON)).click()\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:633: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:427: in execute\n    response = self.command_executor.execute(driver_command, params)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:404: in execute\n    return self._request(command_info[0], url, body=data)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:428: in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\nD:\\Python39\\lib\\site-packages\\urllib3\\request.py:78: in request\n    return self.request_encode_body(\nD:\\Python39\\lib\\site-packages\\urllib3\\request.py:170: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\nD:\\Python39\\lib\\site-packages\\urllib3\\poolmanager.py:376: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\nD:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py:787: in urlopen\n    retries = retries.increment(\nD:\\Python39\\lib\\site-packages\\urllib3\\util\\retry.py:550: in increment\n    raise six.reraise(type(error), error, _stacktrace)\nD:\\Python39\\lib\\site-packages\\urllib3\\packages\\six.py:769: in reraise\n    raise value.with_traceback(tb)\nD:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py:703: in urlopen\n    httplib_response = self._make_request(\nD:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py:449: in _make_request\n    six.raise_from(e, None)\n<string>:3: in raise_from\n    ???\nD:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py:444: in _make_request\n    httplib_response = conn.getresponse()\nD:\\Python39\\lib\\http\\client.py:1347: in getresponse\n    response.begin()\nD:\\Python39\\lib\\http\\client.py:307: in begin\n    version, status, reason = self._read_status()\nD:\\Python39\\lib\\http\\client.py:268: in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <socket.SocketIO object at 0x000001C8F3F2C790>\nb = <memory at 0x000001C8F2B0E700>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        while True:\n            try:\n>               return self._sock.recv_into(b)\nE               urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(10054, '远程主机强迫关闭了一个现有的连接。', None, 10054, None))\n\nD:\\Python39\\lib\\socket.py:704: ProtocolError"}, "description": "\n        测试完整的业务流程：\n        1. 打开阅卷笔记\n        2. 查看判决书\n        3. 查看证据引用\n        4. 执行查找替换\n        5. 导出笔记\n        ", "steps": [{"name": "打开阅卷笔记", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(10054, '远程主机强迫关闭了一个现有的连接。', None, 10054, None))\n", "trace": "  File \"E:\\AutoTest\\FgAI\\test_001\\test_read_notes.py\", line 181, in test_complete_workflow\n    self.read_notes.open_reading_notes()\n  File \"D:\\Python39\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"E:\\AutoTest\\FgAI\\common\\read_notes_utils.py\", line 14, in open_reading_notes\n    self.wait.until(EC.element_to_be_clickable(ReadNotesPage.REVIEW_NOTES_BUTTON)).click()\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 137, in until\n    value = method(self._driver)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 633, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 898, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 427, in execute\n    response = self.command_executor.execute(driver_command, params)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 404, in execute\n    return self._request(command_info[0], url, body=data)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 428, in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\request.py\", line 78, in request\n    return self.request_encode_body(\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\request.py\", line 170, in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\poolmanager.py\", line 376, in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py\", line 787, in urlopen\n    retries = retries.increment(\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\util\\retry.py\", line 550, in increment\n    raise six.reraise(type(error), error, _stacktrace)\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\packages\\six.py\", line 769, in reraise\n    raise value.with_traceback(tb)\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py\", line 703, in urlopen\n    httplib_response = self._make_request(\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py\", line 449, in _make_request\n    six.raise_from(e, None)\n  File \"<string>\", line 3, in raise_from\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py\", line 444, in _make_request\n    httplib_response = conn.getresponse()\n  File \"D:\\Python39\\lib\\http\\client.py\", line 1347, in getresponse\n    response.begin()\n  File \"D:\\Python39\\lib\\http\\client.py\", line 307, in begin\n    version, status, reason = self._read_status()\n  File \"D:\\Python39\\lib\\http\\client.py\", line 268, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n  File \"D:\\Python39\\lib\\socket.py\", line 704, in readinto\n    return self._sock.recv_into(b)\n"}, "steps": [{"name": "打开阅卷笔记", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(10054, '远程主机强迫关闭了一个现有的连接。', None, 10054, None))\n", "trace": "  File \"D:\\Python39\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"E:\\AutoTest\\FgAI\\common\\read_notes_utils.py\", line 14, in open_reading_notes\n    self.wait.until(EC.element_to_be_clickable(ReadNotesPage.REVIEW_NOTES_BUTTON)).click()\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 137, in until\n    value = method(self._driver)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 633, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 898, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 427, in execute\n    response = self.command_executor.execute(driver_command, params)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 404, in execute\n    return self._request(command_info[0], url, body=data)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 428, in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\request.py\", line 78, in request\n    return self.request_encode_body(\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\request.py\", line 170, in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\poolmanager.py\", line 376, in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py\", line 787, in urlopen\n    retries = retries.increment(\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\util\\retry.py\", line 550, in increment\n    raise six.reraise(type(error), error, _stacktrace)\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\packages\\six.py\", line 769, in reraise\n    raise value.with_traceback(tb)\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py\", line 703, in urlopen\n    httplib_response = self._make_request(\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py\", line 449, in _make_request\n    six.raise_from(e, None)\n  File \"<string>\", line 3, in raise_from\n  File \"D:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py\", line 444, in _make_request\n    httplib_response = conn.getresponse()\n  File \"D:\\Python39\\lib\\http\\client.py\", line 1347, in getresponse\n    response.begin()\n  File \"D:\\Python39\\lib\\http\\client.py\", line 307, in begin\n    version, status, reason = self._read_status()\n  File \"D:\\Python39\\lib\\http\\client.py\", line 268, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n  File \"D:\\Python39\\lib\\socket.py\", line 704, in readinto\n    return self._sock.recv_into(b)\n"}, "start": 1744709961342, "stop": 1744709973453}], "start": 1744709961342, "stop": 1744709973631}], "attachments": [{"name": "log", "source": "f09a6a95-158d-4f82-9717-3698ec9a3e86-attachment.txt", "type": "text/plain"}], "start": 1744709961342, "stop": 1744709990043, "uuid": "c8869a71-4da2-451d-a98d-a12735b142e3", "historyId": "99152a7fa99863a616f2f68fed419185", "testCaseId": "99152a7fa99863a616f2f68fed419185", "fullName": "test_001.test_read_notes.TestReadNotes#test_complete_workflow", "labels": [{"name": "epic", "value": "案件管理系统"}, {"name": "feature", "value": "阅卷笔记模块"}, {"name": "story", "value": "组合功能测试"}, {"name": "severity", "value": "critical"}, {"name": "tag", "value": "flaky(reruns=2, reruns_delay=2)"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "test_read_notes"}, {"name": "subSuite", "value": "TestReadNotes"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "7748-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.test_read_notes"}]}