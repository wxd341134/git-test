{"name": "卷宗上传流程测试", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=51159): Max retries exceeded with url: /session/13fbfc1bdf1f7d4701bb67186b88a4a8/screenshot (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002AF4DD522E0>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))", "trace": "self = <pages.login_page.LoginPage object at 0x000002AF479266D0>, timeout = 60\n\n    def wait_for_verify_code(self, timeout=60):\n        \"\"\"等待并处理验证码输入\"\"\"\n        try:\n            # 找到验证码输入框\n            verify_code_element = self.wait.until(\n                EC.presence_of_element_located(self.verify_code_input)\n            )\n    \n            # 高亮验证码输入框\n            self.driver.execute_script(\"\"\"\n                arguments[0].style.border = '2px solid red';\n                arguments[0].style.backgroundColor = '#fff3f3';\n            \"\"\", verify_code_element)\n    \n            logger.info(\"=\"*50)\n            logger.info(\"请在弹出窗口中输入验证码\")\n            logger.info(\"=\"*50)\n    \n            # 获取验证码\n            verify_code = self.get_verify_code_from_user()\n    \n            if verify_code:\n                # 清空输入框\n                verify_code_element.clear()\n                time.sleep(0.5)\n    \n                # 输入验证码\n                verify_code_element.send_keys(verify_code)\n                logger.info(\"验证码已自动填入\")\n    \n                # 恢复输入框样式\n                self.driver.execute_script(\"\"\"\n                    arguments[0].style.border = '';\n                    arguments[0].style.backgroundColor = '';\n                \"\"\", verify_code_element)\n    \n                time.sleep(1)\n                return True\n            else:\n>               self.handle_error(\"验证码输入为空\")\n\n..\\pages\\login_page.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x000002AF479266D0>\nerror_msg = '验证码输入为空', take_screenshot = True\n\n    def handle_error(self, error_msg, take_screenshot=True):\n        \"\"\"统一的错误处理方法\"\"\"\n        logger.error(error_msg)\n        if take_screenshot:\n            try:\n                allure.attach(\n                    self.driver.get_screenshot_as_png(),\n                    name=\"error_screenshot\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n            except:\n                logger.error(\"无法截图\")\n        # 关闭浏览器\n        try:\n            DriverManager.quit_driver()\n        except Exception as e:\n            logger.error(f\"关闭浏览器失败: {str(e)}\")\n>       raise Exception(error_msg)\nE       Exception: 验证码输入为空\n\n..\\pages\\login_page.py:43: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pages.login_page.LoginPage object at 0x000002AF479266D0>\nusername = 'wxdfg', password = 'wxd341134@'\n\n    def login(self, username=\"wxdfg\", password=\"wxd341134@\"):\n        \"\"\"执行登录操作\"\"\"\n        try:\n            # 打开登录页面\n            self.open_login_page()\n    \n            # 输入用户名\n            logger.info(f\"开始输入用户名: {username}\")\n            try:\n                username_element = self.wait.until(\n                    EC.element_to_be_clickable(self.username_input)\n                )\n                username_element.clear()\n                username_element.send_keys(username)\n                logger.info(\"用户名输入完成\")\n            except Exception as e:\n                self.handle_error(f\"用户名输入失败: {str(e)}\")\n    \n            # 输入密码\n            logger.info(\"开始输入密码\")\n            try:\n                password_element = self.wait.until(\n                    EC.element_to_be_clickable(self.password_input)\n                )\n                password_element.clear()\n                password_element.send_keys(password)\n                logger.info(\"密码输入完成\")\n            except Exception as e:\n                self.handle_error(f\"密码输入失败: {str(e)}\")\n    \n            # 处理验证码\n>           if not self.wait_for_verify_code():\n\n..\\pages\\login_page.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\login_page.py:108: in wait_for_verify_code\n    self.handle_error(f\"验证码处理失败: {str(e)}\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x000002AF479266D0>\nerror_msg = '验证码处理失败: 验证码输入为空', take_screenshot = True\n\n    def handle_error(self, error_msg, take_screenshot=True):\n        \"\"\"统一的错误处理方法\"\"\"\n        logger.error(error_msg)\n        if take_screenshot:\n            try:\n                allure.attach(\n                    self.driver.get_screenshot_as_png(),\n                    name=\"error_screenshot\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n            except:\n                logger.error(\"无法截图\")\n        # 关闭浏览器\n        try:\n            DriverManager.quit_driver()\n        except Exception as e:\n            logger.error(f\"关闭浏览器失败: {str(e)}\")\n>       raise Exception(error_msg)\nE       Exception: 验证码处理失败: 验证码输入为空\n\n..\\pages\\login_page.py:43: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <FgAI.test_001.DossierUp.TestDossierUpload object at 0x000002AF478BA790>\n\n    @allure.story(\"卷宗上传\")\n    @allure.title(\"卷宗上传流程测试\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_dossier_upload(self):\n        \"\"\"测试卷宗上传流程\"\"\"\n        try:\n            # 1. 登录系统\n            with allure.step(\"登录系统\"):\n                logger.info(\"开始登录系统\")\n>               self.login_page.login()\n\nDossierUp.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\login_page.py:166: in login\n    self.handle_error(f\"登录过程失败: {str(e)}\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x000002AF479266D0>\nerror_msg = '登录过程失败: 验证码处理失败: 验证码输入为空', take_screenshot = True\n\n    def handle_error(self, error_msg, take_screenshot=True):\n        \"\"\"统一的错误处理方法\"\"\"\n        logger.error(error_msg)\n        if take_screenshot:\n            try:\n                allure.attach(\n                    self.driver.get_screenshot_as_png(),\n                    name=\"error_screenshot\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n            except:\n                logger.error(\"无法截图\")\n        # 关闭浏览器\n        try:\n            DriverManager.quit_driver()\n        except Exception as e:\n            logger.error(f\"关闭浏览器失败: {str(e)}\")\n>       raise Exception(error_msg)\nE       Exception: 登录过程失败: 验证码处理失败: 验证码输入为空\n\n..\\pages\\login_page.py:43: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connection.HTTPConnection object at 0x000002AF4DD522E0>\n\n    def _new_conn(self):\n        \"\"\"Establish a socket connection and set nodelay settings on it.\n    \n        :return: New socket connection.\n        \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw[\"source_address\"] = self.source_address\n    \n        if self.socket_options:\n            extra_kw[\"socket_options\"] = self.socket_options\n    \n        try:\n>           conn = connection.create_connection(\n                (self._dns_host, self.port), self.timeout, **extra_kw\n            )\n\nD:\\Python39\\lib\\site-packages\\urllib3\\connection.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\urllib3\\util\\connection.py:95: in create_connection\n    raise err\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('localhost', 51159), timeout = 120, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(\n        address,\n        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n        source_address=None,\n        socket_options=None,\n    ):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`socket.getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith(\"[\"):\n            host = host.strip(\"[]\")\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        try:\n            host.encode(\"idna\")\n        except UnicodeError:\n            return six.raise_from(\n                LocationParseError(u\"'%s', label empty or too long\" % host), None\n            )\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nD:\\Python39\\lib\\site-packages\\urllib3\\util\\connection.py:85: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x000002AF47926EB0>\nmethod = 'GET', url = '/session/13fbfc1bdf1f7d4701bb67186b88a4a8/screenshot'\nbody = None\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.30.0 (python windows)'}\nretries = Retry(total=0, connect=None, read=None, redirect=None, status=None)\nredirect = False, assert_same_host = False, timeout = 120, pool_timeout = None\nrelease_conn = True, chunked = False, body_pos = None\nresponse_kw = {'request_url': 'http://localhost:51159/session/13fbfc1bdf1f7d4701bb67186b88a4a8/screenshot'}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/session/13fbfc1bdf1f7d4701bb67186b88a4a8/screenshot', query=None, fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True\nhttp_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n    \n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn and http_tunnel_required:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n>           httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n\nD:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py:703: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py:398: in _make_request\n    conn.request(method, url, **httplib_request_kw)\nD:\\Python39\\lib\\site-packages\\urllib3\\connection.py:239: in request\n    super(HTTPConnection, self).request(method, url, body=body, headers=headers)\nD:\\Python39\\lib\\http\\client.py:1255: in request\n    self._send_request(method, url, body, headers, encode_chunked)\nD:\\Python39\\lib\\http\\client.py:1301: in _send_request\n    self.endheaders(body, encode_chunked=encode_chunked)\nD:\\Python39\\lib\\http\\client.py:1250: in endheaders\n    self._send_output(message_body, encode_chunked=encode_chunked)\nD:\\Python39\\lib\\http\\client.py:1010: in _send_output\n    self.send(msg)\nD:\\Python39\\lib\\http\\client.py:950: in send\n    self.connect()\nD:\\Python39\\lib\\site-packages\\urllib3\\connection.py:205: in connect\n    conn = self._new_conn()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPConnection object at 0x000002AF4DD522E0>\n\n    def _new_conn(self):\n        \"\"\"Establish a socket connection and set nodelay settings on it.\n    \n        :return: New socket connection.\n        \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw[\"source_address\"] = self.source_address\n    \n        if self.socket_options:\n            extra_kw[\"socket_options\"] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self._dns_host, self.port), self.timeout, **extra_kw\n            )\n    \n        except SocketTimeout:\n            raise ConnectTimeoutError(\n                self,\n                \"Connection to %s timed out. (connect timeout=%s)\"\n                % (self.host, self.timeout),\n            )\n    \n        except SocketError as e:\n>           raise NewConnectionError(\n                self, \"Failed to establish a new connection: %s\" % e\n            )\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x000002AF4DD522E0>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nD:\\Python39\\lib\\site-packages\\urllib3\\connection.py:186: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <FgAI.test_001.DossierUp.TestDossierUpload object at 0x000002AF478BA790>\n\n    @allure.story(\"卷宗上传\")\n    @allure.title(\"卷宗上传流程测试\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_dossier_upload(self):\n        \"\"\"测试卷宗上传流程\"\"\"\n        try:\n            # 1. 登录系统\n            with allure.step(\"登录系统\"):\n                logger.info(\"开始登录系统\")\n                self.login_page.login()\n                time.sleep(2)\n                logger.info(\"登录成功\")\n                allure.attach(\n                    self.driver.get_screenshot_as_png(),\n                    name=\"login_success\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n    \n            # 2. 点击上传卷宗按钮\n            with allure.step(\"点击上传卷宗按钮\"):\n                logger.info(\"点击上传卷宗按钮\")\n                upload_button = self.wait.until(EC.element_to_be_clickable(\n                    (By.XPATH, \"//td[@title='(2025)苏0105民初0001号'][1]/ancestor::div[contains(@class, 'ant-table-content')]/div[3]/div[2]/div/table/tbody/tr[2]/td[3]/div/div[1]\")\n                ))\n                upload_button.click()\n                time.sleep(2)\n                allure.attach(\n                    self.driver.get_screenshot_as_png(),\n                    name=\"upload_button_clicked\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n    \n            # 3. 点击上传zip按钮并上传文件\n            with allure.step(\"上传ZIP文件\"):\n                logger.info(\"点击上传zip按钮\")\n                upload_zip_button = self.wait.until(\n                    EC.element_to_be_clickable((By.XPATH, \"//div[@class='tree-button-group ant-btn-group']//button[2]\"))\n                )\n                upload_zip_button.click()\n                time.sleep(1)\n    \n                if self.zip_file_path and os.path.exists(self.zip_file_path):\n                    logger.info(f\"上传ZIP文件: {self.zip_file_path}\")\n                    file_input = self.wait.until(EC.presence_of_element_located(\n                        (By.CSS_SELECTOR, \"input[type='file']\")\n                    ))\n                    file_input.send_keys(self.zip_file_path)\n                    logger.info(\"ZIP文件已选择\")\n                    time.sleep(2)\n    \n                    confirm_button = self.wait.until(EC.element_to_be_clickable(\n                        (By.XPATH, \"//div[@class='ant-modal-root']//button[2]\")\n                    ))\n                    confirm_button.click()\n                    time.sleep(5)\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"zip_upload_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                else:\n                    logger.warning(\"未找到可用的ZIP文件，跳过ZIP上传步骤\")\n                    allure.attach(\n                        \"未找到可用的ZIP文件\",\n                        name=\"zip_file_missing\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n    \n            # 4. 点击上传单个文件按钮并上传\n            with allure.step(\"上传单个文件\"):\n                logger.info(\"点击上传单个文件按钮\")\n                upload_single_button = self.wait.until(\n                    EC.element_to_be_clickable((By.XPATH, \"//div[@class='custom-modal ant-modal-root custom-modal j-modal-box fullscreen custom-modal j-modal-box fullscreen']//button[3]\"))\n                )\n                upload_single_button.click()\n                time.sleep(1)\n    \n                if self.docx_file_path and os.path.exists(self.docx_file_path):\n                    logger.info(f\"上传单个文件: {self.docx_file_path}\")\n                    file_input2 = self.wait.until(EC.presence_of_element_located(\n                        (By.XPATH, \"//input[@type='file' and contains(@accept, '.docx')]\")\n                    ))\n                    file_input2.send_keys(self.docx_file_path)\n                    logger.info(\"单个文件已选择\")\n                    time.sleep(2)\n    \n                    confirm_button2 = self.wait.until(EC.element_to_be_clickable(\n                        (By.XPATH, \"//div[.//div[@class='ant-modal-title' and text()='上传单个文件']]//div[@class='ant-modal-footer']//button[@class='ant-btn ant-btn-primary']\")\n                    ))\n                    confirm_button2.click()\n                    time.sleep(2)\n                    allure.attach(\n                        self.driver.get_screenshot_as_png(),\n                        name=\"single_file_upload_complete\",\n                        attachment_type=allure.attachment_type.PNG\n                    )\n                else:\n                    logger.warning(\"未找到可用的DOCX文件，跳过单个文件上传步骤\")\n                    allure.attach(\n                        \"未找到可用的DOCX文件\",\n                        name=\"docx_file_missing\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n    \n            # 5. 刷新和展开文件列表\n            with allure.step(\"刷新和展开文件列表\"):\n                logger.info(\"点击刷新按钮\")\n                refresh_button = self.wait.until(EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[@class='tree-button-group ant-btn-group']//button[1]\")\n                ))\n                refresh_button.click()\n                time.sleep(1)\n    \n                logger.info(\"点击展开按钮\")\n                try:\n                    expand_button = self.wait.until(EC.element_to_be_clickable(\n                        (By.XPATH, \"//button[@ant-click-animating-without-extra-node='true']\")\n                    ))\n                    expand_button.click()\n                    time.sleep(1)\n                except:\n                    logger.warning(\"未找到展开按钮或按钮点击失败\")\n    \n                allure.attach(\n                    self.driver.get_screenshot_as_png(),\n                    name=\"file_list_expanded\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n    \n            # 6. 关闭上传窗口\n            with allure.step(\"关闭上传窗口\"):\n                logger.info(\"点击关闭按钮\")\n                close_button = self.wait.until(EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[@class='ant-modal-footer']//button[2]\")\n                ))\n                close_button.click()\n                time.sleep(2)\n                allure.attach(\n                    self.driver.get_screenshot_as_png(),\n                    name=\"upload_window_closed\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n    \n            logger.info(\"卷宗上传测试完成\")\n    \n        except Exception as e:\n            logger.error(f\"卷宗上传测试失败: {str(e)}\")\n            allure.attach(\n>               self.driver.get_screenshot_as_png(),\n                name=\"test_failed\",\n                attachment_type=allure.attachment_type.PNG\n            )\n\nDossierUp.py:212: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:427: in execute\n    response = self.command_executor.execute(driver_command, params)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:404: in execute\n    return self._request(command_info[0], url, body=data)\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:428: in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\nD:\\Python39\\lib\\site-packages\\urllib3\\request.py:74: in request\n    return self.request_encode_url(\nD:\\Python39\\lib\\site-packages\\urllib3\\request.py:96: in request_encode_url\n    return self.urlopen(method, url, **extra_kw)\nD:\\Python39\\lib\\site-packages\\urllib3\\poolmanager.py:376: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\nD:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py:815: in urlopen\n    return self.urlopen(\nD:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py:815: in urlopen\n    return self.urlopen(\nD:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py:815: in urlopen\n    return self.urlopen(\nD:\\Python39\\lib\\site-packages\\urllib3\\connectionpool.py:787: in urlopen\n    retries = retries.increment(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Retry(total=0, connect=None, read=None, redirect=None, status=None)\nmethod = 'GET', url = '/session/13fbfc1bdf1f7d4701bb67186b88a4a8/screenshot'\nresponse = None\nerror = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002AF4DD522E0>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。')\n_pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x000002AF47926EB0>\n_stacktrace = <traceback object at 0x000002AF4DD63D40>\n\n    def increment(\n        self,\n        method=None,\n        url=None,\n        response=None,\n        error=None,\n        _pool=None,\n        _stacktrace=None,\n    ):\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.HTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif error:\n            # Other retry?\n            if other is not None:\n                other -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = \"too many redirects\"\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and the given method is in the allowed_methods\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n                status = response.status\n    \n        history = self.history + (\n            RequestHistory(method, url, error, status, redirect_location),\n        )\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect,\n            read=read,\n            redirect=redirect,\n            status=status_count,\n            other=other,\n            history=history,\n        )\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=51159): Max retries exceeded with url: /session/13fbfc1bdf1f7d4701bb67186b88a4a8/screenshot (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002AF4DD522E0>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\n\nD:\\Python39\\lib\\site-packages\\urllib3\\util\\retry.py:592: MaxRetryError"}, "description": "测试卷宗上传流程", "steps": [{"name": "登录系统", "status": "broken", "statusDetails": {"message": "Exception: 登录过程失败: 验证码处理失败: 验证码输入为空\n", "trace": "  File \"E:\\AutoTest\\FgAI\\test_001\\DossierUp.py\", line 73, in test_dossier_upload\n    self.login_page.login()\n  File \"E:\\AutoTest\\FgAI\\pages\\login_page.py\", line 166, in login\n    self.handle_error(f\"登录过程失败: {str(e)}\")\n  File \"E:\\AutoTest\\FgAI\\pages\\login_page.py\", line 43, in handle_error\n    raise Exception(error_msg)\n"}, "start": 1742982430186, "stop": 1742982470577}], "attachments": [{"name": "log", "source": "d9ed7134-bbf9-4983-b889-91e4a740fa49-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "1d7a577a-e684-4f13-bd82-c9a1fd7bd204-attachment.txt", "type": "text/plain"}], "start": 1742982430186, "stop": 1742982486771, "uuid": "4924931c-3ac0-4c03-817d-3ea0178ef6a5", "historyId": "da9f0cebc63ae29df714a0b82480c1d2", "testCaseId": "da9f0cebc63ae29df714a0b82480c1d2", "fullName": "test_001.DossierUp.TestDossierUpload#test_dossier_upload", "labels": [{"name": "severity", "value": "critical"}, {"name": "feature", "value": "卷宗管理"}, {"name": "story", "value": "卷宗上传"}, {"name": "epic", "value": "FGAI自动化测试"}, {"name": "parentSuite", "value": "test_001"}, {"name": "suite", "value": "DossierUp"}, {"name": "subSuite", "value": "TestDossierUpload"}, {"name": "host", "value": "DESKTOP-3S8JLNL"}, {"name": "thread", "value": "22500-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_001.DossierUp"}]}