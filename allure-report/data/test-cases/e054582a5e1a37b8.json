{"uid":"e054582a5e1a37b8","name":"test_personal_center_workflow","fullName":"test_001.test_UserCenter.TestPersonalCenter#test_personal_center_workflow","historyId":"1411408b10fd896b372e133dea5137f8","time":{"start":1743990232777,"stop":1743990232777,"duration":0},"description":"测试个人中心完整流程","descriptionHtml":"<p>测试个人中心完整流程</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=134.0.6998.177)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\n\t(No symbol) [0x00007FF6F5F4EAD0]\n\t(No symbol) [0x00007FF6F5DD91CA]\n\t(No symbol) [0x00007FF6F5DD5BC2]\n\t(No symbol) [0x00007FF6F5DC6919]\n\t(No symbol) [0x00007FF6F5DC8688]\n\t(No symbol) [0x00007FF6F5DC6C26]\n\t(No symbol) [0x00007FF6F5DC66A6]\n\t(No symbol) [0x00007FF6F5DC636A]\n\t(No symbol) [0x00007FF6F5DC3EF2]\n\t(No symbol) [0x00007FF6F5DC47DC]\n\t(No symbol) [0x00007FF6F5DDD01A]\n\t(No symbol) [0x00007FF6F5E80F4E]\n\t(No symbol) [0x00007FF6F5E578EA]\n\t(No symbol) [0x00007FF6F5E800B8]\n\t(No symbol) [0x00007FF6F5E576C3]\n\t(No symbol) [0x00007FF6F5E20490]\n\t(No symbol) [0x00007FF6F5E21743]\n\tGetHandleVerifier [0x00007FF6F634436D+3525677]\n\tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\n\tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\n\t(No symbol) [0x00007FF6F5F5990F]\n\t(No symbol) [0x00007FF6F5F55674]\n\t(No symbol) [0x00007FF6F5F55816]\n\t(No symbol) [0x00007FF6F5F44D89]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]","statusTrace":"@pytest.fixture(scope=\"session\")\n    def driver():\n        \"\"\"创建一个WebDriver实例，整个会话共享使用\"\"\"\n        chrome_options = Options()\n        chrome_options.add_argument(\"--start-maximized\")\n        chrome_options.add_argument(\"--disable-gpu\")\n        chrome_options.add_argument(\"--no-sandbox\")\n        chrome_options.add_argument(\"--disable-dev-shm-usage\")\n    \n        # 检查本地是否有chromedriver\n        chromedriver_path = \"chromedriver-win64/chromedriver.exe\"\n    \n        try:\n            if os.path.exists(chromedriver_path):\n                logger.info(f\"使用本地ChromeDriver: {chromedriver_path}\")\n                service = Service(executable_path=chromedriver_path)\n                driver = webdriver.Chrome(service=service, options=chrome_options)\n            else:\n                logger.info(\"使用WebDriver Manager下载ChromeDriver\")\n                service = Service(ChromeDriverManager().install())\n                driver = webdriver.Chrome(service=service, options=chrome_options)\n    \n            driver.maximize_window()\n            # 设置一个较长的隐式等待时间\n            driver.implicitly_wait(10)\n    \n            # 打开测试系统的登录页\n            base_url = \"http://your-application-url/\"  # 请替换为实际的应用URL\n>           driver.get(base_url)\n\nconftest.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E34160C850>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...07FF6F5F44D89]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=134.0.6998.177)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\nE       \t(No symbol) [0x00007FF6F5F4EAD0]\nE       \t(No symbol) [0x00007FF6F5DD91CA]\nE       \t(No symbol) [0x00007FF6F5DD5BC2]\nE       \t(No symbol) [0x00007FF6F5DC6919]\nE       \t(No symbol) [0x00007FF6F5DC8688]\nE       \t(No symbol) [0x00007FF6F5DC6C26]\nE       \t(No symbol) [0x00007FF6F5DC66A6]\nE       \t(No symbol) [0x00007FF6F5DC636A]\nE       \t(No symbol) [0x00007FF6F5DC3EF2]\nE       \t(No symbol) [0x00007FF6F5DC47DC]\nE       \t(No symbol) [0x00007FF6F5DDD01A]\nE       \t(No symbol) [0x00007FF6F5E80F4E]\nE       \t(No symbol) [0x00007FF6F5E578EA]\nE       \t(No symbol) [0x00007FF6F5E800B8]\nE       \t(No symbol) [0x00007FF6F5E576C3]\nE       \t(No symbol) [0x00007FF6F5E20490]\nE       \t(No symbol) [0x00007FF6F5E21743]\nE       \tGetHandleVerifier [0x00007FF6F634436D+3525677]\nE       \tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\nE       \t(No symbol) [0x00007FF6F5F5990F]\nE       \t(No symbol) [0x00007FF6F5F55674]\nE       \t(No symbol) [0x00007FF6F5F55816]\nE       \t(No symbol) [0x00007FF6F5F44D89]\nE       \tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1743990232778,"stop":1743990240525,"duration":7747},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=134.0.6998.177)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\n\t(No symbol) [0x00007FF6F5F4EAD0]\n\t(No symbol) [0x00007FF6F5DD91CA]\n\t(No symbol) [0x00007FF6F5DD5BC2]\n\t(No symbol) [0x00007FF6F5DC6919]\n\t(No symbol) [0x00007FF6F5DC8688]\n\t(No symbol) [0x00007FF6F5DC6C26]\n\t(No symbol) [0x00007FF6F5DC66A6]\n\t(No symbol) [0x00007FF6F5DC636A]\n\t(No symbol) [0x00007FF6F5DC3EF2]\n\t(No symbol) [0x00007FF6F5DC47DC]\n\t(No symbol) [0x00007FF6F5DDD01A]\n\t(No symbol) [0x00007FF6F5E80F4E]\n\t(No symbol) [0x00007FF6F5E578EA]\n\t(No symbol) [0x00007FF6F5E800B8]\n\t(No symbol) [0x00007FF6F5E576C3]\n\t(No symbol) [0x00007FF6F5E20490]\n\t(No symbol) [0x00007FF6F5E21743]\n\tGetHandleVerifier [0x00007FF6F634436D+3525677]\n\tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\n\tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\n\t(No symbol) [0x00007FF6F5F5990F]\n\t(No symbol) [0x00007FF6F5F55674]\n\t(No symbol) [0x00007FF6F5F55816]\n\t(No symbol) [0x00007FF6F5F44D89]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\n","statusTrace":"  File \"D:\\Python39\\lib\\site-packages\\pluggy\\_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"D:\\Python39\\lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n  File \"D:\\Python39\\lib\\site-packages\\pluggy\\_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n  File \"D:\\Python39\\lib\\site-packages\\_pytest\\fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"D:\\Python39\\lib\\site-packages\\_pytest\\fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n  File \"E:\\AutoTest\\FgAI\\conftest.py\", line 78, in driver\n    driver.get(base_url)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 454, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0}],"testStage":{"description":"测试个人中心完整流程","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=134.0.6998.177)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\n\t(No symbol) [0x00007FF6F5F4EAD0]\n\t(No symbol) [0x00007FF6F5DD91CA]\n\t(No symbol) [0x00007FF6F5DD5BC2]\n\t(No symbol) [0x00007FF6F5DC6919]\n\t(No symbol) [0x00007FF6F5DC8688]\n\t(No symbol) [0x00007FF6F5DC6C26]\n\t(No symbol) [0x00007FF6F5DC66A6]\n\t(No symbol) [0x00007FF6F5DC636A]\n\t(No symbol) [0x00007FF6F5DC3EF2]\n\t(No symbol) [0x00007FF6F5DC47DC]\n\t(No symbol) [0x00007FF6F5DDD01A]\n\t(No symbol) [0x00007FF6F5E80F4E]\n\t(No symbol) [0x00007FF6F5E578EA]\n\t(No symbol) [0x00007FF6F5E800B8]\n\t(No symbol) [0x00007FF6F5E576C3]\n\t(No symbol) [0x00007FF6F5E20490]\n\t(No symbol) [0x00007FF6F5E21743]\n\tGetHandleVerifier [0x00007FF6F634436D+3525677]\n\tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\n\tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\n\tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\n\t(No symbol) [0x00007FF6F5F5990F]\n\t(No symbol) [0x00007FF6F5F55674]\n\t(No symbol) [0x00007FF6F5F55816]\n\t(No symbol) [0x00007FF6F5F44D89]\n\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\n\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]","statusTrace":"@pytest.fixture(scope=\"session\")\n    def driver():\n        \"\"\"创建一个WebDriver实例，整个会话共享使用\"\"\"\n        chrome_options = Options()\n        chrome_options.add_argument(\"--start-maximized\")\n        chrome_options.add_argument(\"--disable-gpu\")\n        chrome_options.add_argument(\"--no-sandbox\")\n        chrome_options.add_argument(\"--disable-dev-shm-usage\")\n    \n        # 检查本地是否有chromedriver\n        chromedriver_path = \"chromedriver-win64/chromedriver.exe\"\n    \n        try:\n            if os.path.exists(chromedriver_path):\n                logger.info(f\"使用本地ChromeDriver: {chromedriver_path}\")\n                service = Service(executable_path=chromedriver_path)\n                driver = webdriver.Chrome(service=service, options=chrome_options)\n            else:\n                logger.info(\"使用WebDriver Manager下载ChromeDriver\")\n                service = Service(ChromeDriverManager().install())\n                driver = webdriver.Chrome(service=service, options=chrome_options)\n    \n            driver.maximize_window()\n            # 设置一个较长的隐式等待时间\n            driver.implicitly_wait(10)\n    \n            # 打开测试系统的登录页\n            base_url = \"http://your-application-url/\"  # 请替换为实际的应用URL\n>           driver.get(base_url)\n\nconftest.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E34160C850>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...07FF6F5F44D89]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=134.0.6998.177)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6F5FEDF85+26693]\nE       \t(No symbol) [0x00007FF6F5F4EAD0]\nE       \t(No symbol) [0x00007FF6F5DD91CA]\nE       \t(No symbol) [0x00007FF6F5DD5BC2]\nE       \t(No symbol) [0x00007FF6F5DC6919]\nE       \t(No symbol) [0x00007FF6F5DC8688]\nE       \t(No symbol) [0x00007FF6F5DC6C26]\nE       \t(No symbol) [0x00007FF6F5DC66A6]\nE       \t(No symbol) [0x00007FF6F5DC636A]\nE       \t(No symbol) [0x00007FF6F5DC3EF2]\nE       \t(No symbol) [0x00007FF6F5DC47DC]\nE       \t(No symbol) [0x00007FF6F5DDD01A]\nE       \t(No symbol) [0x00007FF6F5E80F4E]\nE       \t(No symbol) [0x00007FF6F5E578EA]\nE       \t(No symbol) [0x00007FF6F5E800B8]\nE       \t(No symbol) [0x00007FF6F5E576C3]\nE       \t(No symbol) [0x00007FF6F5E20490]\nE       \t(No symbol) [0x00007FF6F5E21743]\nE       \tGetHandleVerifier [0x00007FF6F634436D+3525677]\nE       \tGetHandleVerifier [0x00007FF6F6357F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF6F634CEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF6F60B7C0A+853194]\nE       \t(No symbol) [0x00007FF6F5F5990F]\nE       \t(No symbol) [0x00007FF6F5F55674]\nE       \t(No symbol) [0x00007FF6F5F55816]\nE       \t(No symbol) [0x00007FF6F5F44D89]\nE       \tBaseThreadInitThunk [0x00007FF8EA71E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8EC15BF6C+44]\n\nD:\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException","steps":[],"attachments":[{"uid":"a3929ba411bb1c83","name":"log","source":"a3929ba411bb1c83.txt","type":"text/plain","size":1297},{"uid":"8f36290efbc2df5d","name":"stderr","source":"8f36290efbc2df5d.txt","type":"text/plain","size":1355}],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[],"labels":[{"name":"story","value":"完整测试流程"},{"name":"feature","value":"个人中心"},{"name":"parentSuite","value":"test_001"},{"name":"suite","value":"test_UserCenter"},{"name":"subSuite","value":"TestPersonalCenter"},{"name":"host","value":"DESKTOP-3S8JLNL"},{"name":"thread","value":"1736-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_001.test_UserCenter"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"e054582a5e1a37b8.json","parameterValues":[]}